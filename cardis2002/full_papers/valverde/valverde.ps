%!PS-Adobe-2.0%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software%%Title: AES_on_crypto2000.dvi%%CreationDate: Tue Sep 24 13:26:24 2002%%Pages: 11%%PageOrder: Ascend%%BoundingBox: 0 0 612 792%%EndComments%DVIPSWebPage: (www.radicaleye.com)%DVIPSCommandLine: c:/localtexmf/miktex/bin/dvips -t letter%+ AES_on_crypto2000%DVIPSParameters: dpi=600, compressed%DVIPSSource:  TeX output 2002.09.24:1326%%BeginProcSet: texc.pro%!/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{SN}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 00 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsizemul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall roundexch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat Ndf-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn Adefinefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 31 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cxsub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gpgp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copyget A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cpfillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 addchg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get Amul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A length product exch 0exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelseend{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemaskgrestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch roundexch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlinetofill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S pdelta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 Srmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end%%EndProcSet%%BeginProcSet: psfrag.pro%%%% This is file `psfrag.pro',%% generated with the docstrip utility.%%%% The original source files were:%%%% psfrag.dtx  (with options: `filepro')%% %% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.%% All rights reserved.%% %% This file is part of the PSfrag package.%% userdict begin/PSfragLib 90 dict def/PSfragDict 6 dict def/PSfrag { PSfragLib begin load exec end } bind defendPSfragLib begin/RO /readonly      load def/CP /currentpoint  load def/CM /currentmatrix load def/B { bind RO def } bind def/X { exch def } B/MD { { X } forall } B/OE { end exec PSfragLib begin } B/S false def/tstr 8 string def/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forallsM currentmatrix RO popdM defaultmatrix RO idM invertmatrix RO popsrcFM identmatrix pop/Hide { gsave { CP } stopped not newpath clip { moveto } if } B/Unhide { { CP } stopped not grestore { moveto } if } B/setrepl islev2 {{ /glob currentglobal def true setglobal array astore                   globaldict exch /PSfrags exch put glob setglobal }}                {{ array astore /PSfrags X }} ifelse B/getrepl islev2 {{ globaldict /PSfrags get aload length }}                {{ PSfrags aload length }} ifelse B/convert {   /src X src length string   /c 0 def src length {      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def   } repeat} B/Begin {    /saver save def    srcFM exch 3 exch put    0 ne /debugMode X 0 setrepl    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat    srcM CM dup invertmatrix pop    mark { currentdict { end } stopped { pop exit } if } loop    PSfragDict counttomark { begin } repeat pop} B/End {    mark { currentdict end dup PSfragDict eq { pop exit } if } loop    counttomark { begin } repeat pop    getrepl saver restore    7 idiv dup /S exch dict def {        6 array astore /mtrx X tstr cvs /K X        S K [ S K known { S K get aload pop } if mtrx ] put    } repeat} B/Place {    tstr cvs /K X    S K known {        bind /proc X tM CM pop        CP /cY X /cX X        0 0 transform idtransform neg /aY X neg /aX X        S K get dup length /maxiter X        /iter 1 def {            iter maxiter ne { /saver save def } if            tM setmatrix aX aY translate            [ exch aload pop idtransform ] concat            cX neg cY neg translate cX cY moveto            /proc load OE            iter maxiter ne { saver restore /iter iter 1 add def } if        } forall        /noXY { CP /cY X /cX X } stopped def        tM setmatrix noXY { newpath } { cX cY moveto } ifelse    } {        Hide OE Unhide    } ifelse} B/normalize {    2 index dup mul 2 index dup mul add sqrt div    dup 4 -1 roll exch mul 3 1 roll mul} B/replace {    aload pop MD    CP /bY X /lX X gsave sM setmatrix    str stringwidth abs exch abs add dup 0 eq        { pop } { 360 exch div dup scale } ifelse    lX neg bY neg translate newpath lX bY moveto    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall    flattenpath pathbbox [ /uY /uX /lY /lX ] MD    CP grestore moveto    currentfont /FontMatrix get dstFM copy dup    0 get 0 lt { uX lX /uX X /lX X } if    3 get 0 lt { uY lY /uY X /lY X } if    /cX uX lX add 0.5 mul def    /cY uY lY add 0.5 mul def    debugMode { gsave 0 setgray 1 setlinewidth        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath        lX bY moveto uX bY lineto lX cY moveto uX cY lineto        cX lY moveto cX uY lineto stroke    grestore } if    dstFM dup invertmatrix dstM CM srcM    2 { dstM concatmatrix } repeat pop    getrepl /temp X        S str convert get {            aload pop [ /rot /scl /loc /K ] MD            /aX cX def /aY cY def            loc {                dup 66  eq { /aY bY def } { % B                dup 98  eq { /aY lY def } { % b                dup 108 eq { /aX lX def } { % l                dup 114 eq { /aX uX def } { % r                dup 116 eq { /aY uY def }   % t                if } ifelse } ifelse } ifelse } ifelse pop            } forall            K srcFM rot tM rotate dstM            2 { tM concatmatrix } repeat aload pop pop pop            2 { scl normalize 4 2 roll } repeat            aX aY transform            /temp temp 7 add def        } forall    temp setrepl} B/Rif {    S 3 index convert known { pop replace } { exch pop OE } ifelse} B/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B/xs   { pop } XA XC/xks  { /kern load OE } XA /kern XC/xas  { pop ax ay rmoveto } XA /ay /ax XC/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }    XA /ay /ax /c /cy /cx XC/raws { xaws { awidthshow } Rif } B/rws  { xws { widthshow } Rif } B/rks  { xks { kshow } Rif } B/ras  { xas { ashow } Rif } B/rs   { xs { show } Rif } B/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } BPSfragDict beginislev2 not { /restore { /rrs PSfrag } B } if/show       { /rs   PSfrag } B/kshow      { /rks  PSfrag } B/ashow      { /ras  PSfrag } B/widthshow  { /rws  PSfrag } B/awidthshow { /raws PSfrag } Bend PSfragDict RO popend%%EndProcSet%%BeginProcSet: special.pro%!TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/hoX}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known{userdict/md get type/dicttype eq{userdict begin md length 10 add mdmaxlength ge{/md md dup length 20 add dict copy def}if end md begin/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform Satan/pa X newpath clippath mark{transform{itransform moveto}}{transform{itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 rolltransform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 rollcurveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdfpop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflipyflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg subneg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 getneg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg STR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedStatesave N userdict maxlength dict begin/magscale true def normalscalecurrentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$xpsf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sxpsf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury subTR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpathmoveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDictbegin/SpecialSave save N gsave normalscale currentpoint TR@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlinetoclosepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llxsub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelseCLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx urylineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveXcurrentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveYmoveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 01 startangle endangle arc savematrix setmatrix}N end%%EndProcSetTeXDict begin 40258431 52099146 1000 600 600 (AES_on_crypto2000.dvi)@start%DVIPSBitmapFont: Fa cmsl10 10 58/Fa 58 123 df<130F5BEB3F80EB7F005BEA01FC485A485AEA0FC0485A003EC7FC123C5A12E05A110F67B92A>19 D<151FEDFFC0EC03E04A487E91380F8060EC1F00143EA25CA214FCA25C16E05E010113014B5A4BC9FC1506150E5D5D5D5DDAFDC090381FFFF8ECFF806D90C7FC4A020313004AEC01FC6EEC00F06001014B5A01034B5AD9077F92C7FC010E5D496C6C130E01385D0170151848486C6C1338D803C05D00076D6C5BD80F805D001F903807F001D83F004A5A6E6C48C8FC48ECFC0E00FE01015B6F5A02001378EDFF706F4813036F481306A26C6E6C130E180C6CDA7FF0131C6DD9F3F85B283FC003C1FE13F03C1FE03F80FF03E03C0FFFFE003FFFC0000301F8010F90C7FC26007FC0EB01FC3D3E7BBB41>38D<EA0780EA1FC0EA3FE0A6EA0F601200A213E013C0A2120113801203EA07001206120E5A5A5A5A5A0B1972B917>I<EA0780EA1FC0EA3FE0A6EA0F601200A213E013C012011380A21203EA07001206120E5A5A5A5A5A0B197A8817>44 D<B512FCA516057C941C>I<121E127FEAFF80A413005A123C0909788817>I<EC0FF0EC7FFC903801F83F903907C00F8090390F8007C090391F0003E0013E13014914F0A25B000115F84913001203A24848130116FCA2120F5BA2121F16F8A2491303123FA548C7EA07F0A516E0007E140FA212FE16C0A2151F1680A3007EEC3F00A2153E157E157C003E5CA26C495A4A5A6C6C485A3907C01F802603F07EC7FC3800FFF8EB3FC0263A7AB72A>48 D<15C014031407141F14FF90B5FC15803801FE3FC7FCA3147F1500A55C5CA513015CA513035CA513075CA5130F5CA5131F5CA3133F497EB612F0A215E01C3878B72A>I<EC07F8EC3FFF91B512C0903903F01FE0903907800FF090390E0003F84914FC49EB01FE5B0160130001E014FF13FC487E7FA449EB01FE5BEA007890C7FCED03FCA2ED07F8ED0FF0A2ED1FE0ED3FC01680ED7F0015FE4A5A4A5AEC07E04A5A4A5A4AC7FC147C5C495A495AD90780136049C7FC131E4914C013705B484813014848EB038048B6FC5A003F15005AB7FC5DA228387CB72A>I<EC01FE91380FFF80023F13E09138FF01F0903901F80070903907F001F890380FC00390381F8007EB3F005B13FE4914F00001EC01C0484890C7FCA2485A120F5BA2121FEBC07F393FC1FFC09038C781F09038CE00F84848137C01B87F01F0133F5BED1F80485A4914C0A390C7FC153FA25AA4157F1680A316005D5DA2007E495A5D003E1303003F495A6C6C485AEC1F80260FE07FC7FC3803FFFC6C13F038003FC0253A79B72A>54 D<1206120EEA0F8090B612F8A25A16F016E04815C016800038C7EA07004814060060140E5D5D485C5D4A5AC7485A4AC7FC1406140E5C5C5C14F05C495A1303495AA249C8FC5BA2133EA25B13FCA212015B1203A3485AA2120FA3485AA5123F5BA26C5A6CC9FC253B74B82A>I<EC0FF0EC7FFC49B5FC903907F01F8090390FC00FC090381F8007D93F0013E0017EEB03F013FE485A484814F8150112075B000F1403A3001F15FC5BA216F8A21507A25B150FA3000F141F153F6C6C14F0157F000314EF3901F001CF3A00F8039FE090387C0F1FEB1FFCD907F013C090C7123FA21680157F1600A215FE001C5C007F130148495A5D4A5A4A5A48495A4849C7FC007013FE387C03F8383FFFF0000F13C0D803FEC8FC263A7AB72A>57 D<160EA2161EA2163E163F5EA25EA25D83ED037FA21506A2150C83ED183FA21530A2156083EDC01F14011580140303007F5C0206130F140E140C141C0218800238130714301470146091B6FC835B913880000349C7FCA2130683491401A25BA24981A201708013F0486C4A1380D80FFC4A13C0B56C017F13FF93B6FC18FE383C7DBB3E>65D<017FB612F017FEEFFF8001009039C0003FE06E48EB1FF0EF07F814FF92C7EA03FC18FEA21701A25B5CA21703A218FC010315074A15F8EF0FF0EF1FE0EF3FC0EF7F800107913801FF004AEB07FC91B612F05F9139F80007FCEE00FE010FED7F804AEC3FC0171F18E018F0170F131F4A15F8A5013F16F04A141FA218E0173FEF7FC0137F4AECFF804C13004C5AEE0FFCD801FFEC3FF0B812C094C7FC16F837397DB83B>I<DB07FC130692397FFF800E4AB5EAE01E913A07FC01F03C913A1FE000787CDA7F80EB1CFC02FEC7120FD903FC1407495A4948EC03F849481401495A4948140049C9FC5A4916F04848167012075B120FA248481660A25B003F1700A3485AA512FF5BA51703A2127FA25F17066C6C150EA25F121F6D5D000F5E7F6C6C5D00034B5A6C6C4A5A6C6C020FC7FCD97F80131E6D6C137890390FF803F00103B512C0010091C8FCEC1FF8373D77BA3C>I<017FB612F017FE717E0100D9C0007F6E48EB1FE0EF07F002FF6E7E92C76C7E717E8484F03F805B5C19C0181FA219E013035CA513074A153FA5010F17C04A157FA31980A2011F16FF4A1600A24D5AA24D5A013F5E4A1407604D5A4D5A173F017F4B5A4A02FEC7FC4C5AEE07F8EE1FF0D801FFECFFC0B8C8FC16FC16C03B397DB83F>I<017FB712FEA301009038C000076E481300183E02FF151E92C8FC180EA45B4A1506A3933801800CA20103EC03004A1500A25EA25E0107141E4A137E91B512FEA3ECF800010F143C4A131CA3160C041C1306011F0218130C5CA293C71218A3013F16305C1870186018E0A2017F15014AEC03C01707171FEF7F80D801FFEC03FFB9FC1800A237397DB839>I<017FB712FCA301009038C0000F6E481301EF007C02FF153C92C8FC181CA45B4A150CA318181603010314064A1500A3160EA201075C4A133C16FC91B5FCA390390FF801F89138F000781638A4011F14305CA393C8FCA2133F5CA5137F5CA448487EB612E0A336397DB836>I<DB07FE130392393FFF80074AB5EAE00F913A07FE01F81E913A1FF0003C3EDA7F80EB1E7E4AC7EA07FEEB03FC494814034948EC01FC49481400495A495A49C9127CA2484816784848163812075B120FA248481630A348481600A3485AA512FF5BA293B6FC18FE5D92C713C0007FEE7F80A417FF6C7E1800A26C7EA26C6C5CA26C6C5D6C6C14036C6C14076C6CEC0E7E6D6C131CD93FE0EB783E903A0FFC03F01C0103B5EAC00C010091C8FCEC0FF8383D78BA41>I<017FB500C0B61280A24C150001009026C0000113806E486D90C7FC5F14FF92C75BA417035B4A5DA4170713034A5DA4170F13074A5D91B7FCA302F8C7121F130F4A5DA4173F131F4A5DA4177F133F4A5DA417FF137F4A92C8FCA448486C01037FB60081B6FCA203015C41397DB83E>I<013FB512E0A25B9039007FE0006E5AA2147F5DA514FF92C7FCA55B5CA513035CA513075CA5130F5CA5131F5CA5133F5CA4EBFFE0007FEBFFC0A2B6FC23397EB81E>I<023FB512F0A217E09139001FFC006F5AA35EA4151FA25EA4153FA25EA4157FA25EA415FFA293C7FCA45CA25DA41403A2D81F805BEA3FC0EA7FE0A24A5AEAFFC0140F01805B6C48485A00605C0070495A6C49C8FC6C13FE380F03F83803FFE0C690C9FC2C3B7CB82B>I<017FB512F0A3010001C0C8FC6E5AA214FF92C9FCA55B5CA513035CA513075CA5130F5CA4EF0180011FED03005CA25F1706A2013F150E4A140CA2171C173C1738017F15784A14F81601EE07F0161FD801FF14FFB8FC5FA231397DB834>76 D<90267FFF80923803FFFE81610100F0FE00027FEE0DFCDA6FE0151B14EF02CFEE33F8A2DAC7F01563A219C71301028792380187F0DA83F8EC0307A21806190F90260381FC140C02015F1818A218306E6C151F491660010604C05BA2037FEB0180A2943803003F130E010C03065CED3F805F5F197F011C6D6C5A011895C7FC5FA25FDB0FE05C0138ECE180013002E3C75AA216E6ED07F604FC1301137001604A5C150301F05C00015DD807FCEE07FEB500E0D9C003B512FC150116804F397DB84C>I<90267FFFC00103B51280A26F1600D9007F9138003FF06FEC0F8072C7FCECEFF802CF1506ECC7FCA2ECC3FE180E903801C1FF0281150C02807FA26F7E181C01036D7E020015186F7EA26F7E1838496D7E010616306F7EA26F7E6F1470010E1580010C027F136017C0163F17E0041F13E0011C15F00118020F5B17F8160717FCEE03FD013815FF01306E5BA282A2177F137001606FC8FCA201F0811201D807FC81B512E017065C41397DB83E>I<ED0FFC92B57E913903F80FE091390FC003F8023FC77E027E147ED901F8804948EC1F804948EC0FC0494815E049481407013F16F049C8FC01FEED03F812014916FC1203491501000717FE485AA2121F5BA2123F17035B127FA54848ED07FCA4EF0FF8A3EF1FF0127F18E0173F18C0EF7F806C7EEFFF005F001F15016D4A5A000F5E6C6C4A5A4C5A6C6C4A5A6C6C4AC7FC6C6C147E017F495A90391F8007F090390FF01FC0902601FFFEC8FC9038003FF0373D77BA41>I<017FB612E017FC17FF0100D9C00013C06E48EB1FE0EF0FF002FFEC07F892C7EA03FCA318FEA25B5CA418FC010315075C18F8EF0FF0A2EF1FE00107ED3FC04AEC7F00EE01FEEE0FF891B612E094C7FCD90FF8C9FC5CA5131F5CA5133F5CA5137F5CA448487EB67EA337397DB839>I<017FB6FC17F017FC01009038C003FF913A7F80007FC0EF1FE002FF6E7E92C7FC717EA284A25B5CA44D5A13034A5D4D5A604D5A4DC7FC0107EC01FE4AEB03F8EE3FE091B6C8FC16FC9138F8007F010FEC1FC04A6D7E707E83160383131F5CA5013F14075CA5017F17C05CA21801198048486C1503B6D880031400706C5A92C7130ECAEA3FFCEF07F03A3B7DB83D>82D<DA03FC133091391FFF8070027FEBE0F0903A01FC03F1E0903903F0007B4948133F4948131F4948130F49C71207013E15C0017E14035BA3000115014915807FA46D91C7FC7F8014E06C13FEECFFC06D13FC6D13FF16C06D14F00107801301D9003F7F14039138007FFE150715036F7E81A2821218A30038157EA45EA2007C5D1501007E4A5A007F5D6D495A6D495AD8F9F0013FC7FCD8F0FE13FE90383FFFF8D8E00F13E0D8C00190C8FC2C3D7CBA2E>I<0007B812FCA3903AF8007FE003D80FC090383FC00049163C000EC7127F001E4B131C121CA212180038170C003014FF93C7FCA25A1818A2485BC7491400A514035DA514075DA5140F5DA5141F5DA5143F5DA3147F4A7E0003B612F85AA2363977B83C>I<B6D88007B5FCA2030014FE000101809038007FE06C90C8EA1F00170E5A49150CA4171C1203491518A417381207491530A41770120F491560A417E0121F495DA41601123F495DA3160394C7FCA25E1606160E001F150C161C5E6C6C14785E6C6C495A00034A5A6D495A6C6C011FC8FC39007F80FC6DB45A010F13E0010190C9FC383B74B83E>I<B5D8FC03B500F090B51280A24B5D0007902780001FFEC7381FF8006C48C7D80FF8EC07E04D15800001701403040793C7FC1A06A262A26D606C82040F5DA2041F5D161B6E013B5D017FEC33FE04314A5A16614FC8FC16C16E1606013FEB018171130E4BC6140C191C0306151819386E481530011FEE80704B017F1360A24B5DA26E48EC8180010F16C14B02C3C9FC173FDAF18014C6A202F3C713CC14FBD907FE15F8171F4A5DA24A5DA26D485D170F4A5DA295CAFC5C170E6D481406513B75B855>87D<011FB539C00FFFFE495D16809028007FFC000313C0DA3FF0903801FC00715A021F15E0020F4A5A6F5C4DC7FC6E6C5B170E6E6C130C5F6E6C5B5F6EEB80E0EE81C092387FC18004C3C8FCED3FE616EEED1FFC5E5E6F7EA26F7EA26F7E1507ED0DFF151903387F5D9238607FC015C0913801803FDA03007F5C020E6D7E140C4A6D7E5C02706D7E5C49486D7E5C49C76C7E5B010E6E7F133E017F4A7F2603FF80497FB500F0013FEBFF80A33F397EB83E>I<B691381FFFE0A24A5C000301E0913807FE00C649EC03F060017F1680A26D6C4AC7FC17066D6C5C5F17386D6C14305F6D6C5C16016D6C5C4CC8FC6E13066D140E160C6D6D5A16386E6C5A16606F5AEC3FE1EDE380DA1FF3C9FC15F6EC0FFE5D5D14075D140FA55D141FA55D143FA5ECFFE0017FEBFFC05EA23B3976B83E>I<14FF010713E090381F01F8903878007C01F8137E01FE7F0001801680A35BEA007090C7FCA4EC0FFF49B5FC90390FFC3F00EB7FC03801FE00EA03F848485B485A4848137E485A007F150690C7FC15FE48ECFC0C481301A21403007F9038077C18140E3A3F801C7E303A1FC0F83FF03A07FFE01FC0C69038000F8027277CA52A>97 D<137FEA1FFF5BA212011200A35BA512015BA512035BEC1FC0EC7FF89038F1E03E9038F7801F3A07FE000F8049EB07C04914E04913034914F0A2000F15F8491301A41503121F5BA41507003F15F090C7FC16E0150F16C0151F481580ED3F005D6D137E007D5C3979C001F039F0E007E039E0781F8026C01FFEC7FC380007F0253B78B92E>I<EC7F80903803FFF090380FC07C90383F000E017C131F49137F000114FF485A485A120F484813FE153848481300A248C8FCA35A5AA75A7EA2151C127E15386C143015706C6C13E0000FEB01C03907C007803903F03E003800FFF8EB1FC020277AA525>I<EE3F80ED0FFF1700A2150082A3167EA416FEA25EA41501A25E147F903803FFE190380FC0F190383F003B017C131F48486D5A48481307120749130348481307121F495C123F90C7FC5A150F5A485DA4151FA2485DA46C143F127E4BC7FC123E003F5C6C5B6C6C487F3A07C00F7FFC3803E03C2600FFF05B90261FC07EC7FC293B7AB92E>I<147F903803FFE090380F81F090383E00FC49137C48487F4848133F0007805B48481480121F5B123FA248C7FCA3B71200A248C9FCA65A7EA2007E140EA25D6C14186C14386D5B6C6C485A3907E003802601F01FC7FC38007FFCEB1FE021277BA525>I<157F913801FFC0913807C1E091381F87F0EC3F0F147E14FCA2D901F813E0ED07C04948C7FCA413075CA5130F5CA20007B512E0A326001FC0C7FC5CA5133F91C8FCA55B137EA513FE5BA512015BA4487EB512F0A3243B7EBA19>I<EE07E091391FE01FF091397FF87878903A01F03FE0F8903907E01F80D90FC014F090261F800F1360D93F00EBC000A2017E1307150F13FE5BA44B5AA2017C49C7FC153E6D5B013F5B90387F83F09038E7FFC0D9E0FEC8FC4848C9FCA57F7F90B512E015FE6C6E7E6D8048B67E3A07C0003FF0D81F80130748C76C7E003E140148140012FC5AA315015E4B5A007C1407007E4A5A6C023FC7FCD80F80137E3903F007F8C6B512C0D91FFCC8FC2D387FA52A>I<EB01FC137F5CA213071303A35CA513075CA5130F5CED3FC0EDFFF09138C3C0F89138CF007CD91FDC137E5C02F0133E4A133F5C5E4948137EA291C7FCA316FE5B017E5CA4150113FE495CA415031201495CA400031407B500E1B512C0A202C114802A3A7EB92E>I<EB01C0EB07F0130F14F8A214F0A214E0EB038090C7FCAAEB0FC0EA03FFA3EA003FEB1F80A5133F1400A55B137EA513FE5BA512015BA41203B512C0A315387EB717>I<EB01FC137F5CA213071303A35CA513075CA5130F5CA2923807FFF0A217E0011F6D1300028013F816E016804BC7FC151E013F13384A5A4A5AEC03801407140F90387F3FC0EB7E7FECE7E090387F87F01403017E7FEBFE0101FC7F140081157E811201496D7E82A282486C80B500E0B5FCA25C2C3A7EB92C>107 D<14FC137F14F8A213071303A314F0A5130714E0A5130F14C0A5131F1480A5133F1400A55B137EA513FE5BA512015BA41203B512E014C0A2163A7EB917>I<90270FC03FC0EB7F80D803FF903AFFF001FFE048903BC3C0F80781F0913BCF007C1E00F826003FDCD97E387F6D485C02F0D93EE0137C4AD93FC0137E4A5C047F14FE494891C75AA291C7127EA44902FE1301017E4A5CA501FE01011403494A5CA5000102031407494A5CA4486C496C497EB500E1B500C3B51280A202C10283140041257EA445>I<90390FC03FC0D803FFEBFFF0489038C3C0F89138CF007C26003FDC137E6D5A02F0133E4A133F5C5E4948137EA291C7FCA316FE5B017E5CA4150113FE495CA415031201495CA400031407B500E1B512C0A202C114802A257EA42E>I<EC3FC0903801FFF8903807C07C90381F001F017CEB0F8049EB07C0485A4848EB03E0120749EB01F0485A001F15F8A248C7FCA25AA2007E140312FEA416F015075A16E0150F16C07E007EEC1F801600003E143E003F5C6C5C6C6C485A3907C007E03901F81F802600FFFEC7FCEB1FF025277BA52A>I<903901F80FE0017FEB3FFC01FFEBF03F9139FBC00F80902607FF0013C06D48EB07E04AEB03F05C4A14F81601010715FC5CA5130F5CA41603011F15F85CEE07F0A2EE0FE0A2013FEC1FC01780163F6EEB7F0016FE9138E001F890397F7003F090397E3C0FC0DA0FFFC7FCEC03F891C9FC13FEA25BA41201A25BA2487EB512E0A32E3581A42E>I<027F1318903903FFC03890380FC0F090393F003878017EEB18F04848131C4848130D4848130F491307120F485A16E0485AA248C7FC150F5A4815C0A4151FA21680A4153F127E007FEC7F006C5C5C391F8003BF6C6C485A0007130E3903F03C7E3800FFF0EB1FC090C7FC15FE5DA514015DA34A7E91B512E0A325357AA42C>I<90381F807C3903FF81FF489038878F80EC8E1F39003F9C3FEB1F3814709138601F00ECE0044AC7FC133F5CA291C8FCA35B137EA513FE5BA512015BA4487EB512F0A321257EA421>I<903803FE0C90380FFF9C90383E01FCEBF0004848137C4848133C1538485AA215181538487E1530D807F0130013FCEBFFE06C13FC14FFC614806D13C0011F13E01300EC0FF01407003013031401A31238007814E0A3007CEB03C0EC0780127EB4EB1F0038F3C07C38E1FFF038C03F801E277DA521>I<1306A4130EA2130C131CA2133C137C13FC5B12031207001FB5FCB6FCA23803F8005BA512075BA5120F5BA5001F130C1380A4141C003F131813007E1438EB80301470380FC0E03807C1C03803FF8038007E00183479B220>I<D801F8EB03F0007F14FF00FF5BA20007EB000F6C48EB07E0A4150F12074914C0A4151F120F491480A4153F121F491400A35DA2003F5C90C75A14017E14036D487E000F011E13F83807E0782601FFF013F03A007F80FC00252679A42E>I<3A7FFFC01FFFB51280A23A07FC0007F86C48EB03E04914C06D1480000115001506A25D7F00005C153815306D5B137E5DA24A5AEB3F0392C7FC5C1406148C131F1498A214F0130F5C5CA25C130791C8FCA2282579A32C>I<B53A8FFFF01FFFA3260FF80090380007F86C48017EEB03E018C00003EE0180033E1303180017066C6C137F5F15DF5FEC019F01FC6E5A0000EB031F030F5B1406020E5C140CD97E1CEBC180141891263807C3C7FC1430026013C6017F14E6D93FC013EC1503028013F8A202005B7F011E5C1501011C5C5E382579A33C>I<90B538803FFE5A150026000FF8EB0FF06D48EB07C017801700010314065EA26E5B0101143816305E8001005CA24B5A1503027E90C7FC1506A25D147F6E5A1538153015E0141F5DA25D140F92C8FC140EA2140CA25C143814305CA2003E5B127E38FE018049C9FC5BEAFC0EEA701C1378EA3FE0EA0F802F3580A32C>121 D<90B612F0A23A01FE000FE001F0EB1FC049148049EB3F0048485B15FE49485A4A5A4A5A0006495A4A5A5DC7123F4AC7FC14FE495A495A495A495A90391FC001801480133FEB7F0001FEEB0300485A485A48485B485A49130E4848131E003F147E397F0001FEB65AA224247EA325>I E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fb cmmi8 8 4/Fb 4 108 df<123C127E12FFA4127E123C08087A8714>58 D<123C127EB4FCA21380A2127F123D1201A312031300A25A1206120E5A5A5A126009157A8714>I<EB07E0EB1FF890387C1CE0EBF80D3801F00F3803E007EA07C0120FD81F8013C0A2EA3F00140F481480127EA2141F00FE14005AA2EC3F02EC3E06A25AEC7E0E007CEBFE0C14FC0101131C393E07BE18391F0E1E38390FFC0FF03903F003C01F1F7D9D25>97 D<131FEA03FFA2EA003FA2133EA2137EA2137CA213FCA25BA2120115F89038F003FCEC0F0E0003EB1C1EEC387EEBE07014E03807E1C09038E3803849C7FC13CEEA0FDC13F8A2EBFF80381F9FE0EB83F0EB01F81300481404150C123EA2007E141C1518007CEBF038ECF83000FC1470EC78E048EB3FC00070EB0F801F2F7DAD25>107 D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fc cmr8 8 25/Fc 25 122 df<123C127EB4FCA21380A2127F123D1201A312031300A25A1206120E5A5A5A126009157A8714>44 D<123C127E12FFA4127E123C08087A8714>46D<B500F0EB7FFEA2D803FCC7EA1FF06C48EC0FC01700161E16385E5E4B5A4B5A4BC7FC150E5D5D15F0EC01C04A5A4A7E4A7E141F4A7EEC73F8ECE1FCEBF9C09038FF80FE9038FE007F497F49806F7E6F7E1507826F7E6F7EA26F7E167F821780EE1FC017E0486CEC3FF0B5D8F001B5FCA2302D7DAC37>75 D<D8FFF8923807FFC06D5D0003EFF00000015F01BE151BA2019F1533A3D98F801463A2D987C014C3A2D983E0EB0183A3D981F0EB0303A2D980F81306A3027C130CA26E1318A36E1330A291380F8060A2913807C0C0A3913803E180A2913801F300A3EC00FEA2157C487ED80FF04B7EB5D93801B512C0A23A2D7DAC41>77D<13FF000713C0380F01F0381C00F8003F137C80A2143F001E7FC7FCA4EB07FF137F3801FE1FEA07F0EA1FC0EA3F80EA7F00127E00FE14065AA3143F7E007E137F007FEBEF8C391F83C7FC390FFF03F83901FC01E01F207D9E23>97 D<EA07C012FFA2120F1207AC14FE9038C7FF809038CF03E09038DC01F09038F8007C49137E49133E497F1680A2150F16C0A9ED1F80A216005D6D133E6D5B01B05B9038BC01F090380E07E0390607FF80260001FCC7FC222F7EAD27>I<EB1FE0EB7FFC3801F01E3803E0073907C01F80EA0F80EA1F005A003EEB0F00007E90C7FCA2127C12FCA9127EA215C07E6C130101801380380FC0033907E007003801F03E38007FF8EB1FC01A207E9E1F>I<15F8141FA214011400ACEB0FE0EB7FF83801F81E3803E0073807C003380F8001EA1F00481300123E127EA25AA9127C127EA2003E13017EEB8003000F13073903E00EFC3A01F03CFFC038007FF090391FC0F800222F7EAD27>I<EB1F80EBFFF03803E0783807C03E380F801E381F001FEC0F80123E007E130715C0127C12FCA3B6FCA200FCC8FCA5127EA2003E14C0123F6C1301390F80038001C013003803E00F3801F03C38007FF8EB1FC01A207E9E1F>I<EB03F0EB0FFCEB3E1EEB7C3F13F8EA01F0A23803E00C1400AAB512E0A23803E000B3A6487E387FFF80A2182F7FAE16>I<013F13F89038FFC3FE3903E1FF1E3807807C000F140C391F003E00A2003E7FA76C133EA26C6C5A00071378380FE1F0380CFFC0D81C3FC7FC90C8FCA3121E121F380FFFF814FF6C14C04814F0391E0007F848130048147C12F848143CA46C147C007C14F86CEB01F06CEB03E03907E01F803901FFFE0038003FF01F2D7E9D23>I<EA07C012FFA2120F1207AC14FE9038C3FF809038C703E09038DE01F013F8496C7EA25BA25BB2486C487E3AFFFE1FFFC0A2222E7EAD27>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCA8EA07C012FFA2120F1207B3A5EA0FE0EAFFFCA20E2E7EAD14>I<EA07C012FFA2120F1207ADEC1FFEA2EC0FF0EC07C05D020EC7FC5C5C5C5CEBC3C013C7EBCFE0EBDFF013F9EBF0F8497EEBC07E143E80816E7E14076E7E816E7E486C487E3AFFFE07FF80A2212E7EAD25>107 D<EA07C012FFA2120F1207B3B3A3EA0FE0EAFFFEA20F2E7EAD14>I<2607C07FEB07F03BFFC3FFC03FFC903AC783F0783F3C0FCE01F8E01F803B07DC00F9C00F01F8D9FF8013C04990387F000749137EA249137CB2486C01FEEB0FE03CFFFE0FFFE0FFFEA2371E7E9D3C>I<3807C0FE39FFC3FF809038C703E0390FDE01F0EA07F8496C7EA25BA25BB2486C487E3AFFFE1FFFC0A2221E7E9D27>I<EB1FE0EB7FF83801F03E3803C00F3907800780390F0003C04814E0003EEB01F0A248EB00F8A300FC14FCA9007C14F8A26CEB01F0A26CEB03E0A2390F8007C03907C00F803901F03E0038007FF8EB1FE01E207E9E23>I<3807C0FE39FFC7FF809038CF03E0390FDC01F03907F800FC49137E49133E49133FED1F80A3ED0FC0A8151F1680A2ED3F00A26D137E6D137C5D9038FC01F09038CE07E09038C7FF80D9C1FCC7FC01C0C8FCA9487EEAFFFEA2222B7E9D27>I<380781F838FF87FEEB8E3FEA0F9CEA07B813B0EBF01EEBE000A45BB0487EB5FCA2181E7E9D1C>114D<3801FE183807FFB8381E01F8EA3C00481378481338A21418A27E7EB41300EA7FF06CB4FC6C13C06C13F0000113F838001FFC130138C0007E143EA26C131EA27EA26C133CA26C137838FF01F038E3FFC000C0130017207E9E1C>I<1360A413E0A312011203A21207121FB512F0A23803E000AF1418A714383801F03014703800F860EB3FE0EB0F80152A7FA81B>I<3AFFFC01FFC0A23A0FE0007E000007147C15380003143015706C6C1360A26C6C5BA390387C0180A26D48C7FCA2EB3F07EB1F06A2EB0F8CA214DCEB07D8A2EB03F0A36D5AA26D5A221E7F9C25>118 D<3BFFFC3FFE07FFA23B0FE003F001F801C09038E000F00007010114E0812603E00314C0A2913807F8012701F006781380A29039F80E7C030000D90C3C1300A290397C181E06A2151F6D486C5AA2168C90391F600798A216D890390FC003F0A36D486C5AA36DC75A301E7F9C33>I<3AFFFC01FFC0A23A0FE0007E000007147C1538000314306D137000011460A26C6C5BA2EBFC01017C5BEB7E03013E90C7FCA2EB1F06A2148EEB0F8CA2EB07D8A2EB03F0A36D5AA26D5AA2495AA2130391C8FC1278EAFC06A25B131CEA7838EA7070EA3FE0EA0F80222B7F9C25>121 D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fd cmr6 6 3/Fd 3 54 df<13FF000313C0380781E0380F00F0001E137848133CA248131EA400F8131FAD0078131EA2007C133E003C133CA26C13786C13F0380781E03803FFC0C6130018227DA01E>48 D<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>I<00101330381E01F0381FFFE014C01480EBFE00EA1BF00018C7FCA513FE381BFF80381F03C0381C01E0381800F014F8C71278A2147CA21230127812F8A214784813F8006013F0387001E01238381E07803807FF00EA01F816227CA01E>53 D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fe cmtt10 10.95 15/Fe 15 122 df<147F4A7EA2497FA4497F14F7A401077F14E3A3010F7FA314C1A2011F7FA490383F80FEA590387F007FA4498049133F90B6FCA34881A39038FC001F00038149130FA4000781491307A2D87FFFEB7FFFB56CB51280A46C496C130029397DB830>65D<91387F803C903903FFF03E49EBFC7E011F13FE49EBFFFE5B9038FFE07F48EB801F3903FE000F484813075B48481303A2484813015B123F491300A2127F90C8FC167C16005A5AAC7E7EA2167C6D14FE123FA27F121F6D13016C6C14FCA26C6CEB03F86D13076C6CEB0FF03901FF801F6C9038E07FE06DB512C06D14806D1400010713FC6D13F09038007FC0273A7CB830>67 D<D83FFF90380FFF80486D4813C0B56C5AA26C497E6C496C1380D803F0903803F8004B5A4B5A151F4B5A5E4BC7FC15FE14014A5A5D4A5A4A5A141F5D4A5A4AC8FC5C13F18101F37F13F790B57E14EFECC7F01483EC03F8140101FE7F496C7E5B157F497F82151F82150F826F7EA26F7E1501821500D83FFF903803FFC0486D4813E0B56C5AA26C497E6C496C13C02B387FB730>75 D<D83FF8ECFFE0486C4913F0486C4913F8A2007F16F06C6C4913E00007160001EF14BFEC800FA39039E7C01F3FA4ECE03F01E3133EA2ECF07EA201E1137CA2ECF8FCA201E013F8A214FDEC7DF0A3147FEC3FE0A3EC1FC0A2EC070091C7FCADD83FFC903801FFE0486C4913F0B54913F8A26C486D13F06C486D13E02D387FB730>77D<003FB57E4814F0B612FC15FF6C816C812603F8017F9138003FF0151F6F7E15071503821501A515035E1507150F4B5A153F4AB45A90B65A5E93C7FC5D8182D9F8007FED3FE0151F150F821507A817F8EEF1FCA53A3FFF8003FB4801C0EBFFF8B56C7E17F06C496C13E06C49EB7FC0C9EA1F002E397FB730>82 D<913801FFE04A7F5CA28080EC0007AAEB03FE90381FFF874913E790B6FC5A5A481303380FFC00D81FF0133F49131F485A150F4848130790C7FCA25AA25AA87E6C140FA27F003F141F6D133F6C7E6D137F390FF801FF2607FE07EBFFC06CB712E06C16F06C14F76D01C713E0011F010313C0D907FCC8FC2C397DB730>100D<49B4FC010713E0011F13F8017F7F90B57E488048018113803A07FC007FC04848133FD81FE0EB1FE0150F484814F0491307127F90C7FCED03F85A5AB7FCA516F048C9FC7E7EA27F003FEC01F06DEB03F86C7E6C7E6D1307D807FEEB1FF03A03FFC07FE06C90B5FC6C15C0013F14806DEBFE00010713F8010013C0252A7CA830>I<14E0EB03F8A2497EA36D5AA2EB00E091C8FCA9381FFFF8487F5AA27E7EEA0001B3A9003FB612C04815E0B7FCA27E6C15C023397AB830>105 D<387FFFF8B57EA47EEA0001B3B3A8007FB612F0B712F8A46C15F025387BB730>108 D<02FC137E3B7FC3FF01FF80D8FFEF01877F90B500CF7F15DF92B57E6C010F13872607FE07EB03F801FC13FE9039F803FC01A201F013F8A301E013F0B3A23C7FFE0FFF07FF80B548018F13C0A46C486C01071380322881A730>I<EC01FE3A3FFC0FFF80267FFE3F13E000FF90B57E90B67E7E6C9038FE07FCC6EBF8039138E001FE14C0EC8000A291C7FCA25BB3A23B3FFFF81FFFF8486D4813FCB500FE14FEA26C01FC14FC6C496C13F82F2880A730>I<49B4FC010F13E0013F13F8497F90B57E0003ECFF8014013A07FC007FC04848EB3FE0D81FE0EB0FF0A24848EB07F8491303007F15FC90C71201A300FEEC00FEA86C14016C15FCA26D1303003F15F86D13076D130F6C6CEB1FF06C6CEB3FE06D137F3A07FF01FFC06C90B512806C15006C6C13FC6D5B010F13E0010190C7FC272A7CA830>I<D83FFCEB3FFC486C497E00FF14FFA2007F147F003F143F00001400B3A41501A2150315076D130F903A7FC07FFFF891B612FC6D15FE7F6D4913FC6D9038F87FF8010001C0C7FC2F2880A630>117D<3A3FFF81FFFC4801C37FB580A26C5D6C01815BC648C66CC7FC137FEC80FE90383F81FC90381FC3F8EB0FE3ECE7F06DB45A6D5B7F6D5B92C8FC147E147F5C497F81903803F7E0EB07E790380FE3F0ECC1F890381F81FC90383F80FE90387F007E017E137F01FE6D7E48486D7E267FFF80B5FCB500C1148014E3A214C16C0180140029277DA630>120D<3B3FFFC07FFF80486DB512C0B515E0A26C16C06C496C13803B01FC0003F000A2000014076D5C137E150F017F5C7F151FD91F805BA214C0010F49C7FCA214E00107137EA2EB03F0157C15FCEB01F85DA2EB00F9ECFDF0147D147FA26E5AA36E5AA35DA2143F92C8FCA25C147EA2000F13FE486C5AEA3FC1EBC3F81387EB8FF0EBFFE06C5B5C6C90C9FC6C5AEA01F02B3C7EA630>I E%EndDVIPSBitmapFont%DVIPSBitmapFont: Ff cmex10 10 10/Ff 10 63 df<B612F0A600FCC8FCB3B3B3B3B3B3B3B01C94668137>50D<B612F0A6C71203B3B3B3B3B3B3B3B01C94808137>I<12FCB3B3B3B3B3B3B3B0B612F0A61C94668237>I<EC03F0B3B3B3B3B3B3B3B0B6FCA61C94808237>I<12FCB3B3B00634668037>I<12FCB3B3B006346A8037>I<EC01F01407140F143F147F903801FFC0491380491300495A495A495A495A5C495A485B5A91C7FC485AA2485AA2485AA2123F5BA2127F5BA412FF5BB3B3A71C4B607E4A>I<EAFFC0B3B3A77F127FA47F123FA27F121FA26C7EA26C7EA26C7E807E6C7F6D7E806D7E6D7E6D7E6D7E6D13806D13C09038007FF0143F140F140714011C4B60804A>58 D<EC1FF8B3B3A7143F15F0A4EC7FE0A315C014FFA2491380A215005B5C1307495A5C131F495A5C495A495A4890C7FC485A485A485A485AEA7FE0EAFF8090C8FC12FCB4FC7FEA7FE0EA1FF06C7E6C7E6C7E6C7E6C7F6D7E6D7E806D7E130F806D7E1303807F1580A26D13C0A2147F15E0A3EC3FF0A415F8141FB3B3A71D9773804A>60D<EAFFC0B3A90A1B60804A>62 D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fg cmr5 5 1/Fg 1 57 df<EA01FC3807FF80381E03C0383800E0003013701270A21278127E007F13E0383FC1C0381FF780380FFE00EA03FF481380380F7FE0EA3C1F387807F0387001F8EAE00014781438A21430007013706C13E0381E03C0380FFF00EA01FC151D7D9B1C>56D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fh cmti10 10 27/Fh 27 122 df<387FFFF8A2B5FCA214F0150579941E>45 D<0103B612FEEFFFC018F0903B0007F8000FF84BEB03FCEF00FE020F157FF03F804B141F19C0021F150F19E05D1807143F19F05DA2147FA292C8FCA25C180F5CA2130119E04A151FA2130319C04A153FA201071780187F4A1600A2010F16FEA24A4A5A60011F15034D5A4A5D4D5A013F4B5A173F4A4AC7FC17FC017FEC03F84C5A91C7EA1FC04949B45A007F90B548C8FCB712F016803C397CB83F>68 D<0107B8FCA3903A000FF000034BEB007F183E141F181E5DA2143FA25D181C147FA29238000380A24A130718004A91C7FC5E13015E4A133E167E49B512FEA25EECF8000107147C163C4A1338A2010F147818E04A13701701011F16C016004A14031880013F150718004A5CA2017F151E173E91C8123C177C4915FC4C5A4914070001ED7FF0B8FCA25F38397BB838>I<0103B612F017FEEFFF80903B0007F8003FC04BEB0FF01707020FEC03F8EF01FC5DA2021F15FEA25DA2143FEF03FC5DA2027FEC07F818F092C7120F18E04AEC1FC0EF3F004A14FEEE01F80101EC0FE091B6128004FCC7FC9138FC003F0103EC0F80834A6D7E8301071403A25C83010F14075F5CA2011F140FA25CA2133F161F4AECE007A2017F160F180E91C7FC49020F131C007F01FE153CB5913807F078040313F0CAEAFFE0EF3F80383B7CB83D>82D<92383FC00E913901FFF01C020713FC91391FC07E3C91393F001F7C027CEB0FF84A130749481303495A4948EB01F0A2495AA2011F15E091C7FCA34915C0A36E90C7FCA2806D7E14FCECFF806D13F015FE6D6D7E6D14E0010080023F7F14079138007FFC150F15031501A21500A2167C120EA3001E15FC5EA3003E4A5AA24B5AA2007F4A5A4B5A6D49C7FC6D133ED8F9F013FC39F8FC03F839F07FFFE0D8E01F138026C003FCC8FC2F3D7ABA2F>I<0007B812E0A25AD9F800EB001F01C049EB07C0485AD900011403121E001C5C003C17801403123800785C00701607140700F01700485CA2140FC792C7FC5DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25CA21301A25CA21303A25CA21307A25CA2130FA25CEB3FF0007FB512F8B6FCA2333971B83B>I<14F8EB07FE90381F871C90383E03FE137CEBF801120148486C5A485A120FEBC001001F5CA2EA3F801403007F5C1300A21407485C5AA2140F5D48ECC1C0A2141F15831680143F1587007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F0222677A42A>97 D<133FEA1FFFA3C67E137EA313FE5BA312015BA312035BA31207EBE0F8EBE7FE9038EF0F80390FFC07C013F89038F003E013E0D81FC013F0A21380A2123F1300A214075A127EA2140F12FE4814E0A2141F15C05AEC3F80A215005C147E5C387801F8007C5B383C03E0383E07C0381E1F80D80FFEC7FCEA01F01C3B77B926>I<147F903803FFC090380FC1E090381F0070017E13784913383901F801F83803F003120713E0120FD81FC013F091C7FC485AA2127F90C8FCA35A5AA45AA3153015381578007C14F0007EEB01E0003EEB03C0EC0F806CEB3E00380F81F83803FFE0C690C7FC1D2677A426>I<ED01F815FFA3150316F0A21507A216E0A2150FA216C0A2151FA21680A2153FA202F81300EB07FE90381F877F90383E03FF017C5BEBF80112013803F00048485B120FEBC001121F5DEA3F801403127F01005BA214075A485CA2140FA248ECC1C0A2141F15C3ED8380143F1587007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F0253B77B92A>I<147F903803FFC090380FC1E090383F00F0017E13785B485A485A485A120F4913F8001F14F0383F8001EC07E0EC1F80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA21530007C14381578007E14F0003EEB01E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690C7FC1D2677A426>I<ED07C0ED1FF0ED3E38ED7C3CEDF8FC15F9140115F1020313F8EDF0F0160014075DA4140F5DA4141F5D010FB512C05B16809039003F800092C7FCA45C147EA414FE5CA413015CA413035CA413075CA4130F5CA3131F5CA391C8FC5B121CEA7E3EA2EAFE3C137C1378EAF8F01278EA3FC0EA0F80264C82BA19>I<EC07C0EC3FF09138FC38E0903901F01FF0EB03E0903807C00FEB0F80011F1307D93F0013E05B017E130F13FE4914C01201151F1203491480A2153F1207491400A25DA249137EA215FEA25D00031301140314076C6C485A0000131FEB787BEB3FF390380FC3F0EB00031407A25DA2140F5D121C007E131F5D00FE49C7FC147E5C387801F8387C07E0381FFF80D803FEC8FC24367CA426>I<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B90387E07F0EC1FFCEC783E9038FFE01F02C01380EC800F1400485A16C05B49EB1F8012035BA2153F000715005BA25D000F147E5B15FE5D121FD98001131C15F8163C003F01031338010013F0A216704814E0007E15F016E0EDE1C000FE903801E38048903800FF000038143C263B7BB92A>I<EB01C0EB07E014F0130F14E01307EB038090C7FCAB13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEAF07E12E013FEC65AA212015B1203A25B12075BA2000F13E013C013C1001F13C01381A2EB83801303EB0700A2130E6C5AEA07F8EA01E0143879B619>I<150E153F157FA3157E151C1500ABEC1F80EC7FC0ECF1F0EB01C090380380F813071401130F130E131EEB1C03133C013813F0A2EB0007A215E0A2140FA215C0A2141FA21580A2143FA21500A25CA2147EA214FEA25CA21301A25CA213035C121C387E07E0A238FE0FC05C49C7FCEAF83EEA787CEA3FF0EA0FC0204883B619>I<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B017EEB0F80ED3FE015F09039FE01C1F09038FC0387EC0707140E0001011C13E0EBF83891383003800270C7FC00035BEBF1C0EBF38001FFC8FCEA07FC7FEBFFC0EBE7F8380FE1FCEBC07E147F80001F809039801F81C0A21583003F013F138001001303A21507481500007E133EEC1E0E151E00FE6D5A48EB07F80038EB01E0243B7BB926>I<EB0FC0EA07FFA3EA001F1480A2133FA21400A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA2123FA290C7FCA25AA2EA7E0EA212FE131EEAFC1CA2133C133812F81378EA7870EA7CE0121FEA0F80123B79B915>I<D801E013FE3A07F803FF803A0E3C0F07C03A1E3E3C03E0261C1F787F39383FF00114E0007813C000708114804A485AEAF07FEAE07EA20000140701FE5C5BA2150F00015D5B151F5E12034990383F8380160316070007027F130049137EA2160E000F147C49141E161C5E001FEC3C7849EB1FE00007C7EA0780292679A42F>110D<147F903803FFC090380FC1F090381F00F8017E137C5B4848137E4848133E0007143F5B120F485AA2485A157F127F90C7FCA215FF5A4814FEA2140115FC5AEC03F8A2EC07F015E0140F007C14C0007EEB1F80003EEB3F00147E6C13F8380F83F03803FFC0C648C7FC202677A42A>I<9039078007C090391FE03FF090393CF0787C903938F8E03E9038787FC00170497EECFF00D9F0FE148013E05CEA01E113C15CA2D80003143FA25CA20107147FA24A1400A2010F5C5E5C4B5A131F5EEC80035E013F495A6E485A5E6E48C7FC017F133EEC70FC90387E3FF0EC0F8001FEC9FCA25BA21201A25BA21203A25B1207B512C0A3293580A42A>I<3903C003F0390FF01FFC391E783C0F381C7C703A3C3EE03F8038383FC0EB7F800078150000701300151CD8F07E90C7FCEAE0FE5BA2120012015BA312035BA312075BA3120F5BA3121F5BA3123F90C9FC120E212679A423>114 D<14FE903807FF8090380F83C090383E00E04913F00178137001F813F00001130313F0A215E00003EB01C06DC7FC7FEBFFC06C13F814FE6C7F6D13807F010F13C01300143F141F140F123E127E00FE1480A348EB1F0012E06C133E00705B6C5B381E03E06CB45AD801FEC7FC1C267AA422>I<EB0380EB07C0130FA4131F1480A3133F1400A35B137E007FB5FCA2B6FC3800FC00A312015BA312035BA312075BA3120F5BA3121FEB801CA2143C003F1338EB0078147014F014E0EB01C0EA3E03381F0780380F0F00EA07FCEA01F0183579B31C>I<13F8D803FEEB01C0D8078FEB03E0390E0F8007121E121C0038140F131F007815C01270013F131F00F0130000E015805BD8007E133FA201FE14005B5D120149137EA215FE120349EBFC0EA20201131E161C15F813E0163CD9F003133814070001ECF07091381EF8F03A00F83C78E090393FF03FC090390FC00F00272679A42D>I<903907E007C090391FF81FF89039787C383C9038F03E703A01E01EE0FE3803C01F018013C0D8070014FC481480000E1570023F1300001E91C7FC121CA2C75AA2147EA214FEA25CA21301A24A1370A2010314F016E0001C5B007E1401010714C000FEEC0380010F1307010EEB0F0039781CF81E9038387C3C393FF03FF03907C00FC027267CA427>120D<13F0D803FCEB01C0D8071EEB03E0D80E1F1307121C123C0038140F4914C01270A249131FD8F07E148012E013FEC648133F160012015B5D0003147E5BA215FE00075C5BA214015DA314035D14070003130FEBF01F3901F87FE038007FF7EB1FC7EB000F5DA2141F003F5C48133F92C7FC147E147C007E13FC387001F8EB03E06C485A383C1F80D80FFEC8FCEA03F0233679A428>I E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fi cmtt10 10 42/Fi 42 122 df<007FB6FCB71280A46C150021067B9B2C>45 D<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B0B708A2C>I<1507ED0F80151FA2153F16005D157E15FE5D14015D14035DA214075D140F5D141F5D143F92C7FC5C147E14FE5CA213015C13035C13075C130F5C131F5CA2133F91C8FC5B137E13FE5B12015B12035B12075BA2120F5B121F5B123F90C9FC5A127E12FE5AA25A127821417BB92C>I<EB03F8EB0FFE90383FFF80497F90B57E3901FE0FF03903F803F848486C7EEBE0004848137EA248487FA248C7EA1F80A2003E140F007E15C0A3007C140700FC15E0AC6C140F007E15C0A46CEC1F80A36C6CEB3F00A26C6C137E6D13FE00075CEBF0016C6C485A3901FE0FF06CB55A6D5B6D5BD90FFEC7FCEB03F823357CB32C>I<1307497EA2131FA2133F137F13FF5A1207127FB5FC13DF139FEA7C1F1200B3AE007FB512E0B612F0A36C14E01C3477B32C>I<EC07F04A7E141F143FA2147EA214FCEB01F8A2EB03F0EB07E0A2EB0FC0EB1F80A2EB3F00137EA25B485AA2485A5B1207485AA2485A48C7FCA2127E5AB712FC16FEA36C15FCC8EAF800AA91387FFFF091B512F8A36E13F027347EB32C>52 D<EB07FC90383FFF8090B512E0000314F84880390FFC07FE391FF001FF9038C0007F4848EB3F8090C7121F4815C0007E140FA56CEC1F80A26C6CEB3F006D5B390FF001FE3903FC07F86CB55A6C6C13C0D907FCC7FC90387FFFC048B512F03903FC07F8390FF001FE391FC0007F497F48C7EA1F80007EEC0FC0A248EC07E0A7007EEC0FC0A2007F141F6C6CEB3F806C6CEB7F009038F001FF390FFC07FE6CB55A6C5CC614E0013F1380D907FCC7FC23357CB32C>56 D<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F00C7FCAE121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B2470A32C>58 D<14FE497EA4497FA214EFA2130781A214C7A2010F7FA314C390381F83F0A590383F01F8A490387E00FCA549137E90B512FEA34880A29038F8003FA34848EB1F80A4000715C049130FD87FFEEBFFFC6D5AB514FE6C15FC497E27347EB32C>65 D<007FB512E015F8B612FE6C8016C03903F0003FED0FE0ED07F01503A2ED01F8A6ED03F0A21507ED0FE0ED1FC0EDFF8090B612005D5D15FF16C09039F0001FE0ED07F0ED03F81501ED00FCA216FE167EA616FE16FC1501ED03F8150FED3FF0007FB612E016C0B712806CECFE0015F027337FB22C>I<02FF13700107EBE0F84913F9013F13FD4913FFEBFF813901FE007F4848131FD807F0130F1507485A491303485A150148C7FCA25A007EEC00F01600A212FE5AAB7E127EA3007F15F06CEC01F8A26C7EA26C6C13036D14F06C6C130716E0D803FC131F6C6CEB3FC03A00FF81FF806DB512006D5B010F5B6D13F00100138025357DB32C>I<007FB612F0B712F8A37E3903F00001A7ED00F01600A4EC01E04A7EA490B5FCA5EBF003A46E5A91C8FCA5163C167EA8007FB612FEB7FCA36C15FC27337EB22C>69 D<D87FFCEB7FF8486CEBFFFCA36C48EB7FF8D807C0EB1F80153FED7F00157E5D4A5A14034A5A5D4A5A4A5A143F4AC7FC147E5CEBC1F813C3EBC7FCA2EBCFFEEBDFBEEBFFBF141F01FE7F496C7E13F86E7EEBF00301E07FEBC001816E7EA2157E153E153F811680ED0FC0A2ED07E0D87FFCEB1FFC486CEB3FFEA36C48EB1FFC27337EB22C>75D<D87FE0EB0FFC486CEB1FFEA26D133F007F15FC000F15E001BC137BA4019E13F3A3EB9F01A2018F13E3A21483A2018713C314C7A201831383A214EFA201811303A214FFEB80FEA3147C14381400ACD87FF0EB1FFC486CEB3FFEA36C48EB1FFC27337EB22C>77D<D87FF0EB7FFC486CEBFFFEA27F007FEC7FFCD807FEEB07C013DEA213DF13CFA2148013C714C0A213C314E0A213C114F0A213C014F8A2147CA3143EA2141E141FA2140F1587A2140715C7A2140315E71401A215F71400A215FFD87FFC137F487E153FA26C48EB1F8027337EB22C>I<387FFFFCB67E15E015F86C803907E007FE1401EC007F6F7E151FA26F7EA64B5AA2153F4BC7FCEC01FE140790B55A5D15E081819038E007FCEC01FE1400157F81A8160FEE1F80A5D87FFEEB1FBFB5ECFF00815E6C486D5AC8EA01F029347EB22C>82D<90381FF80790B5EA0F804814CF000714FF5A381FF01F383FC003497E48C7FC007E147F00FE143F5A151FA46CEC0F00007E91C7FC127F7FEA3FE0EA1FFCEBFFC06C13FC0003EBFFC06C14F06C6C7F01077F9038007FFEEC07FF02001380153FED1FC0A2ED0FE0A20078140712FCA56CEC0FC0A26CEC1F806D133F01E0EB7F009038FE01FF90B55A5D00F914F0D8F83F13C0D8700790C7FC23357CB32C>I<D87FF0EB07FF486C491380A36C486D1300001FC8127CA46C6C5CA76C6C495AA4143E147FA33A03E0FF83E0A214F7A201E113C3A3000101E35BA201F113C701F313E7A314C1A200005DA201F713F71480A301FF13FF017F91C7FC4A7EA4013E133E29347FB22C>87 D<3801FFF0000713FE001F6D7E15E048809038C01FF81407EC01FC381F80000006C77EC8127EA3ECFFFE131F90B5FC1203120F48EB807E383FF800EA7FC090C7FC12FE5AA47E007F14FEEB8003383FE01F6CB612FC6C15FE6C14BF0001EBFE1F3A003FF007FC27247CA32C>97 D<EA7FF0487EA3127F1201AAEC1FE0ECFFF801FB13FE90B6FC16809138F07FC09138801FE091380007F049EB03F85BED01FC491300A216FE167EA816FE6D14FCA2ED01F86D13036DEB07F0150F9138801FE09138E07FC091B51280160001FB5B01F813F83900F03FC027337FB22C>I<903803FFE0011F13F8017F13FE48B5FC48804848C6FCEA0FF0485A49137E4848131890C9FC5A127EA25AA8127EA2127F6C140F6DEB1F806C7E6D133F6C6CEB7F003907FE03FF6CB55A6C5C6C6C5B011F13E0010390C7FC21247AA32C>I<EC0FFE4A7EA380EC003FAAEB07F8EB3FFE90B512BF4814FF5A3807FC0F380FF00348487E497E48487F90C7FC007E80A212FE5AA87E007E5CA2007F5C6C7E5C6C6C5A380FF0073807FC1F6CB612FC6CECBFFE6C143FEB3FFC90390FF01FFC27337DB22C>I<EB03FE90381FFFC0017F13F048B57E48803907FE03FE390FF800FFD81FE0EB3F805B4848EB1FC090C7120F5A007E15E015075AB7FCA416C000FCC9FC7E127EA2127F6CEC03C06DEB07E06C7ED80FF0130F6C6CEB3FC001FF13FF000190B512806C1500013F13FC010F13F00101138023247CA32C>I<EC0FF8EC3FFE91B5FC4914805B903807FC7F14F090390FE03F0014C092C7FCA6007FB512FEB7FCA36C5C26000FC0C7FCB3A8003FB512F04880A36C5C21337DB22C>I<ED03F8903907F80FFC90391FFE3FFE017FB6FC48B7FC48ECFE7F9038FC0FF82607F003133E3A0FE001FC1CD9C0001300001F8049137EA66D13FE000F5CEBE0016C6C485A3903FC0FF048B5FC5D481480D99FFEC7FCEB87F80180C8FCA37F6C7E90B512F06C14FE48ECFF804815E04815F03A3FC0001FF848C7EA03FC007E1400007C157C00FC157E48153EA46C157E007E15FCD87F801303D83FE0EB0FF8D81FFCEB7FF06CB612E0000315806C1500D8003F13F8010713C028387EA42C>I<EA7FF0487EA3127F1201AAEC1FE0EC7FFC9038F9FFFE01FB7F90B6FC9138F03F80ECC01F02807FEC000F5B5BA25BB3267FFFE0B5FCB500F11480A36C01E0140029337FB22C>I<1307EB1FC0A2497EA36D5AA20107C7FC90C8FCA7387FFFC080B5FC7EA2EA0007B3A8007FB512FCB612FEA36C14FC1F3479B32C>I<140EEC3F80A2EC7FC0A3EC3F80A2EC0E0091C7FCA748B512804814C0A37EC7120FB3B3A2141F003C1480007E133FB414005CEB01FEEBFFFC6C5B5C001F5B000790C7FC1A467CB32C>I<EA7FE0487EA3127F1201AA91381FFFF04A13F8A36E13F0913800FE004A5A4A5A4A5A4A5A4A5A4A5A4AC7FC14FEEBF1FC13F3EBF7FE90B5FCA2EC9F80EC0FC001FE7FEBFC07496C7E496C7E811400157E811680151F3A7FFFC0FFFCB500E113FEA36C01C013FC27337EB22C>I<387FFFE0B57EA37EEA0003B3B3A5007FB61280B712C0A36C158022337BB22C>I<3A7F83F007E09039CFFC1FF83AFFDFFE3FFCD87FFF13FF91B57E3A07FE1FFC3E01FCEBF83F496C487E01F013E001E013C0A301C01380B33B7FFC3FF87FF0027F13FFD8FFFE6D13F8D87FFC4913F0023F137F2D2481A32C>I<397FF01FE039FFF87FFC9038F9FFFE01FB7F6CB6FC00019038F03F80ECC01F02807FEC000F5B5BA25BB3267FFFE0B5FCB500F11480A36C01E0140029247FA32C>I<EB07FCEB1FFF017F13C048B512F048803907FC07FC390FF001FE48486C7E0180133F003F158090C7121F007EEC0FC0A348EC07E0A76C140F007E15C0A2007F141F6C15806D133F6C6CEB7F006D5B6C6C485A3907FC07FC6CB55A6C5C6C6C13C0011F90C7FCEB07FC23247CA32C>I<397FF01FE039FFF8FFF801FB13FE90B6FC6C158000019038F07FC09138801FE091380007F049EB03F85BED01FC491300A216FE167EA816FE6D14FCA2ED01F86D13036DEB07F0150F9138801FE09138E07FC091B51280160001FB5B01F813F8EC3FC091C8FCAD387FFFE0B57EA36C5B27367FA32C>I<D87FFEEB3FC0B53801FFF0020713F8021F13FC6C5B39003F7FE1ECFF019138FC00F84A13704A13005CA25C5CA391C8FCAF007FB512E0B67EA36C5C26247EA32C>114 D<90387FF8700003B512F8120F5A5A387FC00F387E00034813015AA36CEB00F0007F140013F0383FFFC06C13FE6CEBFF80000314E0C66C13F8010113FCEB0007EC00FE0078147F00FC143F151F7EA26C143F6D133E6D13FE9038F007FC90B5FC15F815E000F8148039701FFC0020247AA32C>I<131E133FA9007FB6FCB71280A36C1500D8003FC8FCB1ED03C0ED07E0A5EC800F011FEB1FC0ECE07F6DB51280160001035B6D13F89038003FE0232E7EAD2C>I<3A7FF003FF80486C487FA3007F7F0001EB000FB3A3151FA2153F6D137F3900FE03FF90B7FC6D15807F6D13CF902603FE07130029247FA32C>I<3A7FFF01FFFCB514FE148314016C15FC3A03E0000F80A26D131F00011500A26D5B0000143EA26D137E017C137CA2017E13FC013E5BA2EB3F01011F5BA21483010F5BA214C701075BA214EF01035BA214FF6D90C7FCA26D5A147C27247EA32C>I<D87FFFEB7FFF6EB5FCB515806C16004A7ED807C0EB01F0A66C6C495AA3143E147FA2D801F0495AECFF87A214F7A201F113C700005D9038F9E3CFA201FB13EFA3D97BC190C7FC017F13FFA21480A2013F5B90381F007C29247FA32C>I<3A3FFF03FFF048018713F8A36C010313F03A00FC007E005D90387E01F8013F5BEB1F83EC87E090380FCFC0903807EF80EB03FF6D90C7FC5C6D5A147C14FE130180903803EF80903807CFC0EB0FC7EC83E090381F01F0013F7FEB7E00017C137C49137E0001803A7FFF01FFFC1483B514FE6C15FC140127247EA32C>I<3A7FFF01FFFCB5008113FE148314816C010113FC3A03E0000F806C7E151F6D140012005D6D133E137C017E137E013E137CA2013F13FC6D5BA2EB0F815DA2EB07C1ECC3E0A2EB03E3ECE7C0130114F75DEB00FFA292C7FC80A2143EA2147E147CA214FC5CA2EA0C01003F5BEA7F83EB87E0EA7E0F495A387FFF806C90C8FC6C5A6C5AEA07E027367EA32C>I E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fj cmbx10 10.95 33/Fj 33 122 df<B612E0A91B097F9823>45 D<EA0FC0EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA0FC00E0E798D1D>I<140F143F5C495A130F48B5FCB6FCA313F7EAFE071200B3B3A8B712F0A5243C78BB34>49 D<903803FF80013F13F890B512FE00036E7E4881260FF80F7F261FC0037F4848C67F486C6D7E6D6D7E487E6D6D7EA26F1380A46C5A6C5A6C5A0007C7FCC8FC4B1300A25E153F5E4B5AA24B5A5E4A5B4A5B4A48C7FC5D4A5AEC1FE04A5A4A5A9139FF000F80EB01FC495A4948EB1F00495AEB1F8049C7FC017E5C5B48B7FC485D5A5A5A5A5AB7FC5EA4293C7BBB34>I<903801FFE0010F13FE013F6D7E90B612E04801817F3A03FC007FF8D807F06D7E82D80FFC131F6D80121F7FA56C5A5E6C48133FD801F05CC8FC4B5A5E4B5A4A5B020F5B902607FFFEC7FC15F815FEEDFFC0D9000113F06E6C7E6F7E6F7E6F7E1780A26F13C0A217E0EA0FC0487E487E487E487EA317C0A25D491580127F49491300D83FC0495A6C6C495A3A0FFE01FFF86CB65A6C5DC61580013F49C7FC010313E02B3D7CBB34>I<ED01F815031507A2150F151F153FA2157F15FF5C5CA25C5CEC1FBFEC3F3F143E147C14FCEB01F814F0EB03E01307EB0FC0EB1F801400133E137E5B485A5B485A1207485A5B48C7FC5A127E5AB812F8A5C8387FF800AA49B612F8A52D3C7DBB34>I<922607FFC0130E92B500FC131E020702FF133E023FEDC07E91B7EAE1FE01039138803FFB499039F80003FF4901C01300013F90C8127F4948151FD9FFF8150F48491507485B4A1503481701485B18004890CAFC197E5A5B193E127FA349170012FFAC127F7F193EA2123FA27F6C187E197C6C7F19FC6C6D16F86C6D150119F06C6D15036C6DED07E0D97FFEED0FC06D6CED3F80010F01C0ECFF006D01F8EB03FE6D9039FF801FFC010091B55A023F15E002071580020002FCC7FC030713C03F407ABE4C>67 D<BAFCA4198026003FFEC7123F1707170183183FA2181FF00FC0A31807EE07C0A3F003E0A3160F95C7FC161F163F16FF91B6FCA54AC6FC163F161F040F147CA2160719F8A593C71201A219F01803A21807A2180FF01FE0183F18FF1703173FBAFCA219C0A33E3D7DBC45>69 D<B71280A526003FFEC7FCB3B3B0B71280A5213E7DBD28>73 D<B76C90B6FCA526003FFEC8D801FCC7FCF007F84E5A4E5AF03F804EC8FC18FEEF03FC4D5A4D5AEF1FC04D5A4DC9FCEE01FE4C5A4C5AEE0FE04C5A4C5A16FF4B7F4B7F5D4B7F4B7F037F7F92B5FC6E486C7E9238F83FFF03F0804B7E4B6C7F4B6C7F0300804A7F707F707F84717E83717F85717F83717F85717F83727E85727F84B7D88007B612C0A54A3E7DBD52>75 D<903A03FFC001C0011FEBF803017FEBFE0748B6128F4815DF48010013FFD80FF8130F48481303497F4848EB007F127F49143F161F12FF160FA27F1607A27F7F01FC91C7FCEBFF806C13F8ECFFC06C14FCEDFF806C15E016F86C816C816C816C16806C6C15C07F010715E0EB007F020714F0EC003F1503030013F8167F163F127800F8151FA2160FA27EA217F07E161F6C16E06D143F01E015C001F8EC7F8001FEEB01FF9026FFE00713004890B55A486C14F8D8F81F5CD8F00314C027E0003FFEC7FC2D407ABE3A>83 D<003FB912FCA5903BFE003FFE003FD87FF0EE0FFE01C0160349160190C71500197E127EA2007C183EA400FC183F48181FA5C81600B3AF010FB712F8A5403D7CBC49>I<903807FFC0013F13F848B6FC48812607FE037F260FF8007F6DEB3FF0486C806F7EA36F7EA26C5A6C5AEA01E0C8FC153F91B5FC130F137F3901FFFE0F4813E0000F1380381FFE00485A5B485A12FF5BA4151F7F007F143F6D90387BFF806C6C01FB13FE391FFF07F36CEBFFE100031480C6EC003FD91FF890C7FC2F2B7DA933>97 D<EC7FF00107B5FC011F14C0017F14E09039FFF01FF0489038800FF848EB001F4848EB3FFC120F485AA2485AA2007FEC1FF849EB0FF0ED03C000FF91C7FCAB127F7FA3003F153E7F001F157E6C6C147C6C6C14FC91388001F86C9038C003F0C69038F81FE06DB512C0011F14800107EBFE009038007FF0272B7DA92E>99 D<EE07F8ED07FFA5ED003F161FAFEC7FF0903807FFFE011FEBFF9F017F14DF9039FFF01FFF48EBC00348EB00014848EB007F485A001F153F5B123FA2127F5BA212FFAA127FA37F123FA26C6C147F120F6D14FF6C6C01037F6C6D48EBFFE06CEBF03F6C6CB512BF6D143F010713FC010001E0EBE00033407DBE3A>I<ECFFF0010713FE011F6D7E017F809039FFE07FE0489038801FF048496C7E48486D7E48486D7E121F491301003F81A2485A6F1380A212FFA290B7FCA401F0C9FCA5127FA27F123FEE0F806C7E161F6C6C15006C6C5C6C6D137E6C9038E001FC6C9038F80FF8013FB55A6D14C0010391C7FC9038007FF8292B7DA930>I<EC07FE91387FFF8049B512C0010714E090390FFE3FF0EB1FF090393FE07FF8EB7FC013FF1480A2489038003FF0ED1FE0ED0FC092C7FCAAB612E0A500010180C7FCB3AC007FEBFF80A525407DBF20>I<903A03FF8007F0013F9038F83FF8499038FCFFFC48B712FE48018313F93A07FC007FC34848EB3FE1001FEDF1FC4990381FF0F81700003F81A7001F5DA26D133F000F5D6C6C495A3A03FF83FF8091B5C7FC4814FC01BF5BD80F03138090CAFCA2487EA27F13F06CB6FC16F016FC6C15FF17806C16C06C16E01207001F16F0393FE000034848EB003F49EC1FF800FF150F90C81207A56C6CEC0FF06D141F003F16E001F0147FD81FFC903801FFC02707FF800F13006C90B55AC615F8013F14E0010101FCC7FC2F3D7DA834>I<13FFB5FCA512077EAFED1FF8EDFFFE02036D7E4A80DA0FE07F91381F007F023C805C4A6D7E5CA25CA35CB3A4B5D8FE0FB512E0A5333F7CBE3A>I<EA01F8487E487E487E481380A66C13006C5A6C5A6C5AC8FCA913FFB5FCA512077EB3ABB512F8A515407CBF1D>I<13FFB5FCA512077EB3B3AFB512FCA5163F7CBE1D>108D<01FFD91FF8ECFFC0B590B5010713F80203DAC01F13FE4A6E487FDA0FE09026F07F077F91261F003FEBF8010007013EDAF9F0806C0178ECFBC04A6DB4486C7FA24A92C7FC4A5CA34A5CB3A4B5D8FE07B5D8F03FEBFF80A551297CA858>I<01FFEB1FF8B5EBFFFE02036D7E4A80DA0FE07F91381F007F0007013C806C5B4A6D7E5CA25CA35CB3A4B5D8FE0FB512E0A533297CA83A>I<EC7FF0903803FFFE011FEBFFC0017F14F09039FFE03FF8489038800FFC3A03FE0003FE48486D7E000F168048486D13C0A2003F16E049147F007F16F0A400FF16F8AA007F16F0A46C6CECFFE0A2001F16C06C6C491380A26C6C4913003A03FF800FFE6C9038E03FFC6C6CB512F0011F14C0010791C7FC9038007FF02D2B7DA934>I<01FFEBFFE0B5000713FC021FEBFF80027F80DAFF8113F09139FC007FF8000701F06D7E6C496D7E4A130F4A6D7E1880A27013C0A38218E0AA4C13C0A318805E18005E6E5C6E495A6E495A02FCEBFFF0DAFF035B92B55A029F91C7FC028713FC028113C00280C9FCACB512FEA5333B7DA83A>I<DA7FE01378902607FFFC13F8011FEBFF01017F14819039FFF81FC3489038E007E74890388003F74890380001FF48487F001F157F5B003F153F5B127F161FA2485AAA127F7FA36C6C143F167F121F6C6C14FF6D5B6C6D5A6CEBC00F6CEBF03F6C6CB512BF6DEBFE3F010713F8010013C091C7FCAC030FB512E0A5333B7DA837>I<3901FE01FE00FF903807FF804A13E04A13F0EC3F1F91387C3FF8000713F8000313F0EBFFE0A29138C01FF0ED0FE091388007C092C7FCA391C8FCB3A2B6FCA525297DA82B>I<90383FFC1E48B512BE000714FE5A381FF00F383F800148C7FC007E147EA200FE143EA27E7F6D90C7FC13F8EBFFE06C13FF15C06C14F06C806C806C806C80C61580131F1300020713C014000078147F00F8143F151F7EA27E16806C143F6D140001E013FF9038F803FE90B55A15F0D8F87F13C026E00FFEC7FC222B7DA929>I<EB07C0A5130FA4131FA3133F137FA213FF5A1207001FEBFFFEB6FCA40001EBC000B3151FA96CEBE03EA2017F137EECF8FC90383FFFF86D13F0010713E001001380203B7EB929>I<D9FF80EB0FF8B5EB0FFFA50007EC007F6C153FB3A5167FA316FF6C5C4B7F6C903AC007DFFFE09138F01F9F6DB5121F6D13FE010F13F8010101E0EBE000332A7CA83A>I<B500FC90383FFFC0A5000101C0903803E0006E1307A26C5E6E130F017F5D6E131F013F92C7FC6E5B011F143E6E137E010F147C6E13FCA26D5C15816D5C15C36D5C15E76D5C15FF6E5BA36E90C8FCA26E5AA26E5AA26E5AA26E5AA232287EA737>I<B5D8FC03B51280A5C69026E0007FC7FC6E13FE6D6C5B6D6C485A6D6C485A010F13076D6C485AED9FC06DEBFF806D91C8FC6D5B6E5AA2143F6E7E140F814A7F4A7F4A7F02FE7F903801FC7F49486C7E02F07F49486C7E49486C7E011F7F49486C7FD97F008001FE6D7FB5D8C007EBFFC0A532287EA737>120 D<B500FC90383FFFC0A5000101C0903803E0006E1307A26C5E6E130F017F5D6E131F013F92C7FC6E5B011F143E6E137E010F147C6E13FCA26D5C15816D5C15C36D5C15E76D5C15FF6E5BA36E90C8FCA26E5AA26E5AA26E5AA26E5AA35D14075D000E130FD83F805B387FC01FD8FFE090C9FC5C143E147E5CEBC1F8387FC3F0387E0FE06CB45A6C5B6C48CAFCEA03F8323B7EA737>I E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fk cmr7 7 9/Fk 9 57 df<EB3F803801FFF03803E0F83807803C48487E001E7F003E1480A2003C1307007C14C0A400FC14E0AE007C14C0A36CEB0F80A36CEB1F006C131E6C6C5A3803E0F86CB45A38003F801B277EA521>48 D<13381378EA01F8121F12FE12E01200B3AB487EB512F8A215267BA521>I<13FF000313E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4127CC7FC15005C143E147E147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA0180390300030012065A001FB5FC5A485BB5FCA219267DA521>I<13FF000313E0380F01F8381C007C0030137E003C133E007E133FA4123CC7123E147E147C5C495AEB07E03801FF8091C7FC380001E06D7E147C80143F801580A21238127C12FEA21500485B0078133E00705B6C5B381F01F03807FFC0C690C7FC19277DA521>I<1438A2147814F81301A2130313071306130C131C131813301370136013C012011380EA03005A120E120C121C5A12305A12E0B612E0A2C7EAF800A7497E90383FFFE0A21B277EA621>I<0018130C001F137CEBFFF85C5C1480D819FCC7FC0018C8FCA7137F3819FFE0381F81F0381E0078001C7F0018133EC7FC80A21580A21230127C12FCA3150012F00060133E127000305B001C5B380F03E03803FFC0C648C7FC19277DA521>I<EB0FE0EB3FF8EBF81C3801E0063803C01F48485AEA0F005A121E003E131E91C7FC5AA21304EB3FC038FCFFF038FDC078EB003CB4133E48131E141FA2481480A4127CA4003C1400123E001E131E143E6C133C6C6C5A3803C1F03801FFC06C6CC7FC19277DA521>I<1230123C003FB512E0A215C0481480A239700007000060130E140C48131C5C5CC75A5C1301495AA249C7FC5B130E131EA3133E133CA2137CA413FCA813781B287DA621>I<137F3803FFE0380781F8380E007C48131E5A801278A3127C007E131EEA3F80EBE03C6C6C5A380FFCF03807FFC06C5BC613E0487F38079FFC380F07FEEA1E0348C67E48133FEC1F8048130FA21407A315001278140E6C5B6C5B380F80F03803FFE0C66CC7FC19277DA521>I E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fl cmmi7 7 6/Fl 6 113 df<1238127C12FE12FFA2127F123B1203A31206A3120C121812381270122008127A8614>59 D<15F8141FA2EC01F0A21403A215E0A21407A215C0A2140FEB1F8F90387FCF80EBF0EF3803C03FEA0780390F001F00A2001E5B123E003C133E127C147E5A147CA214FC5AECF830A3903801F060A2EA7803010E13C0393C1CF980381FF07F3907C01E001D297CA723>100 D<130E131F5BA2133E131C90C7FCA7EA03E0487EEA0C78EA187C1230A212605B12C0A2EA01F0A3485AA2485AA2EBC180EA0F81A2381F0300A213066C5A131CEA07F06C5A11287DA617>105 D<1407EC0F80141FA21500140E91C7FCA7EB03E0EB07F8EB0C3C1318EB303E136013C0A248485AA2C7FCA25CA4495AA4495AA4495AA4495AA21238D87C1FC7FC12FC133E485AEA70F8EA7FE0EA1F80193380A61B>I<3907801FC0390FE07FF03918F0E0F83930F1807CEBFB00D860FE133C5B5B00C1147C5B1201A248485BA34A5AEA07C01660EC03E0A23A0F8007C0C0A2EDC180913803C300D81F0013C7EC01FE000EEB00F8231B7D9929>110 D<9038F007C03901FC1FF039031E78780006EBE03C90381FC01C000CEB801E14005B0018141F133E1200137E153E137CA213FC157C5B1578000114F0A2EC01E0EC03C03903FC07809038FE1F00EBE7FCEBE1F0D807E0C7FCA25BA2120FA25B121FEAFFF8A22025809922>112 D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fm msbm10 10 1/Fm 1 71 df<007FB712FEB9FC7E2703C03800130700010178EB0FC70270EB03E7EE01F7EE007F173FA2171FA2EE600F16E0A3170717001501A315031507A2151F157EEC7FFC15F015F815FCEC703E150F150715031501A31500A4166093C7FCAA147800037F007FB512F8B6FC7E30397FB82A>70 D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fn cmmi10 10 22/Fn 22 122 df<EB0380D907E01307010FEC0F80161F5CA2011F143FA24A1400A2013F5CA291C7127EA24914FEA2017E5CA201FE1301A2495CA200011403A249ECF018A2000314071738EEE030150F00071670031F1360153F6D017713E0486C9038E3E1C0903AFF03C1F380903ACFFF00FF00D9C3FC133ED81FC0C9FCA25BA2123FA290CAFCA25AA2127EA212FEA25AA212702D377EA432>22 D<121C127FEAFF80A5EA7F00121C0909798817>58D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A12600A19798817>I<EF0380EF0FC0173FEFFF80933803FE00EE0FF8EE3FE0EEFF80DB03FEC7FCED0FF8ED3FE0EDFF80DA03FEC8FCEC0FF8EC3FE0ECFF80D903FEC9FCEB0FF8EB3FE0EBFF80D803FECAFCEA0FF8EA3FE0EA7F8000FECBFCA2EA7F80EA3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0170FEF0380323279AD41>I<150C151E153EA2153C157CA2157815F8A215F01401A215E01403A215C01407A21580140FA215005CA2141E143EA2143C147CA2147814F8A25C1301A25C1303A2495AA25C130FA291C7FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B1203A25B1207A25B120FA290C8FC5AA2121E123EA2123C127CA2127812F8A25A12601F537BBD2A>I<126012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF9138007FC0ED1FF0ED07FCED01FF9238007FC0EE1FF0EE07FCEE01FF9338007F80EF1FC0A2EF7F80933801FF00EE07FCEE1FF0EE7FC04B48C7FCED07FCED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0EB7FC04848CAFCEA07FCEA3FF0EA7FC048CBFC12FC1270323279AD41>I<9339FF8001C0030F13E0037F9038F80380913A01FF807E07913A07F8000F0FDA1FE0EB079FDA3F80903803BF0002FFC76CB4FCD901FC80495A4948157E495A495A4948153E017F163C49C9FC5B1201484816385B1207485A1830121F4993C7FCA2485AA3127F5BA312FF90CCFCA41703A25F1706A26C160E170C171C5F6C7E5F001F5E6D4A5A6C6C4A5A16076C6C020EC8FC6C6C143C6C6C5C6CB4495A90393FE00FC0010FB5C9FC010313FC9038007FC03A3D7CBA3B>67 D<92391FE00380DBFFFC130002036D5A91390FE01F8F91393F0007DF027EEB01FE02F81300495A4948147E177C4948143C495AA2011F153891C8FCA3491530A28094C7FC80806D7E14FEECFFE06D13FE6DEBFFC06D14F06D806D80021F7F02037FEC003F03037F1500167F163F161FA3120C160FA2001C151F94C7FCA3003C153EA25E003E5D127E007F4A5A6D495A6DEB0FC0D8F9F0495AD8F0FE01FEC8FC39E03FFFF8010F13E0D8C00190C9FC313D7CBA33>83 D<147E903803FF8090390FC1C38090391F00EFC0017E137F49133F485A4848EB1F8012075B000F143F48481400A2485A5D007F147E90C7FCA215FE485C5AA214015D48150CA21403EDF01C16181407007C1538007E010F1330003E131F027B13706C01E113E03A0F83C0F9C03A03FF007F80D800FCEB1F0026267DA42C>97 D<133FEA1FFFA3C67E137EA313FE5BA312015BA312035BA31207EBE0FCEBE3FF9038E707C0390FFE03E09038F801F001F013F8EBE000485A15FC5BA2123F90C7FCA214015A127EA2140312FE4814F8A2140715F05AEC0FE0A215C0EC1F80143F00781400007C137E5C383C01F86C485A380F07C06CB4C7FCEA01FC1E3B7CB924>I<EC3FC0903801FFF0903807E03C90380F800E90383F0007017E131F49137F484813FF485A485A120F4913FE001F143848481300A2127F90C8FCA35A5AA45AA315031507007E1406150E003E143C003F14706C14E0390F8007C03907C03F003801FFF838003FC020267DA424>I<163FED1FFFA3ED007F167EA216FEA216FCA21501A216F8A21503A216F0A21507A2027E13E0903803FF8790380FC1CF90381F00EF017EEB7FC049133F485A4848131F000715805B000F143F485A1600485A5D127F90C7127EA215FE5A485CA21401A248ECF80CA21403161CEDF0181407007C1538007E010F1330003E131F027B13706C01E113E03A0F83C0F9C03A03FF007F80D800FCEB1F00283B7DB92B>I<EC3FC0903801FFF0903807E07890381F801C90387E001E49130E485A485A1207485A49131E001F141C153C484813F8EC03E0007FEB3FC09038FFFE0014E090C8FC5A5AA7007E140315071506003E140E153C6C14706C6C13E0EC07C03903E03F003801FFF838003FC020267DA427>I<16F8ED03FEED0F8792381F0F80ED3E3F167F157CA215FC1700161C4A48C7FCA414035DA414075DA20107B512F0A39026000FE0C7FC5DA4141F5DA4143F92C8FCA45C147EA514FE5CA413015CA4495AA45C1307A25C121E123F387F8F80A200FF90C9FC131E12FEEA7C3CEA7878EA1FF0EA07C0294C7CBA29>I<14E0EB03F8A21307A314F0EB01C090C7FCAB13F8EA03FEEA070F000E1380121C121812381230EA701F1260133F00E0130012C05BEA007EA213FE5B1201A25B12035BA20007131813E01438000F133013C01470EB806014E014C01381EB838038078700EA03FEEA00F815397EB71D>105D<150FED3F80A2157FA31600151C92C7FCABEC0F80EC3FE0ECF0F0903801C0F849487E14005B130E130C131CEB1801133801305BA2EB0003A25DA21407A25DA2140FA25DA2141FA25DA2143FA292C7FCA25CA2147EA214FEA25CA21301001E5B123F387F83F0A238FF87E0495A00FE5BD87C1FC8FCEA707EEA3FF8EA0FC0214981B722>I<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B017EEB07C0ED1FF0ED783801FEEBE0F89039FC01C1FCEC0383EC07070001130ED9F81C13F891383803F091387001E0000349C7FCEBF1C0EBF38001F7C8FCEA07FEA2EBFFE0EBE7F8380FE0FEEBC07F6E7E141F001F80D9800F1330A21670003F011F136001001380A216E04815C0007E1481020F1380158300FE903807870048EB03FE0038EB00F8263B7CB92B>I<D803E0017F14FE3D07F801FFE003FFC03D0E3C0781F00F03E03D1C3E1E00F83C01F026383F38D9FC707F00304914E04A90387DC000007049EB7F8000604991C7FCA200E090C700FE1301485A017E5CA200000201140301FE5F495CA203031407000160495C180F03075D1203494A011F13601980030F023F13E00007F000C0495C1901031F023E1380000F1803494A150061033F150E001FEF1E1C4991C7EA0FF80007C7000EEC03E043267EA449>109 D<D803E0137F3A07F801FFE03A0E3C0781F03A1C3E1E00F826383F387F00305B4A137C00705B00605BA200E090C712FC485A137EA20000140101FE5C5BA2150300015D5B15075E120349010F133016C0031F13700007ED80605B17E0EE00C0000F15014915801603EE0700001FEC0F0E49EB07FC0007C7EA01F02C267EA432>I<EB01C0497E1307A4130F5CA3131F5CA3133F91C7FC007FB51280A2B6FCD8007EC7FCA313FE5BA312015BA312035BA312075BA3120FEBC006A2140E001F130CEB801C141814385C146014E0380F81C038078780D803FEC7FCEA00F819357EB31E>116 D<903907E001F090391FF807FC9039783E0E0F9039E01F1C1FD801C09038383F803A03800FF07F0100EBE0FF5A000E4A1300000C157E021F133C001C4AC7FC1218A2C7123FA292C8FCA25CA2147EA214FEA24A130CA20101141C001E1518003F5BD87F81143801835C00FF1560010714E03AFE0E7C01C0D87C1C495A2778383E0FC7FC391FF00FFC3907C003F029267EA42F>120D<13F8D803FE1470D8070F14F8000EEB8001121C121800381403003015F0EA701F1260013F130700E0010013E012C05BD8007E130F16C013FE5B151F000115805BA2153F000315005BA25D157EA315FE5D1401000113033800F80790387C1FF8EB3FF9EB0FE1EB00035DA2000E1307D83F805B007F495AA24A5A92C7FCEB003E007C5B00705B6C485A381E07C06CB4C8FCEA01FC25367EA429>I E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fo cmbx10 10 24/Fo 24 122 df<49B4FC010F13E0017F13FC9038FF83FE4848C67E4848EB7F804848EB3FC04848EB1FE0A2001F15F0A24848EB0FF8A3007F15FCA500FF15FEB3007F15FCA4003F15F8A26D131F001F15F0A2000F15E06D133F000715C06C6CEB7F806C6CEBFF003900FF83FE6DB45A011F13F0010190C7FC27387CB630>48 D<141E143E14FE1307133FB5FCA313CFEA000FB3B3A6007FB61280A4213779B630>I<EB0FFC90387FFFC048B512F0000714FC390FF03FFF261F800F1380263F000313C05AD9C00113E0486C6C13F07FA2ED7FF8A46C5A6C5A000FC7FCC8FCEDFFF0A216E05C16C04A138016004A5A5D4A5A4A5A4A5AEC7F8092C7FC14FEEB01F849481378495A495A495A013EC712F84914F05B4848130148B6FCA25A5A5A5A4815E0B7FCA425377BB630>I<ED07C0150FA2151F153F157F15FFA25C5C5C5CA2141E5C147C5C5C495A495A1307495A5C131E5B137C5B5B485A485A1207485A90C7FC121E5A127C5AB81280A4C70001EBC000AA0103B61280A429377DB630>52 D<001C15C0D81F80130701F8137F90B61280A216005D5D15F05D15804AC7FC14F090C9FCA8EB07FE90383FFFE090B512F89038FC07FC9038E003FFD98001138090C713C0120EC813E0157F16F0A216F8A21206EA3F80EA7FE012FF7FA44914F0A26C4813FF90C713E0007C15C06C5B6C491380D9C0071300390FF01FFE6CB512F8000114E06C6C1380D90FF8C7FC25387BB630>I<EB03FF011F13E0017F13F83901FF03FE4848C67E4848EB7F80484814C0001FEC3FE0123F49EB1FF0127F16F8A212FF16FCA516FEA5007F143FA3123F157F6C7E000F14FF6C6C5A3903FE03DF6CB5129F6C6C131FD91FFC13FCEB00201400A216F8D80FE0133F487E486C14F0A216E0157F16C0EDFF80495A6C4848130090388007FE390FE01FF86CB55A6C14C0C691C7FCEB1FF027387CB630>57 D<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F80C7FCABEA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D2579A41B>I<B600FC0103B512C0A426007FF8C8381FE00019804EC7FC18FEEF01F84D5A4D5A4D5AEF3F80057EC8FC5F4C5A4C5AEE0FE0EE1F804CC9FC167E5EED03F84B7E4B7E4B7E4B7F5D02F9B57EDAFBF77FDAFFE37F15C103807F4A487F4A6D7E4A133F707E707F8482707F707F8482717E717E8483717F717F858385B600FC017FEBFFE0A443397DB84B>75 D<003FB91280A4D9F800EBF003D87FC09238007FC049161F007EC7150FA2007C1707A200781703A400F818E0481701A4C892C7FCB3AE010FB7FCA43B387DB742>84 D<EB3FFE0003B512E0000F14F8391FF00FFE003FEB03FF6D6C7F6E7FA26F7EA26C5A6C5AEA0380C8FCA2EC3FFF010FB5FC137F3901FFF87F00071380380FFE00EA3FF85B485A12FF5BA415FF6D5A127F263FF00713F83B1FFC1FBFFFC0390FFFFE1F0003EBF80F39003FE0032A257DA42E>97 D<EE7F80ED7FFFA4150381AF903801FF81010F13F1013F13FD9038FFC07F0003EB001FD807FC1307000F8048487F5B123FA2485AA312FFAA127FA27F123FA26C6C5B000F5C6C6C5B6C6C4913C02701FF80FD13FE39007FFFF9011F13E1010313012F3A7DB935>100 D<903803FF80011F13F0017F13FC3901FF83FE3A03FE007F804848133F484814C0001FEC1FE05B003FEC0FF0A2485A16F8150712FFA290B6FCA301E0C8FCA4127FA36C7E1678121F6C6C14F86D14F000071403D801FFEB0FE06C9038C07FC06DB51200010F13FC010113E025257DA42C>I<EC1FF0903801FFFC010713FF90391FF87F8090383FE0FFD9FFC113C0A2481381A24813016E1380A2ED3E0092C7FCA8B6FCA4000390C8FCB3ABB512FEA4223A7DB91D>I<13FFB5FCA412077EAFED7FC0913803FFF8020F13FE91381F03FFDA3C01138014784A7E4A14C05CA25CA291C7FCB3A3B5D8FC3F13FFA4303A7DB935>104 D<EA01F0EA07FC487EA2487EA56C5AA26C5AEA01F0C8FCA913FF127FA412077EB3A9B512F8A4153B7DBA1B>I<01FED97FE0EB0FFC00FF902601FFFC90383FFF80020701FF90B512E0DA1F81903983F03FF0DA3C00903887801F000749DACF007F00034914DE6D48D97FFC6D7E4A5CA24A5CA291C75BB3A3B5D8FC1FB50083B512F0A44C257DA451>109 D<01FEEB7FC000FF903803FFF8020F13FE91381F03FFDA3C011380000713780003497E6D4814C05CA25CA291C7FCB3A3B5D8FC3F13FFA430257DA435>I<903801FFC0010F13F8017F13FFD9FF807F3A03FE003FE048486D7E48486D7E48486D7EA2003F81491303007F81A300FF1680A9007F1600A3003F5D6D1307001F5DA26C6C495A6C6C495A6C6C495A6C6C6CB45A6C6CB5C7FC011F13FC010113C029257DA430>I<9039FF01FF80B5000F13F0023F13FC9138FE07FFDAF00113800007496C13C06C0180EB7FE091C713F0EE3FF8A2EE1FFCA3EE0FFEAA17FC161FA217F8163F17F06E137F6E14E06EEBFFC0DAF00313809139FC07FE0091383FFFF8020F13E0020390C7FC91C9FCACB512FCA42F357EA435>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC000075B6C6C5A5CA29138807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>114 D<90383FF0383903FFFEF8000F13FF381FC00F383F0003007E1301007C130012FC15787E7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C14F81203C614FC131F9038007FFE140700F0130114007E157E7E157C6C14FC6C14F8EB80019038F007F090B512C000F8140038E01FF81F257DA426>I<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA3000390C7FCB21578A815F86CEB80F014816CEBC3E090383FFFC06D1380903803FE001D357EB425>I<B500F1B538803FFFA43D07FE000FF80003E06C6C010715C082028015076C6E6C148015076C01C0ED0F00826E485C017FED801E5D90273FF01E7F5B17C0DAF83E147C011F90393C3FE078037C14F8903B0FFC781FF0F0A29139FEF00FF10107EDF9E002FF14FB6D496CB45AA24B7E6D5EA26D496C90C7FCA292C7FC6E5CA2023E147C023C143C40257EA445>119 D<B539F001FFF8A4000390C7EA3F00161E6E133E6C153C6E137C6C15786E13F8017F5CECF001013F5C14F8011F495AA2ECFC07010F5CECFE0F010791C7FC6E5A6D131E15BE6D13BC15FC6D5BA36E5AA26E5AA26E5AA26E5AA292C8FCA25C141E003F133E387F803C38FFC07C147814F8EBC1F0EBC3E06C485A387D1F80D83FFFC9FCEA1FFCEA07F02D357EA432>121 D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fp cmsy10 10 14/Fp 14 104 df<007FB81280B912C0A26C17803204799641>0 D<121C127FEAFF80A5EA7F00121C0909799917>I<0060150600F8150F6C151F007E153F6C157E6C6C14FC6C6CEB01F86C6CEB03F06C6CEB07E06C6CEB0FC06C6CEB1F80017EEB3F006D137E6D6C5A90380FC1F8903807E3F0903803F7E06DB45A6D5B6EC7FCA24A7E497F903803F7E0903807E3F090380FC1F890381F80FC90383F007E017E7F49EB1F804848EB0FC04848EB07E04848EB03F04848EB01F84848EB00FC48C8127E007E153F48151F48150F00601506282874A841>I<EB0380497EA7397803803C00FC147E00FE14FE397F8383FC393FC387F8390FE38FE03903FBBF803900FFFE00EB3FF8EB0FE0A2EB3FF8EBFFFE3903FBBF80390FE38FE0393FC387F8397F8383FC39FE0380FE00FC147E0078143C390007C000A76D5A1F247BA62A>I<EC03FF023F13F09138FC30FCD903C0130FD90F00EB03C0013CEC00F001701538498148488148488148C7EC038000061601000E17C048EE00E0001817600038177000301730A20070173800601718A200E0171C48170CA4B912FCA200C0C70030C7120CA46C171C00601718A20070173800301730A20038177000181760001C17E06CEE01C000061780000716036C6CED07006C6C150E6C6C5D01705D013C15F0010FEC03C0D903C0010FC7FCD900FC13FC91383FFFF0020390C8FC36367BAF41>8 D<EB1FF0EBFFFE487F000714C04814E04814F04814F8A24814FCA3B612FEA96C14FCA36C14F8A26C14F06C14E06C14C0000114006C5BEB1FF01F1F7BA42A>15 D<EF0180EF07C0171FEF7F80933801FF00EE07FCEE1FF0EE7FC04B48C7FCED07FCED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0EB7FC04848CAFCEA07FCEA3FF0EA7FC048CBFC5AEA7F80EA3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0170FEF038094C7FCAE007FB81280B912C0A26C1780324479B441>20 D<126012F812FEEA7F80EA3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0171FEF7F80933801FF00EE07FCEE1FF0EE7FC04B48C7FCED07FCED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0EB7FC04848CAFCEA07FCEA1FF0EA7FC048CBFC12FC1270CCFCAE007FB81280B912C0A26C1780324479B441>I<D93F801508D9FFF0151C00037F4813FE487F4814C09026C07FE0143C273F000FF01438003CD907FC147848EB01FE6E6C6C13F0007091383FC00300F091391FF80FE0486EB5FC030314C06F14806F6C1300EE3FFC0040ED07F036137B9D41>24D<181EA4181F84A285180785727EA2727E727E85197E85F11F80F10FC0F107F0007FBA12FCBCFCA26C19FCCCEA07F0F10FC0F11F80F13F00197E61614E5A4E5AA24E5A61180F96C7FCA260181EA4482C7BAA53>33 D<126012F0B3B3B3B3A5B512F014F8A26C13F0155272BD25>98 D<14301478B3B3B3B3A5387FFFF8B5FCA26C13F015527FBD25>I<EC01F8140FEC3F80ECFC00495A495A495AA2130F5CB3A7131F5C133F49C7FC13FEEA03F8EA7FE048C8FCEA7FE0EA03F8EA00FE137F6D7E131F80130FB3A7801307A26D7E6D7E6D7EEC3F80EC0FF814011D537ABD2A>102 D<12FCEAFFC0EA07F0EA01FCEA007E7F80131F80130FB3A7801307806D7E6D7EEB007EEC1FF0EC07F8EC1FF0EC7E00495A495A495A5C130F5CB3A7131F5C133F91C7FC137E485AEA07F0EAFFC000FCC8FC1D537ABD2A>I E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fq cmr10 10 86/Fq 86 128 df<DA0FF813FC91397FFF07FF903B01F807DF83C0903A07E001FF0F903B1F8007FE1FE090393F000FFC137E16F85B9338F007804848010790C7FC1503ACB812F8A32801F80003F0C7FCB3AB486C497E267FFFE0B512F0A3333B7FBA30>11D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F0007017E497EA25BA2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA486C497E267FFFE0B512C0A32A3B7FBA2E>I<EC0FFC91387FFF70903901F803F0903807E00790381F800FEB3F00137EA25B150748481303ADB7FCA33901F80003B3AB486C497E267FFFE0B512C0A32A3B7FBA2E>I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83F00F903C07E001CFC00380903C1F8000FF0001C090273F0007FE130F017E4948497EA2495CA248485C03076E5A03030203C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3AA486C496C497E267FFFE0B500C1B51280A3413B7FBA45>I<001C131C007F137F39FF80FF80A26D13C0A3007F137F001C131C00001300A40001130101801380A20003130301001300485B00061306000E130E485B485B485B006013601A197DB92A>34 D<017C166048B416F02607C3801401260F81C01403D900E04A5A001E01784A5A003E6D141F003C013FEC7F80007C90271BE003FFC7FC0218B512BF007891381FFC3E00F8011CC75A020C14FC5F4C5A16035F4C5A160F5F4CC8FC021C5B00780118133E007C5D16FC003C01385B003E90383001F0001EEB70036C01E05B903981C007C03907C3800F2601FF005BD8007C49C9FC90C748EB07C0033EEB1FF04BEB3C3803FCEBF81C4B497E913A01F001E00602030103130703E0497E912607C0071480020F15011580DA1F00018013C04A010F1300143E5C14FC5C495A13035C495A130F4A0107130149C701C013805B013E1603490203140001FC6F5A49020113064848913800F00E0003705A49ED3C3849ED1FF06C48ED07C03A437BBD45>37 D<141FEC7FC0903801F0E0903803C0600107137090380F803090381F00381518A25BA2133E133F15381530A215705D5D140190381F838092CAFC1487148E02DC49B51280EB0FF85C4A9039003FF8000107ED0FC06E5D71C7FC6E140E010F150CD91DFC141C01391518D970FE143801E015302601C07F1470D803805D00076D6C5BD80F00EBC00148011F5C4890380FE003003E6E48C8FC007E903807F8060203130E00FE6E5A6E6C5A1400ED7F706C4B13036F5A6F7E6C6C6D6C5B7013066C6C496C130E6DD979FE5B281FF001F07F133C3C07F80FE03FC0F86CB539800FFFF0C69026FE000313C0D91FF0D9007FC7FC393E7DBB41>I<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A12600A1979B917>I<146014E0EB01C0EB0380EB0700130E131E5B5BA25B485AA2485AA212075B120F90C7FCA25A121EA2123EA35AA65AB2127CA67EA3121EA2121F7EA27F12077F1203A26C7EA26C7E1378A27F7F130E7FEB0380EB01C0EB00E01460135278BD20>I<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2137C133C133E131EA2131F7FA21480A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B131EA2133E133C137C1378A25BA2485A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20>I<15301578B3A6007FB812F8B912FCA26C17F8C80078C8FCB3A6153036367BAF41>43D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A12600A19798817>I<B512FCA516057F941C>I<121C127FEAFF80A5EA7F00121C0909798817>I<150C151E153EA2153C157CA2157815F8A215F01401A215E01403A215C01407A21580140FA215005CA2141E143EA2143C147CA2147814F8A25C1301A25C1303A2495AA25C130FA291C7FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B1203A25B1207A25B120FA290C8FC5AA2121E123EA2123C127CA2127812F8A25A12601F537BBD2A>I<EB03F8EB1FFF90387E0FC09038F803E03901E000F0484813780007147C48487FA248C77EA2481580A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C1580A36C15006D5B000F143EA26C6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A7DB72A>I<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C3879B72A>I<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E123000706D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D140F4A5A4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B49130348481400485A485A000EC75A000FB6FC5A5A485CB6FCA321387CB72A>I<EB07F8EB3FFF4913C03901F80FF03903C007F848486C7E380E0001000F80381FE0006D7FA56C5A6C5AC85A1401A25D4A5AA24A5A5DEC0F80027EC7FCEB1FFCECFF809038000FE06E7EEC01FC816E7EED7F80A216C0A2153F16E0A2121EEA7F80487EA416C049137F007F1580007EC7FC0070ECFF006C495A121E390F8003F83907F00FF00001B512C06C6C90C7FCEB0FF8233A7DB72A>I<1538A2157815F8A2140114031407A2140F141F141B14331473146314C313011483EB030313071306130C131C131813301370136013C01201EA038013005A120E120C5A123812305A12E0B712F8A3C73803F800AB4A7E0103B512F8A325397EB82A>I<0006140CD80780133C9038F003F890B5FC5D5D158092C7FC14FC38067FE090C9FCABEB07F8EB3FFE9038780F803907E007E090388003F0496C7E12066E7EC87EA28181A21680A4123E127F487EA490C71300485C12E000605C12700030495A00385C6C1303001E495A6C6C485A3907E03F800001B5C7FC38007FFCEB1FE0213A7CB72A>I<EC3FC0903801FFF0010713FC90380FE03E90383F800790387E001F49EB3F804848137F485AA2485A000FEC3F0049131E001F91C7FCA2485AA3127F90C9FCEB01FC903807FF8039FF1E07E090383801F0496C7E01607F01E0137E497FA249148016C0151FA290C713E0A57EA56C7E16C0A2121FED3F807F000F15006C6C5B15FE6C6C5B6C6C485A3900FE07F090383FFFC06D90C7FCEB03FC233A7DB72A>I<12301238123E003FB612E0A316C05A168016000070C712060060140E5D151800E01438485C5D5DC712014A5A92C7FC5C140E140C141C5CA25CA214F0495AA21303A25C1307A2130FA3495AA3133FA5137FA96DC8FC131E233B7BB82A>I<EB03F8EB1FFF017F13C09038FC07F03901E001F848486C7E4848137C90C77E48141E000E141F001E80A3121FA27F5D01E0131E6C6C133E01FC133C6D5B6C6C6C5AECC1E06CEBF3C06C01FFC7FC6C5BEB3FFF6D13C081017F13F801F07F3903E07FFE3907801FFF48486C1380481303003E6D13C0003CEB007F007C143F0078EC0FE000F814075A1503A21501A36C15C012781503007C15806CEC07006C5C6C6C131ED807E0137C3903F803F0C6B55A013F1380D907FCC7FC233A7DB72A>I<EB03F8EB1FFF017F13C09038FC07E03903F803F048486C7E48486C7E49137E121F48487FA2007F158090C7FCA248EC1FC0A616E0A56C143FA27F123F001F147FA26C6C13FF3907E001DF0003149F3801F0033900FC0F1FD93FFC13C0EB07F090C7FC153F1680A316005D000F147E487E486C5BA24A5A4A5A49485A6C48485A001C495A260F807FC7FC3807FFFC000113F038003FC0233A7DB72A>I<121C127FEAFF80A5EA7F00121CC7FCB2121C127FEAFF80A5EA7F00121C092479A317>I<007FB812F8B912FCA26C17F8CCFCAE007FB812F8B912FCA26C17F836167B9F41>61D<EC03FF021F13E09138FC00FCD901E0131ED90780EB0780011EC7EA01E00138EC00704981498148488148488190C97E48D901FC1480000ED907FFEB01C0000C90391F03C000001C90267E00E013E000184901701360263801F86D13700030496D13300103EC0FE0267007E00107133800601718495AA200E0171C484848150CAA6C6C7E1260A26D6C151C00701718263003F0130F0101141F00386D013F1338261800FC01771330001C017E9038E3F070000C90261F03C113E0000E903A07FF00FFC06CD901FCEB3F006C90CAFC7F6C7E6C7E13706D167C011EED03FCD90780EC1FF0D901E0ECFF80D900FC90383FFC00021FB51280020301E0C7FC363C7BBA41>64 D<1538A3157CA315FEA34A7EA34A6C7EA202077FEC063FA2020E7FEC0C1FA2021C7FEC180FA202387FEC3007A202707FEC6003A202C07F1501A2D901807F81A249C77F167FA20106810107B6FCA24981010CC7121FA2496E7EA3496E7EA3496E7EA213E0707E1201486C81D80FFC02071380B56C90B512FEA3373C7DBB3E>I<B712E016FC16FF0001903980007FC06C90C7EA1FE0707E707E707EA2707EA283A75F16035F4C5A4C5A4C5A4C5AEEFF8091B500FCC7FCA291C7EA7F80EE1FE0EE07F0707E707E83707EA21880177F18C0A7188017FFA24C13005F16034C5AEE1FF8486DEB7FF0B812C094C7FC16F832397DB83B>I<913A01FF800180020FEBE003027F13F8903A01FF807E07903A03FC000F0FD90FF0EB039F4948EB01DFD93F80EB00FF49C8127F01FE153F12014848151F4848150FA248481507A2485A1703123F5B007F1601A35B00FF93C7FCAD127F6DED0180A3123F7F001F160318006C7E5F6C7E17066C6C150E6C6C5D00001618017F15386D6C5CD91FE05C6D6CEB03C0D903FCEB0F80902701FF803FC7FC9039007FFFFC020F13F002011380313D7BBA3C>I<B712C016F816FE000190398001FF806C90C7EA3FE0EE0FF0EE03F8707E707E177FA2EF3F8018C0171F18E0170F18F0A3EF07F8A418FCAC18F8A4EF0FF0A218E0A2171F18C0EF3F80A2EF7F0017FE4C5A4C5AEE0FF0EE3FE0486DEBFF80B8C7FC16F816C036397DB83F>I<B812FCA30001903880000F6C90C71201EE007E173E171E170EA31706A317078316C0A394C7FCA31501A21503150F91B5FCA3EC000F15031501A21500A21860A318E093C712C0A41701A3EF0380A21707A2170F173F177F486D903807FF00B9FCA333397DB839>I<B812F8A30001903880001F6C90C71201EE00FC177C173C171CA2170CA4170E1706A2ED0180A21700A41503A21507151F91B5FCA3EC001F15071503A21501A692C8FCAD4813C0B612C0A32F397DB836>I<DBFF8013C0020FEBF001023F13FC9139FF803F03903A03FC000787D90FF0EB03CF4948EB00EF4948147F4948143F49C8121F485A4848150F48481507A248481503A2485A1701123F5B007F1600A448481600AB93B6FCA26C7E9338007FE0EF3FC0A2123F7F121FA26C7EA26C7EA26C7E6C7E6C6C157F6D7E6D6C14FF6D6C14EFD90FF8EB03C7D903FEEB0783903A00FFC03F0191393FFFFC00020F01F0130002001380383D7CBA41>I<B648B512FEA30001902680000313006C90C76C5AB3A491B6FCA391C71201B3A6486D497EB648B512FEA337397DB83E>I<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397EB81E>I<013FB512E0A39039001FFC00EC07F8B3B3A3123FEA7F80EAFFC0A44A5A1380D87F005B0070131F6C5C6C495A6C49C7FC380781FC3801FFF038007F80233B7DB82B>I<B649B5FCA3000101809038007FF06C90C8EA3F80053EC7FC173C17385F5F4C5A4C5A4CC8FC160E5E5E5E5E4B5AED0780030EC9FC5D153E157E15FF5C4A7F4A6C7E140E4A6C7E4A6C7E14704A6C7E4A6C7E14804A6C7E6F7EA26F7F707EA2707E707EA2707EA2707E707EA2707E707F8484486D497FB6011FEBFF80A339397DB841>I<B612E0A3000101C0C8FC6C90C9FCB3AD1718A517381730A31770A317F0A216011603160FEE1FE0486D13FFB8FCA32D397DB834>I<B5933807FFF86E5DA20001F0FC002600DFC0ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC0183A3D9C0FEEC0303A2027F1406A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C13C0A3913901FC0180A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D5A487ED80FFC6D48497EB500C00203B512F8A2ED018045397DB84C>I<B5913807FFFE8080C69238007FE06EEC1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3FEEBC1FFA201C07F6E7EA26E7E6E7E81140F6E7E8114036E7E168080ED7FC016E0153FED1FF0ED0FF8A2ED07FCED03FEA2ED01FF6F1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA216071603A216011600A2177E486C153E487ED80FFC151EB500C0140EA2170637397DB83E>I<EC03FF021F13E09138FE01FC903901F8007ED907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E48486E7E49157E0003167F4848ED3F80A24848ED1FC0A2001F17E049150F003F17F0A3007F17F8491507A300FF17FCAC007F17F86D150FA3003F17F0A26C6CED1FE0A36C6CED3FC0000717806D157F000317006C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80D903F8017FC7FC903900FE01FC91381FFFE0020390C8FC363D7BBA41>I<B712C016F816FE000190398001FF806C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE1601A217FFA717FEA2EE03FCA2EE07F817F0EE0FE0EE3FC0923801FF0091B512FC16F091C9FCB3A5487FB6FCA330397DB839>I<EC03FF021F13E09138FE01FC903901F8007ED907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E48486E7EA24848157F0007178049153F000F17C049151F001F17E0A24848ED0FF0A3007F17F8A2491507A200FF17FCAC007F17F8A26D150FA2003F17F0A26C6CED1FE0A36C6CED3FC00007027C14804AB4FC3C03F80383807F003B01FC0701C0FEEC0E002600FE0CEBE1FC017FEC63F8D93F8CEB77F0D91FCCEB3FE0D907EE14806DB449C7FC0100D981FC130CEC1FFF0203131C91C7001E131C161F183CEF807CEFC0F8EE0FFFA318F08218E07013C07013809338007E00364B7BBA41>I<B612FEEDFFE016F8000190388007FE6C90C76C7EEE3FC0707E707E707EA2707EA283A65FA24C5AA24C5A4C5AEE3F8004FFC8FCED07FC91B512E05E9138000FF0ED03F8ED00FE82707E707EA2161F83A583A6F00180A217F8160F1803486D01071400B66D6C5A04011306933800FE0ECAEA3FFCEF07F0393B7DB83D>I<D90FF813C090383FFE0190B512813903F807E33907E000F74848137F4848133F48C7121F003E140F007E1407A2007C140312FC1501A36C1400A37E6D14006C7E7F13F86CB47E6C13F8ECFF806C14E06C14F86C14FEC680013F1480010714C0EB007F020713E0EC007FED3FF0151F150FED07F8A200C01403A21501A37EA216F07E15036C15E06C14076C15C06C140F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF8010F13E0D8C00190C7FC253D7CBA2E>I<003FB812E0A3D9C003EB001F273E0001FE130348EE01F00078160000701770A300601730A400E01738481718A4C71600B3B0913807FF80011FB612E0A335397DB83C>I<B6903807FFFEA3000101809038007FE06C90C8EA1F80EF0F001706B3B2170E6D150C80171C133F17186D6C14385F6D6C14F06D6C5C6D6C495A6D6CEB07806D6C49C7FC91387F807E91381FFFF8020713E09138007F80373B7DB83E>I<B500FC91387FFF80A30003018091380FFC006C90C8EA07E0715A6C705A6E1403017F93C7FCA280013F1506A26E140E011F150C80010F5DA28001075DA26E147001031560A26D6C5CA2806D4A5AA2ED8003027F91C8FCA291383FC006A215E0021F5BA2EDF01C020F1318A26E6C5AA215FC02035BA2EDFEE002015BA26E6C5AA36FC9FCA3153EA2151CA3393B7EB83E>I<B5D8FC07B5D8F001B5FCA30007902780001FFEC7EA1FF86C48C7D80FF8EC07E000010307ED03C01B807F6C6F6C1500A26E5F017F6E6C1406A280013F4A6C5CA280011F4A6D5BEE067FA26D6C010E6D5BEE0C3FA26D6C011C6D5BEE181FA26D6C6F5BEE300FA26D6C6F485AEE6007A26D6C4CC7FC9338C003FCA203805D913B7F818001FE06A203C1150EDA3FC3C7EAFF0CA203E3151CDA1FE6EC7F98A215F6DA0FFCEC3FF0A302075E4B141FA202035E4B140FA202015E4B1407A2020093C8FC4B80503B7EB855>I<007FB590383FFFFCA3C601F801071380D97FE0D903FCC7FC013FEC01F06D6C5C5F6D6C5C6D6C13034CC8FC6D6C1306160E6D6C5B6DEB8018163891387FC0306E6C5A16E06E6C5A91380FF18015FB6EB4C9FC5D14036E7EA26E7F6F7EA24B7E15DF9138019FF09138038FF8150F91380607FC91380E03FE140C4A6C7EEC38000230804A6D7E14E04A6D7E49486D7E130391C76C7E01066E7E130E010C6E7E011C1401013C8101FE822607FF80010713E0B500E0013FEBFF80A339397EB83E>I<B500FE91383FFFE0A3000301E0913807FE00C649EC03F0017F6F5A606D6C5D6D6C140395C7FC6D6C1406A26D6C5C6D6C141C17186D6C143817306D6D5B6E6C13E05F91383FE0015F91381FF003DA0FF890C8FC1606913807FC0E160C913803FE1C913801FF185E6E13B016E0157F6F5AB3A24B7E023FB512C0A33B397FB83E>I<003FB7FCA39039FC0001FE01C0130349495A003EC7FC003C4A5A5E0038141F00784A5A12704B5A5E006014FF4A90C7FCA24A5A5DC712074A5AA24A5A5D143F4A5AA24A5A92C8FC5B495AA2495A5C130F4948EB0180A2495A5C137F495A16034890C7FC5B1203485AEE0700485A495C001F5D48485C5E4848495A49130FB8FCA329397BB833>I<EAFFF8A4EAF000B3B3B3B3A3EAFFF8A40D5378BD17>I<3901800180000313033907000700000E130E485B0018131800381338003013300070137000601360A200E013E0485BA400CE13CE39FF80FF806D13C0A3007F137FA2393F803F80390E000E001A1974B92A>I<EAFFF8A4EA0078B3B3B3B3A3EAFFF8A40D537FBD17>I<EB1FE0EBFFFC3803E03F3907000F80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA31401A26C13036CEB077C903980063E18383FC01E3A0FE0781FF03A03FFF00FE03A007F8007C026277DA52A>97 D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E9039F3801F809039F7000FC001FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E167FAA167E16FEA216FC15016D14F8ED03F07F01EEEB07E001C6EB0FC09039C7801F00903881E07E903800FFF8C7EA1FC0283B7EB92E>I<EB03FC90381FFF8090387E03E03901F80070484813F83907E001FC380FC003A2EA1F80123F90380001F848EB00F01500A2127E12FEAA127E127FA26C14067F001F140E6D130C000F141C6C6C13386C6C13706C6C13E039007C07C090381FFF00EB07F81F277DA525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0007F4848133F4848131FA24848130F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F90381FFE0FD907F813C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E03903F001F0D807E013F8380FC0004848137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14037F001F14076C6C13060007140E6D131CD801F013386C6C137090387E03E090381FFF80903803FC0020277EA525>I<147E903803FF8090380FC1E0EB1F8790383F0FF0137EA213FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB487E387FFFF8A31C3B7FBA19>I<ED03F090390FF00FF890393FFC3C3C9039F81F707C3901F00FE03903E007C03A07C003E010000FECF000A248486C7EA86C6C485AA200075C6C6C485A6D485A6D48C7FC38073FFC38060FF0000EC9FCA4120FA213C06CB512C015F86C14FE6CECFF804815C03A0F80007FE048C7EA0FF0003E140348140116F8481400A56C1401007C15F06CEC03E0003F1407D80F80EB0F80D807E0EB3F003901FC01FC39007FFFF0010790C7FC26387EA52A>I<EA03F012FFA3120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039F3800FC0EBF70013FE496D7EA25BA35BB3A3486C497EB500C1B51280A3293A7EB92E>I<EA0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA312071203B3AA487EB512C0A312387EB717>I<EB01C0EB07F0EB0FF8A5EB07F0EB01C090C7FCAAEB01F813FFA313071301B3B3A2123C127E00FF13F01303A214E038FE07C0127C383C0F00EA0FFEEA03F8154984B719>I<EA03F012FFA3120F1203B1913801FFFCA39138007FC01600157C15705D4A5A4A5A4AC7FC141E1438147814FC13F1EBF3FEEBF73F01FE7FEBF81F496C7E8114076E7E6E7E811400157E157F811680ED1FC0486CEB3FF0B500C0B5FCA3283A7EB92C>I<EA03F012FFA3120F1203B3B3AD487EB512C0A3123A7EB917>I<2703F00FF0EB1FE000FFD93FFCEB7FF8913AF03F01E07E903BF1C01F83803F3D0FF3800FC7001F802603F70013CE01FE14DC49D907F8EB0FC0A2495CA3495CB3A3486C496CEB1FE0B500C1B50083B5FCA340257EA445>I<3903F00FF000FFEB3FFCECF03F9039F1C01F803A0FF3800FC03803F70013FE496D7EA25BA35BB3A3486C497EB500C1B51280A329257EA42E>I<EB03FE90380FFF8090383E03E09038F800F84848137C48487F48487F4848EB0F80001F15C090C712074815E0A2007EEC03F0A400FE15F8A9007E15F0A2007F14076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F006C6C137EC66C13F890387E03F090381FFFC0D903FEC7FC25277EA52A>I<3903F01FE000FFEB7FF89038F1E07E9039F3801F803A0FF7000FC0D803FEEB07E049EB03F04914F849130116FC150016FEA3167FAA16FEA3ED01FCA26DEB03F816F06D13076DEB0FE001F614C09039F7803F009038F1E07E9038F0FFF8EC1FC091C8FCAB487EB512C0A328357EA42E>I<D903F813C090381FFE0190387E07819038FC01C33903F000E3000714774848133749133F001F141F485A150F48C7FCA312FEAA127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF3901F801CF39007E078F90381FFE0FEB07F890C7FCABED1FE00203B5FCA328357DA42C>I<3807E01F00FFEB7FC09038E1E3E09038E387F0380FE707EA03E613EE9038EC03E09038FC0080491300A45BB3A2487EB512F0A31C257EA421>I<EBFF03000313E7380F80FF381E003F487F487F00707F12F0A2807EA27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC67F01071380EB007F141F00C0EB0FC01407A26C1303A37E15806C13077EEC0F00B4131E38F3C07C38E1FFF038C03F801A277DA521>I<1318A51338A31378A313F8120112031207001FB5FCB6FCA2D801F8C7FCB215C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01F81A347FB220>I<D803F0EB07E000FFEB01FFA3000FEB001F00031407B3A4150FA3151F12016D133F0000EC77F86D9038E7FF8090383F03C790381FFF87903A03FC07E00029267EA42E>I<B538803FFEA33A0FF8000FF06C48EB07E00003EC03C06D148000011500A26C6C1306A26D130E017E130CA26D5BA2EC8038011F1330A26D6C5AA214E001075BA2903803F180A3D901FBC7FCA214FF6D5AA2147CA31438A227257EA32C>I<B53A1FFFE03FFEA3260FF8009038000FF86C48017EEB03E018C00003023EEB0180A26C6C013FEB0300A36C6CEC8006156FA2017E9038EFC00C15C7A2D93F016D5A15830281EBF038D91F831430150102C3EBF87090260FC6001360A2D907E66D5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A7FA20100141E4A130E0260130C37257EA33C>I<B538807FFFA33A03FE003FF00001EC1F80000092C7FC017E131C6D13186D6C5AECC070010F5B6D6C5AECF180EB03FB6DB4C8FC6D5AA2147F804A7E8114CF903801C7E090380383F090380703F8EB0601496C7E011C137E49137F01787F496D7E486C80000FEC3FF0D8FFFE90B51280A329247FA32C>I<B538803FFEA33A0FF8000FF06C48EB07C00003EC03806C7E16007F00001406A2017E5BA2137F6D5BA26D6C5AA2ECC070010F1360A26D6C5AA214F101035BA2D901FBC7FCA214FF6D5AA2147CA31438A21430A214701460A25CA2EA7C0100FE5B130391C8FC1306EAFC0EEA701C6C5AEA1FF0EA0FC027357EA32C>I<003FB512FCA2EB8003D83E0013F8003CEB07F00038EB0FE012300070EB1FC0EC3F800060137F150014FE495AA2C6485A495AA2495A495A495AA290387F000613FEA2485A485A0007140E5B4848130C4848131CA24848133C48C7127C48EB03FC90B5FCA21F247EA325>I<B81280A2290280962A>I<BD12C0A25202809653>I<001C131C007F137F39FF80FF80A5397F007F00001C131C190978B72A>127D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fr cmbx12 12 39/Fr 39 122 df<B612F8A91D097F9A25>45 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003B3B3ADB712FCA5264177C038>49 D<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC0313FE3A0FE0007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F0495A495A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D138013FE001F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F1380902607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A217F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81FF0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>I<163FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E147E147C14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B48C7FC123E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<0007150301E0143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF001C1B5FC01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C0497F6C4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B007EC74813C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D013F1480010F01FCC7FC010113C02D427BC038>I<4AB47E021F13F0027F13FC49B6FC01079038807F8090390FFC001FD93FF014C04948137F4948EBFFE048495A5A1400485A120FA248486D13C0EE7F80EE1E00003F92C7FCA25B127FA2EC07FC91381FFF8000FF017F13E091B512F89039F9F01FFC9039FBC007FE9039FF8003FF17804A6C13C05B6F13E0A24915F0A317F85BA4127FA5123FA217F07F121FA2000F4A13E0A26C6C15C06D4913806C018014006C6D485A6C9038E01FFC6DB55A011F5C010714C0010191C7FC9038003FF02D427BC038>I<121E121F13FC90B712FEA45A17FC17F817F017E017C0A2481680007EC8EA3F00007C157E5E00785D15014B5A00F84A5A484A5A5E151FC848C7FC157E5DA24A5A14035D14074A5AA2141F5D143FA2147F5D14FFA25BA35B92C8FCA35BA55BAA6D5A6D5A6D5A2F447AC238>I<EE1F80A24C7EA24C7EA34C7EA24B7FA34B7FA24B7FA34B7F169F031F80161F82033F80ED3E07037E80157C8203FC804B7E02018115F0820203814B137F0207815D173F020F814B7F021F8292C77EA24A82023E80027E82027FB7FCA291B87EA2498302F0C8FCA20103834A157F0107834A153FA249488284011F8491C97E4984133E017E82B6020FB612F0A54C457CC455>65 D<DCFFF01470031F01FF14F04AB6EAE0010207EDF803023FEDFE0791B539E001FF0F4949C7EA3F9F010701F0EC0FFF4901C0804990C87E4948814948814948167F4849163F4849161F5A4A160F485B19074890CAFC19035A5BA2007F1801A34994C7FC12FFAE127F7F1AF0A2123FA27F6C18011AE06C7F19036C6D17C06E16077E6C6DEE0F806C6DEE1F006D6C5E6D6C167E6D6C6C5D6D6D4A5A6D01F0EC07F0010101FEEC1FE06D903AFFF001FF80023F90B6C7FC020715FC020115F0DA001F1480030001F8C8FC44467AC451>67D<B9FC18F018FE727E19E026003FFEC7001F13F805017F9438003FFF060F7F727F727F727F84737E737EA2737EA2737EA21B80A2851BC0A51BE0AD1BC0A51B8061A21B006162193F624F5A19FF624E5B06075B4E5B063F90C7FC4DB45A050F13F8BA5A19C04EC8FC18F095C9FC4B447CC356>I<BA12F8A485D8001F90C71201EF003F180F180318011800A2197E193EA3191EA21778A285A405F890C7FCA316011603161F92B5FCA5ED001F160316011600A2F101E01778A2F103C0A494C7FC1907A21A80A2190FA2191FA2193FF17F0061601807181F4DB5FCBBFC61A443447DC34A>I<B712E0A5D8001F90C7FCB3B3B3A4B712E0A523447DC32A>73 D<B9FC18F018FE727E19E0D8001F90C7000F7F05017F716C7E727E727E721380A21AC084A21AE0A91AC0A24E1380A21A00604E5A4E5A4D485A050F5B92B712C096C7FC18FC18C092CBFCB3A7B712E0A543447DC34D>80 D<B812F8EFFFC018F818FE727ED8001F90C7003F13E005037F05007F727E727E727EA28684A286A762A24E90C7FCA24E5A61187F943801FFF005075B053F138092B7C8FC18F818E018F892C77FEF3FFF050F7F717F717FA2717FA2717FA785A61B0F85A2187F73131F72141EB700E06DEB803E72EBE0FC72EBFFF8060114F0726C13E0CC0007138050457DC354>82 D<DAFFE0131C010701FE133C013F9038FF807C90B6EAE0FC4815F9489038801FFF3907FC00014848EB007F4848143F4848140F491407007F15035B1601160012FF177CA27FA26D153C7F7F6D92C7FC6C7EEBFFE014FE6CEBFFF015FF6C15E016FC6C816C6F7E6C826C826C6C81011F810107811300020F80140003077FED007F82040F1380828212F082A282A27EA218007EA26C5D6C5E6D14036D5D6D140701F84A5A01FFEC3FF002F8EBFFE0486CB65AD8FC1F92C7FCD8F80714FC48C614F0480107138031467AC43E>I<003FBA12E0A59026FE000FEB8003D87FE09338003FF049171F90C71607A2007E1803007C1801A300781800A400F819F8481978A5C81700B3B3A20107B8FCA545437CC24E>I<903801FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7EA26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC01000313E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013EEBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>97D<EB7FC0B5FCA512037EB1ED0FF892B57E02C314E002CF14F89139DFC03FFC9139FF000FFE02FCEB03FF4A6D13804A15C04A6D13E05CEF7FF0A218F8173FA318FCAC18F8A2177F18F0A3EFFFE06E15C06E5B6E491380027C491300496C495A903AFC1FC07FFC496CB512F0D9F00314C049C691C7FCC8EA1FF036467DC43E>I<EC3FFC49B512C0010F14F0013F14FC90397FF003FE9039FFC001FF0003495A48494813805B120F485AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C7EA3123F6DEC03C0A26C6C1407000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007FFC03F86DB55A010F14C0010391C7FC9038003FF82A2F7CAD32>I<EE03FEED07FFA5ED001F160FB1EC3FE0903803FFFC010FEBFF8F013F14CF9039FFF807FF48EBC00148903880007F4890C7123F4848141F49140F121F485AA3127F5BA212FFAC127FA37F123FA26C6C141FA26C6C143F0007157F6C6C91B5FC6CD9C00314FC6C9038F01FEF6DB5128F011FEBFE0F010713F89026007FC0EBF80036467CC43E>I<EC3FF80103B57E010F14E0013F8090397FF83FF89039FFC007FC48496C7E48496C7E48486D1380485A001FED7FC05B003FED3FE0A2127F5B17F0161F12FFA290B7FCA401F0C9FCA5127FA27FA2123F17F06C7E16016C6C15E06C6C14036C6DEB07C06C6DEB0F806C01F0EB3F0090397FFE01FE011FB55A010714F0010114C09026001FFEC7FC2C2F7DAD33>I<EDFF80020F13E0027F13F049B512F849EB8FFC90390FFE0FFE90381FFC1F14F8133FEB7FF0A2ED0FFCEBFFE0ED03F0ED00C01600ABB612F8A5C601E0C7FCB3B0007FEBFFE0A527467DC522>I<DAFFE0137E010F9039FE03FF80013FEBFF8F90B812C048D9C07F133F489038001FF84848EB0FFC4848903907FE1F80001F9238FF0F00496D90C7FCA2003F82A8001F93C7FCA26D5B000F5D6C6C495A6C6C495A6C9038C07FF04890B55A1680D8078F49C8FC018013E0000F90CAFCA47F7F7F90B612C016FC6CEDFF8017E06C826C16FC7E000382000F82D81FF0C77ED83FC014074848020113808248C9FC177FA46D15FF007F17006D5C6C6C4A5A6C6C4A5AD80FFEEC3FF83B07FFC001FFF0000190B612C06C6C92C7FC010F14F8D9007F90C8FC32427DAC38>I<EB7FC0B5FCA512037EB1ED07FE92383FFF8092B512E002C114F89139C7F03FFC9138CF801F9139DF000FFE14DE14FC4A6D7E5CA25CA35CB3A7B60083B512FEA537457CC43E>I<137C48B4FC4813804813C0A24813E0A56C13C0A26C13806C1300EA007C90C7FCAAEB7FC0EA7FFFA512037EB3AFB6FCA518467CC520>I<EB7FC0B5FCA512037EB293387FFFE0A593380FE0004C5A4CC7FC167E5EED03F8ED07E04B5A4B5A037FC8FC15FEECC1FCECC3FE14C7ECDFFF91B57E82A202F97F02E17F02C07FEC807F6F7E826F7E816F7F836F7F816F7F83707E163FB60003B512F8A535457DC43B>107 D<EB7FC0B5FCA512037EB3B3B3A3B61280A519457CC420>I<90277F8007FEEC0FFCB590263FFFC090387FFF8092B5D8F001B512E002816E4880913D87F01FFC0FE03FF8913D8FC00FFE1F801FFC0003D99F009026FF3E007F6C019E6D013C130F02BC5D02F86D496D7EA24A5D4A5DA34A5DB3A7B60081B60003B512FEA5572D7CAC5E>I<90397F8007FEB590383FFF8092B512E0028114F8913987F03FFC91388F801F000390399F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>I<EC1FFC49B512C0010714F0011F14FC90397FF80FFF9026FFC0017F48496C7F4848C7EA3FE000078248486E7E49140F001F82A2003F82491407007F82A400FF1780AA007F1700A46C6C4A5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7FC6DB55A010F14F8010114C09026001FFCC8FC312F7DAD38>I<90397FC00FF8B590B57E02C314E002CF14F89139DFC03FFC9139FF001FFE000301FCEB07FF6C496D13804A15C04A6D13E05C7013F0A2EF7FF8A4EF3FFCACEF7FF8A318F017FFA24C13E06E15C06E5B6E4913806E4913006E495A9139DFC07FFC02CFB512F002C314C002C091C7FCED1FF092C9FCADB67EA536407DAC3E>I<90387F807FB53881FFE0028313F0028F13F8ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FCA35CB3A5B612E0A5272D7DAC2E>114 D<90391FFC038090B51287000314FF120F381FF003383FC00049133F48C7121F127E00FE140FA215077EA27F01E090C7FC13FE387FFFF014FF6C14C015F06C14FC6C800003806C15806C7E010F14C0EB003F020313E0140000F0143FA26C141F150FA27EA26C15C06C141FA26DEB3F8001E0EB7F009038F803FE90B55A00FC5CD8F03F13E026E007FEC7FC232F7CAD2C>I<EB01E0A51303A41307A2130FA2131FA2133F137F13FF1203000F90B51280B7FCA4C601E0C7FCB3A3ED01E0A9150302F013C0137F150790393FF80F8090391FFC1F006DB5FC6D13FC01015B9038003FE023407EBE2C>I<D97FC049B4FCB50103B5FCA50003EC000F6C81B3A85EA25EA25E7E6E491380017FD901F713FE9138F807E76DB512C7010F1407010313FE9026007FF0EBFC00372E7CAC3E>I<B6903803FFFCA5000101E09038003E006C163C80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D5DED800F6D92C7FC15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD021F5B15FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA21578362C7EAB3B>I<B5D8FE1FB539801FFFF0A500019027C0003FE0C7EA7C007114786E17F86C6F6C5C6E1601017F6E6C5CA26E011F1403013F6F5C6E013F1407011F6F5CA26E0179140F010F048090C7FC6E01F95C6D02F0EBC01E15806D902681E07F5B18E003C3157C6D9139C03FF07815E76DDA801F5B18F803FF14F96E9039000FFDE018FF6E486D5BA36E486D5BA26E486D90C8FCA24B7F02075DA26E48147C4B143C4C2C7EAB51>I<B6903803FFFCA5000101E09038003E006C163C80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D5DED800F6D92C7FC15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD021F5B15FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA21578A215F85D14015D001F1303D83F805B387FC007D8FFE05B140F92C9FC5C143E495A387FC1F8EB07F06CB45A6C5B000790CAFCEA01FC36407EAB3B>121D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fs cmtt12 12 20/Fs 20 119 df<EA07C0EA0FF0EA1FF8123F13FCA213FEA2121F120F1207EA007E13FEA213FC1201EA03F81207EA0FF0EA7FE012FF13C013005A12780F196E8A33>44D<007FB612FEA2B8FCA36C15FEA228077BA133>I<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B0B6C8A33>I<EC07F8EC3FFF91B57E010314E0010F80498090383FFC0F90397FE003FC9038FF80014890C77ED803FC147E49EB7E7F0007903801FFBFD9F00713FF4848481480495A001F5B018013C3003FEB7F810100010013C002FE137F4849133FEA7E014A131FA212FEEAFC034A130FA96E131FD8FE011580127EA26E133FD87F0015006C6D5B027F13FE01801381001F90383FC3FC01C013FF000F6D5B6D6C5B6C6C6C5BD9F80113800003D9007EC7FC6D9038000F806CB4EC1FC06C6D133FD97FE013FF90263FFC0713806DB612006D5C010314F801005C023F1380DA07FCC7FC2A3F7CBD33>64 D<EB1FFC90B57E000314E048804814FC48809038F007FFEBE0016E7F153F6C48806C48131FC87F150FA5EC0FFF49B5FC131F137F48B6FC0007140F4813C0381FFC00EA3FF0EA7FC05B48C7FC5AA56C141F7E6D137FD83FE0497ED9F807EBFFF06CB712F87E6C14F36C14C1C69138003FF0D91FF090C7FC2D2E7BAC33>97 D<ECFFF0010713FE011FEBFF804914C04914E048B612F048EBC01F9038FE000F485A485A4848EB07E049EB03C0484890C7FC5BA2127F90C9FCA25A5AA97E7EA27F003FEC01F06DEB03F86C7E6D13076C6C14F06C6C130F01FFEB1FE06CEBE07F6C90B512C06C1580013F14006D13FC01075B010013C0252E79AC33>99 D<ED7FF84B7E5CA280157F1501ABEB01FF010713C1011F13F1017F13F990B6FC5A4813813907FE003FD80FF8131F49130F48481307491303123F491301127F90C7FCA25A5AA97E7E15037F123F6D1307A26C6C130F6D131F6C6C133F6C6C137F2603FF81B512F091B612F8C602FD13FC6D13F96D01E113F8010F018013F0D901FEC8FC2E3E7DBC33>I<ECFF80010713F0011F13FC497F90B6FC48158048018013C03A07FE003FE001F8EB0FF048481307484814F8491303003F15FC491301127F90C7FC16FE15005A5AB7FCA516FC48C9FC7E7EA36C7E167C6C6C14FE7F6C7E6D13016C6CEB03FC6CB4130F6C9038C03FF86C90B512F06D14E06D14C0010F1400010313FC9038007FE0272E7BAC33>I<ED3FE0913801FFFC020713FE141F4A13FF5CECFFC015004948137E4A133C010314005CA8003FB612F84815FCB7FCA36C15F8260003F8C7FCB3AD003FB612804815C0A46C1580283E7DBD33>I<14E0EB03F8A2497EA36D5AA2EB00E091C8FCAA383FFFF8487FA47EEA0001B3AD007FB612C0B712E016F0A216E06C15C0243E78BD33>105D<1570EC01FCA2EC03FEA3EC01FCA2EC00701500AA90383FFFFC4913FE90B5FCA27F7F90C7FCB3B3A9140115FCA21218007EEB03F81407B414F0140F9038803FE090B512C06C14806C14006C5B6C13F8000113E01F557BBD33>I<383FFFFC487FB5FCA27E7EC7FCB3B3AD003FB612F84815FCB712FEA26C15FC6C15F8273D7ABC33>108 D<02FC137E3B7FC3FF01FF80D8FFEF01877F90B500CF7F15DF92B57E6C010F13872607FE07130301FC01FE7F9039F803FC01A201F013F8A401E013F0B3A53C7FFE0FFF07FF80B548018F13C0A46C486C01071380322C80AB33>I<4AB4FC263FFC0713C0267FFE1F13F000FF017F7F91B5FC6CB67E6CEC07FEC6EBF801ECF0004A7F4A7F5CA291C7FCA35BB3A43B3FFFF80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC302C7FAB33>I<EB01FE90380FFFC0013F13F0497F90B57E488048EB03FF2607FC0013804848EB7FC049133F4848EB1FE049130F4848EB07F0A2007F15F890C71203A300FEEC01FCAA6C14036C15F8A26D1307003F15F06D130FA26C6CEB1FE06D133F6C6CEB7FC06C6CEBFF802603FF0313006CEBFFFE6C5C6D5B6D5B010F13C0D901FEC7FC262E7AAC33>I<EC01FE3A3FFC0FFFC0486C4813F000FF017F7F91B512FE6CB7FC6CEBFE07C6D9F800138002E0EB7FC04AEB3FE04A131FEE0FF091C7FC16074915F81603A217FC1601A9160317F8A26D140717F06E130F17E06E131FEE3FC06E137F9139F801FF80DAFE07130091B55A495C6E5B6E13E0020F1380DA03FEC7FC91C9FCAF383FFFF8487FB57EA26C5B6C5B2E427FAB33>I<ED03FE3B7FFF801FFF80B5D8C07F13E002C1B5FC02C314F014C76C9038CFFE0F39001FDFF09139FFC007E092388003C092C8FC5C5C5CA25CA25CA35CB2007FB512FEB7FCA46C5C2C2C7DAB33>114 D<90381FFE0F90B5EA8F80000314FF120F5A5AEBF007387F800190C7FC00FE147F5A153FA37E007FEC1F0001C090C7FCEA3FF8EBFFC06C13FF6C14E0000314F8C680011F13FF01001480020713C0EC007FED1FE0007C140F00FEEC07F01503A27EA27F15076D14E06D130F6DEB3FC09038FE01FF90B61280160000FD5C00FC14F8D8F83F13E0D8780790C7FC242E79AC33>I<EB03C0497E130FAA003FB612FC4881B7FCA36C5D26000FE0C8FCB3A3161FEE3F80A5167F6E140001075C6E5A9138FE07FE6DB55A6D5C6D5C6E5B021F1380DA07FCC7FC29387EB633>I<3B3FFFC00FFFF0486D4813F8B56C4813FCA26C496C13F86C496C13F0D801F8C7EA7E006D14FE00005DA26D1301017E5CA2017F13036D5CA2EC8007011F5CA2ECC00F010F5CA36D6C485AA3ECF03F010391C7FCA26E5A0101137EA2ECFCFE01005BA214FF6E5AA36E5AA26E5A6E5A2E2B7EAA33>118D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Ft cmsy10 12 2/Ft 2 104 df<ED0FE015FF913803FC00EC0FE0EC3FC04A5A4AC7FC5C495AA2495AB3AD495AA2495A131F495A495A01FEC8FCEA07F8EAFFE0A2EA07F8EA00FEEB7F806D7E6D7E130F6D7EA26D7EB3AD6D7EA26D7E806E7E6E7EEC0FE0EC03FC913800FFE0150F236479CA32>102 D<12FEEAFFE0EA07F8EA00FEEB7F806D7E6D7E130F6D7EA26D7EB3AD6D7EA26D7E806E7E6E7EEC0FE0EC03FC913800FFE0A2913803FC00EC0FE0EC3FC04A5A4AC7FC5C495AA2495AB3AD495AA2495A131F495A495A01FEC8FCEA07F8EAFFE048C9FC236479CA32>IE%EndDVIPSBitmapFont%DVIPSBitmapFont: Fu cmti12 12 1/Fu 1 39 df<157F913801FFC0912607C0F0140791261F0078EC1F80023E7F4A011C143F4A7F495A0103170F4948EE07004A5E010F023E140E494801FE141E1501013F5F020016381978494A5C017ED90070495A93C712034E5A01FE4C5A494CC7FC183E18F8DA0FC0497EDA7FF0EB07DE9026FDF878EB0F9E9026FBE038EB3E0F9026FFC01C496C7ED97F8014F00200903801E003017E90263C03C07F49903938078001486CEC0F00DB700E80486C13F02807F7C1E01E13009039E1FF801C390FE07E004848C71370EE1DF8161F4848140F1801007FDB07F05B90C8EA01E093C7FC180348605A180796C7FCA2180EA260183C007E17381878007F5F6C4C5A606C6CED07806C6C4BC8FC0007161E6C6C5D6C6C15F0D800FCEC03C0013F021FC9FC90390FE001FC0103B512E09026003FFECAFC414974C64B>38 DE%EndDVIPSBitmapFont%DVIPSBitmapFont: Fv cmsl12 12 22/Fv 22 122 df<EE3FE0923803FFF892381FE01E92387F000703FEEB0380DA03F8EB07C04A48131F4A48133F4A48137F143F5D4AC7FC18804AEC3F004A91C7FCA513015CA513034A14FE0003B7FCA33A0003F80003010714014A5CA41603130F4A5CA41607131F4A5CA4160F133F4A5CA4161F137F91C75BA4163F5B495DA30001157F486C4A7EB5D8FC3F13FF14F8A232467DC536>12 D<EA03C0EA07F0EA0FF8121FA5120FEA0798EA0018A213381330A21370136013E013C0120113801203EA0700120E120C121C5A12F012C00D1D7A891B>44D<DC1FF8EB01C04BB5FC030F9138C00380923A3FF003F007913B01FF8000780FDA03FCC7123CDA0FF0EC0E1FDA1FC0EC073FDA7F80913803FF004AC8FC494881494881495A4948824948167E4948163E495A13FF91CA121E485A0003181C5B12075B120FA248481718A2003F95C7FC5BA3485AA512FF5BA719C0A3007F170161A26D1603003F95C7FC6018066C6C160E180C000F171C6D5E6C6C5E000317F06D4B5A6C6C4B5A6C6C4B5A6D6C4AC8FC6D6C143CD90FF05CD907FCEB03F0903A01FF801FC06D6CB5C9FC021F13F8020113C0424876C546>67D<011FB512FEA39039001FFE00EC0FF8A25DA5141F5DA5143F5DA5147F5DA514FF92C7FCA55B5CA513035CA513075CA5130F5CA5131F5CA3133F497E007FB512F0B6FCA227447DC323>73 D<DB3FE01370913801FFFC020701FF13E091391FC01FC191397F0003E102FCEB00F34948147F4948143F4948EC1FC0495A4A140F131F91C812075B013E1680137E1703A313FE1800A27FA26E91C7FC137F8014F014FC6DB47E15F86DEBFF806D14F06D14FC6D14FF010081023F80020780DA007F7F150F03007F161F707E16071603A21601A2120C001C15001218A4160100385EA2003C5E1603A2003E4B5A007E5E007F150F6D4A5A6D4AC7FCD87DE0147ED878F05CD8F87EEB03F83AF01FC00FE0486CB51280010149C8FC39C0003FF034487BC536>83 D<0007BAFCA3270FFE0003EB000301E04AEB007F49173F90C749141F001E180FA2001C180712180038020715065E1230A25AA2150F5E5AA3C81600151F5EA5153F5EA5157F5EA515FF93C9FCA55C5DA514035DA514075DA3140FEC3FFE48B712C05FA2404475C346>I<EC1FF0ECFFFE903903E03F8090390F000FC0011C6D7E496D7E017E80017F1301D9FF807FA414005B133C90C7FCA21503A24AB45A143F903801FFC390380FF80390383FE007EBFF802601FE005B485A485A485A4848130F123F49ECE030127F5B151FA200FF91383FC06090C7FC6C6C137F15EFDA01CF13C03A3FC00387E03B1FE00707E1803B07F03E03FF003A01FFF801FE3A003FC000F82C2E7BAC31>97 D<EC07F8EC3FFF9138FC07C0903903F000E0D90FC013704948133849C712FC017E13034913071201485A12074914F8000F15F04848EB01E092C7FC485AA3127F5BA412FF90C9FCA67EA2166016E06C6C14C01501001F15806D1303000FEC07006C6C130E6C6C133C6C6C137039007E03E090381FFF80D903FCC7FC262E7AAC2B>99 D<177FEE3FFFA25E160182A217FEA41601A217FCA41603A217F8A41607A2DA03F813F0EC3FFF9138FE0787903903F001E790390FC0006F4948137F49C7EA3FE001FE141F485A49140F0003151F485A000F16C05B121F5B003F153FA2007F16805BA3167F12FF90C81300A45EA26C5DA46C14017F001F4A5A6D1307000F140F6C6C131D6C6C49B4FC6C6C01F313F839007E03C390381FFF03D903FCEBF80030467AC436>I<EC0FF0EC7FFC903801F83F903907E00F8090391F8007C0D93F0013E0017EEB03F05B0001EC01F8485AA2485A120F4914FC121F5B123F16F8A2485A90B6FCA20180C8FCA212FF90C9FCA57EA3166016E06C15C06D1301001FEC03806D1400000F5C6C6C131E6C6C13386C6C13F039007E03C0D91FFFC7FCEB03FC262E7AAC2B>I<EF0FC0DA01FEEB7FE0913A0FFF81F0F091393F07E3839139FC01FF03903901F800FC4948EC01E04948017EC7FC495A011F147F495AA349C7FCA45E5E137E5E017F13016D5C4B5A6D495A6D6C485A496C485A90263BE07EC8FC903870FFF8EC3FC049CAFCA21201A47F7F90B512FE6CECFFC016F06D14FC6D8090B7FC2703F000037FD80FC0EB007F4848141F48C87F007E150F127C00FC15075AA2160F5FA2161F4CC7FC007C157E007E5D6C4A5A6C6CEB07E0D807E0EB1F80D801FC01FEC8FC39007FFFF80107138034427EAC31>103 D<EC3F80EB1FFFA25B1300147FA292C8FCA55C5CA513015CA513039138F801FE92380FFF8092383E0FE092387007F09138F9E003902607FB8013F8ECF70002F6130114FE5C4A1303130F5CA25CA21607131F4A14F0A4160F133F4A14E0A4161F137F91C713C0A4163F5B491580A30001157F486CECFFC0B5D8FC3F13FFA330457DC436>I<143C14FEEB01FFA25BA3EB01FE14FCEB00781400ADEB03F8EA01FFA3EA000F130714F0A5130F14E0A5131F14C0A5133F1480A5137F1400A55B5BA31201487EB512F8A318437DC21C>I<EC3F80EB1FFFA31300147FA21500A55C5CA513015CA513035CA513075CA5130F5CA5131F5CA5133F5CA5137F91C7FCA55B5BA31201487EB512FCA25C19457DC41C>108 D<903903F801FED801FF90380FFF804891383E0FE092387007F03A000FF9E003902607FB8013F8ECF70002F6130114FE5C4A1303130F5CA25CA21607131F4A14F0A4160F133F4A14E0A4161F137F91C713C0A4163F5B491580A30001157F486CECFFC0B5D8FC3F13FFA3302C7DAB36>110D<EC07FC91383FFF809138FC0FC0903903E001F090390FC000F849C7127C013E8049143F01FC8048481580485A17C04848140F120FA2484815E0A2003F151F5BA2127FA448C8EA3FC0A41780167F17007E16FEA24B5A6C5D15036C6C5C4B5A6C6C495A6C6C495A6C6C013EC7FC6C6C13FC39007E03F090381FFFC0D903FCC8FC2B2E7AAC31>I<91393F803F80903A1FFF81FFF049903887C0FC92389E003F010001B8EB1F80DA7FF0EB0FC04B14E04BEB07F05D92C7EA03F8A24A15FC4A1401A218FEA313015CA41703010316FC5CA3EF07F8A20107150F4A15F0EF1FE0A2EF3FC01880010F157FEFFF006E495A4C5A6EEB07F002EE495AD91FE7EB1F809126C3C0FEC7FC9138C0FFF8ED3FC092C9FC133FA25CA4137FA291CAFCA45B487F007F13FEA2B55A373F81AB36>I<903903F007E0D801FFEB3FF848EC787CEDE1FC39000FF1C1903807F383ECE70314EE9138EC01F89138FC00E04A1300130F5CA35CA2131F5CA5133F5CA5137F91C8FCA55B5BA31201487EB6FCA25C262C7DAB26>114D<91383FE030903903FFF87090390FC01EF090381E0007017C13034913015B0001EC00E0485AA412076D14C0A26D1400EA03FEEBFFE014FE6CEBFFC06C14F06D7F6D13FE130F01017FD9000F13801401EC007F0018143F151F1238150FA4ED1F00127CA2007E143E153C007F5C6D5B39F9C003E039F0F00FC026E07FFFC7FC38C00FF0242E7DAC26>I<14C0A313015CA21303A21307A249C7FCA25B5B5B5B485A1203001FB512F0B6FCA2C648C7FC12015BA512035BA512075BA5120F5BA215C0A3001FEB018013C0A414031500A25C1406000F130E6D5A00075B6C6C5AC6B45AEB3F801C3E77BC26>I<01FEEC3F80007FEC1FFF00FF5CA2000314000001157F491500A45E1203495CA415011207495CA41503120F495CA41507121F495CA2150FA2151FA249495AA2157F6C6C13EF913801DFF83B07E0079FFFC03903F01E1F3800FFFCD91FE0EBC0002A2D77AB36>I<90267FFFF8EBFFFEA301030180EB3FF06D48C7EA1FC0EF0F00170E0100150C171C17186E5C805FA26F5B023F13015F4CC7FC15C0021F1306A25E161CEDE018020F133816305E15F002075BA2EDF18015FB020390C8FC15FEA25DA26E5AA25D5D14005DA24A5AA24AC9FC5C14065CA2001C5B127F5C485BA25C48485A4848CAFCEA600EEA783CEA3FF0EA0FC0373F80AA33>121 D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fw cmr12 12 20/Fw 20 119 df<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380120313005A1206120E5A5A5A12600B1D78891B>44 D<B612C0A61A067F9721>I<16C04B7EA34B7EA34B7EA34B7EA3ED19FEA3ED30FFA203707FED607FA203E07FEDC03FA2020180ED801FA2DA03007F160FA20206801607A24A6D7EA34A6D7EA34A6D7EA20270810260147FA202E08191B7FCA249820280C7121FA249C87F170FA20106821707A2496F7EA3496F7EA3496F7EA201788313F8486C83D80FFF03037FB500E0027FEBFFC0A342477DC649>65D<DB0FFE146092B500C013E0020314F0913A0FFC01FC0191393FC0003E02FFC7EA0F83D903FCEC03C74948EC01E74948EC00FF4948157F4948153F4948151F49C9120F485A491607120348481603A248481601A248481600A2123FA2491760127FA396C7FC485AAD4CB612C06C7EA293C7387FF000725A003F171F7FA2121F7F120FA26C7EA26C7E6C7EA26C7E6D7E6D6C153F6D7E6D6C157F6D6C15E7D903FEEC01C7D900FFEC0383DA3FE0EB0F01DA0FFCEBFE000203B500F81360020002E090C7FCDB0FFEC9FC42487BC54D>71D<010FB512FEA3D9000313806E130080B3B3AB123F487E487EA44A5A13801300006C495A00705C6C13076C5C6C495A6CEB1F802603E07FC7FC3800FFFCEB1FE027467BC332>74D<B712FCEEFFC017F800019039C0000FFC6C6C48EB01FF9338007F80EF1FE0170FEF07F018F8EF03FCA218FE1701A218FFA718FEA2170318FCA2EF07F818F0EF0FE0EF1FC0EF7F80933801FE00EE0FFC91B612F017800280C9FCB3AA3801FFE0B612C0A338447CC342>80D<49B41303010FEBE007013F13F89039FE00FE0FD801F8131FD807E0EB079F49EB03DF48486DB4FC48C8FC4881003E81127E82127C00FC81A282A37E82A27EA26C6C91C7FC7F7FEA3FF813FE381FFFE06C13FE6CEBFFE06C14FC6C14FF6C15C0013F14F0010F80010180D9001F7F14019138001FFF03031380816F13C0167F163F161F17E000C0150FA31607A37EA36C16C0160F7E17806C151F6C16006C5D6D147ED8FBC05CD8F9F0495AD8F07C495A90393FC00FE0D8E00FB51280010149C7FC39C0003FF02B487BC536>83 D<B692383FFFF0A3000301E003071300C649ED01FC4A5E017F705A6E5E133F616E1501011F5FA26D6C4BC7FCA28001071606A26E150E0103160CA26D6C5DA2806D5EA26F1470027F156081023F5DA281021F4A5AA26F1303020F92C8FC8102071406A26F130E0203140CA26E6C5BA2816E5CA2EE8070037F1360A26F6C5AA216E092381FE180A216F3030F90C9FC16FBED07FEA36F5AA36F5AA26F5AA3166044467EC349>86 D<EB07FC90383FFF809038F80FE03903C003F048C66C7E000E6D7ED80FC0137E486C137F6D6D7EA36F7EA26C5AEA0380C8FCA4EC0FFF49B5FC90380FFE1FEB3FC0EBFF00EA03FC485A485A485A485A127F5B176048C7FCA3153FA36D137F007F14EF6D9038C7E0C0003F13013A1FE00783F13B07F81E03FF802701FFFC0113003A001FE0007C2B2E7CAC31>97 D<EC7F80903803FFF090380FC07C90383F000F01FCEB03804848EB01C00003140F4848EB1FE049133F120F485AA2485AED1FC0007FEC070092C7FCA290C9FC5AAB7E7FA2123F16307F001F15706C6C146016E06C6C14C06C6C13010001EC03806C6CEB0700013F131E90381FC078903807FFF001001380242E7DAC2B>99 D<167FED3FFFA315018182B3EC7F80903803FFF090380FC07C90383F000E017E1307496D5AD803F87F48487F5B000F81485AA2485AA2127FA290C8FC5AAB7E7FA2123FA26C7EA2000F5D7F6C6C5B00035C6C6C9038077F806C6C010E13C0013F011C13FE90380FC0F8903803FFE09026007F0013002F467DC436>I<EB01FE903807FFC090381F03F090387E00FC49137E48487F485A4848EB1F80000F15C049130F121F484814E01507A2007F15F090C7FCA25AA390B6FCA290C9FCA67EA27FA2123F16306C7E1670000F15606D14E06C6C14C0000314016C6CEB03806C6CEB0700013E131E90381F80F8903803FFE0010090C7FC242E7DAC2B>I<EC0FE0EC7FF8903801F81E903803F03F90390FE07F8090381FC0FF5C133F495AA2ED7F0001FE131C92C7FCAFB67EA3C648C8FCB3B2486C7E007F13FFA321467EC51E>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCADEA01FC12FFA3120712031201B3B0487EB512F8A315437DC21C>105D<EA01FC12FFA3120712031201B3B3B3A5487EB512F8A315457DC41C>108D<3901FC01FE00FF903807FFC091381E07F091383801F8000701707F0003EBE0002601FDC07F5C01FF147F91C7FCA25BA35BB3A8486CECFF80B5D8F83F13FEA32F2C7DAB36>110D<EC7F80903803FFF090380FC0FC90383E001F496D7E496D7E48486D7E48486D7E48486D7E000F81A24848147E003F157FA290C87E481680A44816C0AA6C1680A26D147F003F1600A2001F157E6D14FE000F5D6D130100075D6C6C495A6C6C495A6C6C495A013E49C7FC90381FC0FE903807FFF89038007F802A2E7DAC31>I<3903F803F000FFEB1FFCEC3C3EEC707F0007EBE0FF3803F9C000015B13FBEC007E153C01FF13005BA45BB3A748B4FCB512FEA3202C7DAB26>114 D<1306A5130EA4131EA3133E137EA213FE12011207001FB512F0B6FCA2C648C7FCB3A4150CAA017E131C017F1318A26D133890381F8030ECC070903807E0E0903801FFC09038007F001E3E7EBC26>116 D<B539F001FFFCA3000790C7EA7FE06C48EC1F8000011600160E1200160C017F5CA280013F5CA26E1370011F146080010F5CA2ECF00101075CA26D6C48C7FCA26E5A01011306A26D6C5AA214FF6E5AA215B8EC3FB015F06E5AA36E5AA26E5AA36EC8FC2E2C7EAA33>118 D E%EndDVIPSBitmapFont%DVIPSBitmapFont: Fx cmbx12 17.28 25/Fx 25 122 df<B812C0AD2A0D7EA636>45 D<F00FE04E7EA24E7EA34E7EA24E7EA34D7FA24D80A24D80A34D80A24D80A34D80A2DD7FBF7FA2181F05FF8017FE04016D7FA24D7E04038217F804076D80A24D7E040F8217E0041F6D80A24D7F043F825F047F6E7FA294C77E4C825E03016F7FA24C800303845E03076F80A24C80030F845E031F6F80A24C81033F845E037F707F93B9FCA292BA7EA24A85A203FCC912070203865D020771805D86020F864B82021F865D87023F864B83027F8692CBFC874A864A840101875C496C728090381FFFC0B700E092B812FEA66F647BE37A>65 D<BD12FCA488A2D8000102C0C71201F1000F1A01F2007F1B3F1B0F1B07757EA28787A288A3F43F80A31C1FA3197EA3F40FC0A499C7FC19FEA31801A218031807181F18FF93B6FCA6EEC000181F180718031801A21800A21D7E197EA21DFCA696C812011DF8A31C03A3F407F0A31C0FA21C1F1C3F1DE01C7F1CFF63631B0F093F13C098B5FC1A0797B6FCBEFCA31D80A35F617AE06A>69 D<94381FFFE00407B67E043F15F04BB712FE030FEEFFC0033FD9FC0014F092B500C0010F13FC020349C7000113FF4A01F86E6C7F021F496F13E04A01C0030F7F4A496F7F91B5C96C7F0103497013FF494970804B834949717F49874949717F49874B8390B586484A717FA24891CB6C7FA2481D804A84481DC0A348497214E0A3481DF0A34A85481DF8A5B51CFCB06C1DF8A36E96B5FCA36C1DF0A46C6D4E14E0A36C1DC06E606C1D80A26C6E4D1400A26C6E4D5BA26C6E4D5BA26D6D4D5B6D636D6D4D5B6F94B5FC6D636D6D4C5C6D6D4C91C7FC6D6E4B5B6D02E0031F5B023F6D4B13F06E01FC92B55A6E01FF02035C020302C0010F91C8FC020002FC90B512FC033F90B712F0030F17C0030394C9FCDB007F15F804071580DC001F01E0CAFC666677E379>79 D<DBFFFCEC01E0020FD9FFE01303027F02FC130749B7130F0107EEC01F011F16F049D9C007EBF83F4948C7383FFE7FD9FFF8020FB5FC4801E014014849804849153F91C97E484882001F834982003F83845B007F187FA2193FA200FF181FA27F190FA27FA26D17078080806C01F893C7FC80ECFF8015F86CECFFC016FC6CEDFFE017FE6CEEFFE018F86C17FE6C717E6C846C846D17F86D836D836D8313036D18806D6C17C0020F17E01401DA000F16F01500040715F8EE007F1703050014FC183F84060713FE84A2007C8300FC83A2197FA3193F7EA31AFC7EA27F1AF86D177F7F1AF06D17FF6D18E06D5E01FF18C06E4B138002E04B130002F84B5A02FFED3FFC01CF01E0ECFFF8018301FF010F5B010191B65A6D6C5E48011F93C7FC48010315FC48D9003F14E048020149C8FC476677E35A>83 D<913803FFFE027FEBFFF00103B612FE010F6F7E4916E090273FFE001F7FD97FE001077FD9FFF801017F486D6D7F717E486D6E7F85717FA2717FA36C496E7FA26C5B6D5AEB1FC090C9FCA74BB6FC157F0207B7FC147F49B61207010F14C0013FEBFE004913F048B512C04891C7FC485B4813F85A5C485B5A5CA2B55AA45FA25F806C5E806C047D7F6EEB01F96C6DD903F1EBFF806C01FED90FE114FF6C9027FFC07FC01580000191B5487E6C6C4B7E011F02FC130F010302F001011400D9001F90CBFC49437CC14E>97D<903807FF80B6FCA6C6FC7F7FB3A8EFFFF8040FEBFF80047F14F00381B612FC038715FF038F010014C0DBBFF0011F7FDBFFC001077F93C76C7F4B02007F03F8824B6F7E4B6F13804B17C0851BE0A27313F0A21BF8A37313FCA41BFEAE1BFCA44F13F8A31BF0A24F13E0A24F13C06F17804F1300816F4B5A6F4A5B4AB402075B4A6C6C495B9126F83FE0013F13C09127F00FFC03B55A4A6CB648C7FCDAC00115F84A6C15E091C7001F91C8FC90C8000313E04F657BE35A>I<92380FFFF04AB67E020F15F0023F15FC91B77E01039039FE001FFF4901F8010113804901E0010713C04901804913E0017F90C7FC49484A13F0A2485B485B5A5C5A7113E0485B7113C048701380943800FE0095C7FC485BA4B5FCAE7EA280A27EA2806C18FCA26C6D150119F87E6C6D15036EED07F06C18E06C6D150F6D6DEC1FC06D01E0EC7F806D6DECFF00010701FCEB03FE6D9039FFC03FFC010091B512F0023F5D020F1580020102FCC7FCDA000F13C03E437BC148>I<F17FF8050FB5FCA6EF000F8484B3A892380FFF804AB512F8020F14FE023FECFF8391B712E301039138807FF3499039F8000FFB011F01E00103B5FC494913004990C87E49488148498148834A815A485BA2485BA25AA3485BA4B5FCAE7EA46C7FA37EA26C7FA26C5F806C5F6C6D5D6C6D5D017F93B5FC6D6C6C0103806D6D49806D01F0D91FF7EBFFFE6D9039FE01FFE7010190B612876D6CECFE07021F14F8020314E09127003FFE00ECC0004F657BE35A>I<92380FFFC04AB512FC020FECFF80023F15E091B712F80103D9FE037F499039F0007FFF011F01C0011F7F49496D7F4990C76C7F49486E7F48498048844A804884485B727E5A5C48717EA35A5C721380A2B5FCA391B9FCA41A0002C0CBFCA67EA380A27EA27E6E160FF11F806C183F6C7FF17F006C7F6C6D16FE6C17016D6C4B5A6D6D4A5A6D01E04A5A6D6DEC3FE0010301FC49B45A6D9026FFC01F90C7FC6D6C90B55A021F15F8020715E0020092C8FC030713F041437CC14A>I<EE3FFC0307B51280033F14C04AB612F0020715F84A9038F03FFC4AEB807F913A7FFE00FFFE4A5A4B4813FF4913F05B4913E0A24913C0A27013FE4949EB7FFCEF3FF8EF1FF0EF07C094C7FCB0B812C0A6D8001F01C0C8FCB3B3B0007FB612FCA638657CE431>I<903807FF80B6FCA6C6FC7F7FB3A8EF1FFF94B512F0040714FC041F14FF4C8193267FE07F7F922781FE001F7FDB83F86D7FDB87F07FDB8FC0814C7F039FC78015BE03BC8003FC825DA25DA25DA45DB3B2B7D8F007B71280A651647BE35A>104D<EB0FE0EB3FF8497E48B5FCA24880A24880A76C5CA26C91C7FCA238007FFC6D5AEB0FE090C9FCAF903807FF80007FB5FCA6C6FC7F7FB3B3AEB712C0A622657BE42C>I<903807FF80B6FCA6C6FC7F7FB3A90503B61280A6DD003FEB8000DE0FFCC7FCF01FF04E5AF0FFC04D5B4D90C8FCEF07FC4D5AEF3FF04D5A4D5A4C90C9FC4C5AEE0FFC4C5A4C5AEE7FC04C7E03837F03877F158F039F7F03BF7F92B5FC838403FC804B7E03F0804B6C7F4B6C7F1580707F707F707FA270807080717FA2717F717F717FA2717F717F83867180727F95B57EB7D8E00FECFFF0A64C647BE355>107 D<903807FF80B6FCA6C6FC7F7FB3B3B3B3ADB712E0A623647BE32C>I<902607FF80D91FFFEEFFF8B691B500F00207EBFF80040702FC023F14E0041F02FF91B612F84C6F488193267FE07F6D4801037F922781FE001F9027E00FF0007FC6DA83F86D9026F01FC06D7F6DD987F06D4A487F6DD98FC0DBF87EC7804C6D027C80039FC76E488203BEEEFDF003BC6E4A8003FC04FF834B5FA24B5FA24B94C8FCA44B5EB3B2B7D8F007B7D8803FB612FCA67E417BC087>I<902607FF80EB1FFFB691B512F0040714FC041F14FF4C8193267FE07F7F922781FE001F7FC6DA83F86D7F6DD987F07F6DD98FC0814C7F039FC78015BE03BC8003FC825DA25DA25DA45DB3B2B7D8F007B71280A651417BC05A>I<923807FFE092B6FC020715E0021F15F8027F15FE494848C66C6C7E010701F0010F13E04901C001037F49496D7F4990C87F49486F7E49486F7E48496F13804819C04A814819E048496F13F0A24819F8A348496F13FCA34819FEA4B518FFAD6C19FEA46C6D4B13FCA36C19F8A26C6D4B13F0A26C19E06C6D4B13C0A26C6D4B13806C6D4B13006D6C4B5A6D6D495B6D6D495B010701F0010F13E06D01FE017F5B010090B7C7FC023F15FC020715E0020092C8FC030713E048437CC151>I<902607FF80EBFFF8B6010FEBFF80047F14F00381B612FC038715FF038F010114C09227BFF0003F7FC6DAFFC0010F7F6D91C76C7F6D496E7F03F86E7F4B6E7F4B17804B6F13C0A27313E0A27313F0A21BF885A21BFCA3851BFEAE4F13FCA41BF861A21BF0611BE0611BC06F92B512801B006F5C6F4A5B6F4A5B03FF4A5B70495B04E0017F13C09226CFFC03B55A03C7B648C7FC03C115F803C015E0041F91C8FC040313E093CBFCB3A3B712F0A64F5D7BC05A>I<D90FFFEB0FFCB690383FFF8093B512E04B14F04B14F8923907FC7FFC92390FE0FFFEC6EC1F806DD93F0113FF6D133E157E157C15F8A215F07013FEA24BEB7FFCEF3FF8EF0FE04B90C7FCA55DB3B0B712F8A638417BC042>114 D<913A3FFF8007800107B5EAF81F011FECFE7F017F91B5FC48B8FC48EBE0014890C7121FD80FFC1407D81FF0801600485A007F167F49153FA212FF171FA27F7F7F6D92C7FC13FF14E014FF6C14F8EDFFC06C15FC16FF6C16C06C16F06C826C826C826C82013F1680010F16C01303D9007F15E0020315F0EC001F1500041F13F81607007C150100FC81177F6C163FA2171F7EA26D16F0A27F173F6D16E06D157F6D16C001FEEDFF806D0203130002C0EB0FFE02FCEB7FFC01DFB65A010F5DD8FE0315C026F8007F49C7FC48010F13E035437BC140>I<EC07E0A6140FA5141FA3143FA2147FA214FF5BA25B5B5B5B137F48B5FC000F91B512FEB8FCA5D8001F01E0C8FCB3AFEF0FC0AC171F6D6D1480A2173F6D16006F5B6D6D137E6D6D5B6DEBFF836EEBFFF86E5C020F14C002035C9126003FFCC7FC325C7DDA3F>I<902607FFC0ED3FFEB60207B5FCA6C6EE00076D826D82B3B3A260A360A2607F60183E6D6D147E4E7F6D6D4948806D6DD907F0ECFF806D01FFEB3FE06D91B55A6E1500021F5C020314F8DA003F018002F0C7FC51427BC05A>I<B700C00103B512FCA6C66C01C0C8381FFE006D6DED07F0A26D6D5E190F6D6D5E191F6D606F153F6D95C7FC6F5DA26D6D157E19FE6D6E5C18016E5E7013036E5E701307A26E6D5C180F6E6D5C181F6E6D5C183F6E93C8FC705BA26E6D13FEA26E6E5A17816FEBC1F817C36F5C17E76F5C17FFA26F5CA26F5CA26F91C9FCA26F5BA36F5BA2705AA2705AA2705AA2705A4E417DBF55>I<B700C00103B512FCA6D8003F01C0C8381FFE006FED07F0A26D6D5E190F6D6D5E191F6D6D5E193F6D95C7FC6F5D6D177E6F15FEA26D6E495AA26E6D5C18036E6D5C18076E5E70130F6E5E70131FA26E6D495AA26E6D91C8FC606E6D137E18FE6E5D17816F5C17C3A26FEBE7F0A26FEBF7E017FF6F5CA26F5CA26F91C9FCA36F5BA26F5BA2705AA2705AA2705AA35FA25F163F94CAFC5E167E16FED807E05CD81FF81301487E486C495AA2B5495AA24B5A5E151F4B5A6C4849CBFC15FEEBFC01393FF807FC391FF03FF06CB55A6C5C6C91CCFCC613FCEB1FE04E5D7DBF55>121 D E%EndDVIPSBitmapFontend%%EndProlog%%BeginSetup%%Feature: *Resolution 600dpiTeXDict begin%%BeginPaperSize: Letterletter%%EndPaperSize%%EndSetup%%Page: 1 11 0 bop 89 349 a Fx(On)53 b(the)g(implemen)l(tation)g(of)h(the)f(Adv)-9b(anced)52 b(Encryption)358 531 y(Standard)h(on)g(a)h(public-k)l(ey)g(crypto-copro)t(cessor)981 772 y Fw(An)m(tonio)32 b(V)-8b(alv)m(erde)33 b(Garcia,)e(Jean-Pierre)h(Seifert)9081005 y Fv(In\014neon)i(T)-8 b(ec)m(hnologies,)32 b(Securit)m(y)iFu(&)e Fv(ChipCard)h(ICs)629 1121 y Ft(f)p Fs(antonio.valverde,jean-pie)q(rre.)q(seif)q(ert)q Ft(g)pFs(@infi)q(neo)q(n.co)q(m)0 1446 y Fr(Abstract)0 1744y Fq(This)21 b(pap)r(er)g(describ)r(es)g(ho)n(w)g(to)g(implemen)n(t)i(the)e(new)h(Ad-)0 1843 y(v)-5 b(anced)30 b(Encryption)g(Standard)f(\(AES\))i(using)f(a)g(mo)r(du-)0 1943 y(lar)e(arithmetic)g(crypto-copro)r(cessor,)d(t)n(ypically)k(used)f(to)02043 y(sp)r(eed)f(up)h(public-k)n(ey)f(crypto-systems.)35b(This)27 b(idea)g(pro-)0 2142 y(vides)32 b(a)h(fast)f(and)h(secure)f(AES)g(implemen)n(tation)h(when)0 2242 y(a)27 b(dedicated)h(hardw)n(are)e(AES)i(mo)r(dule)g(is)f(not)h(a)n(v)-5 b(ailable.)02342 y(The)24 b(adv)-5 b(an)n(tages)22 b(of)h(using)g(the)h(mo)r(dular)f(arithmetic)h(co-)0 2441 y(pro)r(cessor)g(when)i(compared)f(to)h(a)g(pure)g(soft)n(w)n(are)e(imple-)0 2541 y(men)n(tation)j(are:)832804 y Fp(\017)41 b Fq(m)n(uc)n(h)27 b(higher)g(execution)h(p)r(erformance,)83 2969 y Fp(\017)41 b Fq(less)27 b(memory)g(usage,)f(and)83 3133 y Fp(\017)41 b Fq(optimized)h(protection)g(against)e(side-c)n(hannel)i(at-)166 3233 y(tac)n(ks.)0 3593 y Fo(Keyw)m(ords:)gFq(AES,)30 b(Crypto-Copro)r(cessor,)d(Implemen-)0 3692y(tation)g(Issues,)g(Secure)h(Implemen)n(tation.)0 4106y Fr(1)112 b(In)m(tro)s(duction)0 4404 y Fq(The)20 b(Adv)-5b(anced)21 b(Encryption)e(Standard)g(\(AES\))i(sp)r(eci\014es)04503 y(a)43 b(FIPS-appro)n(v)n(ed)d(\(cf.)k([FIPS)o(]\))g(cryptographic)d(algo-)0 4603 y(rithm)28 b(that)g(is)f(used)g(to)h(safely)f(protect)g(electronic)g(data.)0 4703 y(The)20b(AES)g(algorithm)f(is)i(a)e(symmetric)h(blo)r(c)n(k)g(cipher)g(that)04802 y(is)j(able)f(to)h(encrypt)g(\(encipher\))g(and)g(decrypt)g(\(decipher\))0 4902 y(electronic)18 b(data.)34 b(The)19b(AES)h(algorithm)e(is)h(capable)f(of)h(us-)0 5001 y(ing)29b(cryptographic)e(k)n(eys)i(of)g(128,)f(192,)h(and)g(256)f(bits)h(to)05101 y(encrypt)34 b(and)h(decrypt)f(data)g(blo)r(c)n(ks)g(of)g(128)f(bits.)58 b(The)0 5201 y(new)30 b(AES)g(\(also)f(kno)n(wn)h(as)f(Rijndael,)i(cf.)g([DR2]\))f(is)g(an)0 5300 y(algorithm)37b(designed)h(to)f(use)h(only)g(single)g(b)n(yte)f(op)r(era-)05400 y(tions.)69 b(Therefore,)40 b(it)f(is)f(an)h(algorithm)e(v)n(ery)g(suitable)2010 1446 y(for)31 b(8-bit)h Fn(\026)p Fq(-pro)r(cessors)d(with)k(only)e(a)h(few)g(kB)f(RAM)i(as)2010 1546 y(commonly)39b(used)g(in)g(to)r(da)n(ys)g(smart)f(cards.)71 b(Ho)n(w)n(ev)n(er,)20101645 y(Rijndael)35 b(is)g(also)f(w)n(ell)h(suited)h(for)e(32-bit)hFn(\026)p Fq(-pro)r(cessors)2010 1745 y(with)24 b(more)f(RAM)i(and)e(clearly)g(for)g(dedicated)h(hardw)n(are)2010 1845 y(implemen)n(tations,)37 b(cf.)e([W)-7 b(o,)36 b(W)n(OL)o(,)f(SMTM)q(].)59b(An)36 b(op-)2010 1944 y(timized)41 b(implemen)n(tation)f(of)g(the)h(AES)f(algorithm)f(on)2010 2044 y(an)27 b(8051)e(based)iFn(\026)p Fq(-con)n(troller)e(with)i(a)g(128-bit)f(k)n(ey)g(tak)n(es)2010 2144 y(less)e(than)h(1ms)f(@)h(15MHz)f(and)g(requires)f(48)h(b)n(ytes)h(of)f(di-)2010 2243 y(rectly)34 b(addressable)g(in)n(ternal)g(RAM)h(to)g(encrypt)g(a)f(128)2010 2343 y(bit)44 b(data)e(blo)r(c)n(k)h(and)g(a)g(little)h(bit)f(more)g(time)g(to)g(de-)20102443 y(crypt)h(it.)88 b(Ev)n(en)43 b(if)i(this)g(is)f(enough)g(for)g(a)g(large)f(v)-5 b(a-)2010 2542 y(riet)n(y)36 b(of)h(applications,)h(there)e(are)g(some)g(others)g(where)2010 2642 y(the)26b(bit)g(rate)f(ac)n(hiev)n(ed)g(with)h(this)g(implemen)n(tation)g(ma)n(y)2010 2741 y(not)36 b(b)r(e)h(enough)f(\(for)g(instance)h(in)f(a)h(con)n(tactless)e(en)n(vi-)2010 2841 y(ronmen)n(t\))j(or,)h(there)f(is)g(a)g(demand)g(for)f(a)h(high)g(ph)n(ysi-)2010 2941 y(cal)26b(attac)n(k)f(resistancy)-7 b(.)35 b(On)26 b(the)g(other)g(hand,)g(dedicated)2010 3040 y(public-k)n(ey)39 b(copro)r(cessors)e(are)h(fast)i(arithmetic)g(copro-)2010 3140 y(cessors)f(that)h(usually)g(can)h(handle)f(non-mo)r(dular)f(and)2010 3240 y(esp)r(ecially)44b(mo)r(dular)g(arithmetic)h(on)f(prime)g(\014elds)h Fm(F)38263252 y Fl(p)2010 3339 y Fq(and)29 b(esp)r(ecially)f(on)g(\014elds)h(of)f(c)n(haracteristic)f(t)n(w)n(o)h Fm(F)3688 3309 y Fl(d)36883360 y Fk(2)3733 3339 y Fq(,)h(cf.)2010 3439 y([NR].)24b(These)e(copro)r(cessors)e(are)i(designed)g(to)h(b)r(e)g(v)n(ery)f(ef-)2010 3538 y(\014cien)n(t)33 b(for)e(RSA)i(and)f(ECC)g(algorithms,)h(but)g(they)f(are)2010 3638 y(clearly)e(not)i(in)n(tended)g(to)f(accelerate)f(the)i(computation)2010 3738 y(of)21 b(symmetric)g(k)n(ey)f(algorithms)g(lik)n(e)g(DES)i(or)e(AES.)h(Ho)n(w-)20103837 y(ev)n(er,)39 b(some)f(of)f(the)i(op)r(erations)d(usually)h(implemen)n(ted)2010 3937 y(in)29 b(a)g(mo)r(dular)f(arithmetic)h(copro)r(cessor,)d(sp)r(eci\014cally)j(in)2010 4037 y(those)35b(in)n(tended)g(for)f(elliptic)i(curv)n(e)e(cryptograph)n(y)-7b(,)34 b(are)2010 4136 y(still)46 b(useful)g(to)g(implemen)n(t)g(the)h(AES)e(b)r(ecause)h(some)2010 4236 y(transformations)21b(of)h(the)h(AES)f(are)g(p)r(erformed)g(on)g(a)g(\014eld)20104335 y Fm(F)2055 4305 y Fl(d)2055 4356 y Fk(2)2099 4335y Fq(.)36 b(By)21 b(p)r(erforming)h(these)g(transformations)e(within)j(the)2010 4435 y(copro)r(cessor,)40 b(w)n(e)f(can)g(reduce)h(the)g(execution)f(time)h(of)2010 4535 y(the)f(encryption)g(and)g(decryption)f(algorithms,)j(reduce)2010 4634 y(the)k(usage)f(of)h(in)n(ternal)f(RAM)i(memory)e(and)g(protect)2010 4734 y(the)36 b(algorithm)f(against)f(v)-5 b(arious)35 b(side-c)n(hannel)f(attac)n(ks)20104834 y([A,)21 b(AK1)o(,)g(AK2)o(,)g(CJRR,)g(CKN)o(,)g(DR1,)g(DPV,)g(Gu1)o(,)g(Gu2,)2010 4933 y(KK)o(,)41 b(Ko)r(ca)o(],)j(suc)n(h)c(lik)n(e)h(timing)g(attac)n(ks)e([K)n(Q)o(,)i(Ko)r(c)n(h)o(],)20105033 y(p)r(o)n(w)n(er)27 b(attac)n(ks)g([A)n(G,)i(BS99)n(,)g(CCD,)f(KJJ)o(,)h(Me],)f(electro-)2010 5132 y(magnetic)40 b(radiation)f(attac)n(ks)h([SQ)o(])h(or)f(ev)n(en)g(fault)h(at-)2010 5232y(tac)n(ks)19 b([ABFHS)q(,)h(BDL,)g(BDHJNT,)g(BS97)o(,)g(BS02)o(,)g(BMM,)2010 5332 y(JLQ)o(,)35 b(JPY)o(,)g(JQBD)o(,)g(JQYY)o(,)g(KR)o(,)g(KWMK,)f(Ma,)g(P)n(ai)o(,)1914 5454 y(1)p eop%%Page: 2 22 1 bop 0 83 a Fq(SA,)28 b(YJ,)g(YKLM1)o(,)g(YKLM2)o(,)g(ZM].)0282 y(Although)38 b(man)n(y)g(implemen)n(tations)g(of)g(Rijndael)g(ha)n(v)n(e)0 382 y(b)r(een)44 b(brough)n(t)e(in)n(to)h(the)g(literature,)j(since)d(this)h(algo-)0 482 y(rithm)51 b(has)e(w)n(on)h(the)h(AES)f(con)n(test,)56 b(none)50 b(of)g(these)0 581 y(implemen)n(tations)42b(so)f(far)h(used)g(a)g(public-k)n(ey)f(crypto-)0 681y(copro)r(cessor.)34 b(Therefore,)25 b(w)n(e)g(cannot)h(compare)f(our)g(im-)0 780 y(plemen)n(tation)39 b(with)h(an)n(y)f(other,)j(and)e(w)n(e)f(recommend)0 880 y(to)31 b(lo)r(ok)g(at)g(cf.)g([Li])h(to)f(get)g(an)g(o)n(v)n(erview)e(of)i(alternativ)n(e)0 980 y(implemen)n(tations)c(on)h(other)f(platforms.)0 1179 y(In)j(the)g(course)e(of)h(this)h(pap)r(er)f(w)n(e)g(\014rst)g(giv)n(e)g(some)g(hin)n(ts)0 1279 y(of)f(the)h(utilit)n(y)g(of)g(our)e(implemen)n(tation)i(in)g(man)n(y)f(smart)01378 y(card)j(applications.)47 b(In)31 b(the)h(next)g(c)n(hapter)e(w)n(e)h(describ)r(e)0 1478 y(the)41 b(minim)n(um)g(requiremen)n(ts)f(for)g(the)h(needed)g(copro-)0 1577 y(cessor)26 b(and)h(giv)n(e)g(an)g(example)g(of)g(its)h(required)e(arc)n(hitec-)0 1677y(ture.)47 b(Hereafter,)32 b(w)n(e)e(brie\015y)h(describ)r(e)g(the)g(AES)h(itself.)0 1777 y(The)38 b(follo)n(wing)f(c)n(hapter)f(is)i(the)g(most)g(imp)r(ortan)n(t)f(one,)0 1876 y(as)e(it)h(describ)r(es)g(our)f(prop)r(osed)g(implemen)n(tation)g(tec)n(h-)0 1976 y(nique)27b(used)f(for)g(the)h(AES.)g(Finally)-7 b(,)27 b(some)f(securit)n(y)g(con-)0 2076 y(siderations)17 b(are)h(discussed)g(around)f(the)i(implemen)n(tation)0 2175 y(presen)n(ted)32 b(here)h(and)g(some)f(estimation)h(\014gures)f(on)h(the)0 2275 y(p)r(erformance)27b(of)g(the)h(implemen)n(tation)g(are)e(also)h(giv)n(en.)02694 y Fr(2)112 b(Applications)0 2997 y Fj(2.1)105 b(Chip)s(card)35b(ICs)0 3300 y Fq(Chip)r(cards)30 b(are)g(mainly)g(used)g(to)h(iden)n(tify)g(and)f(authen-)0 3399 y(ticate)25 b(a)f(card)g(user)g(to)h(a)f(system.)36 b(The)24 b(iden)n(ti\014cation)h(or)0 3499y(authen)n(tication)32 b(proto)r(col)g(is)h(normally)f(based)g(on)h(sym-)0 3599 y(metric)23 b(and)h(asymmetric)f(cryptograph)n(y)-7b(.)33 b(Moreo)n(v)n(er,)21 b(all)0 3698 y(the)40 b(data)f(transfers)g(b)r(et)n(w)n(een)h(the)g(Chip)r(card)f(and)h(the)0 3798y(T)-7 b(erminal)37 b(are)f(usually)h(protected)g(b)n(y)g(a)g(Message)f(Au-)0 3898 y(then)n(tication)j(Co)r(de)g(\(MA)n(C\))h(calculated)f(with)h(a)f(sym-)0 3997 y(metric)27 b(algorithm.)36 b(T)-7b(riple)26 b(DES)i(is)f(the)g(most)g(curren)n(tly)0 4097y(symmetric)45 b(algorithm)g(used)h(to)r(da)n(y)f(in)h(smart)f(cards.)04196 y(Ho)n(w)n(ev)n(er,)34 b(the)h(new)g(encryption)e(standard)h(\(AES\))h(will)0 4296 y(progressiv)n(ely)17 b(replace)i(the)h(T)-7b(riple)20 b(DES)g(within)h(the)f(next)0 4396 y(y)n(ears.)59b(Th)n(us,)37 b(a)e(v)n(ery)g(e\016cien)n(t)g(AES)h(implemen)n(tation)04495 y(will)k(b)r(e)g(required)f(in)h(those)f(en)n(vironmen)n(ts)g(where)g(the)0 4595 y(transaction)25 b(time)i(is)g(required)e(to)h(b)r(e)h(as)f(short)g(as)g(p)r(ossi-)0 4695 y(ble,)i(as)f(in)h(the)g(case)e(of)i(con)n(tactless)e(applications.)0 4997 y Fj(2.2)105b(Securit)m(y)36 b(ICs)0 5300 y Fq(In)42 b(the)g(area)f(of)h(Securit)n(y)f(ICs,)k(lik)n(e)d(a)f(T)-7 b(rusted)42 b(Plat-)05400 y(form)34 b(Mo)r(dule)g(or)f(a)g(SmartUSB)h Fn(\026)pFq(-con)n(troller,)f(the)h(use)2010 83 y(of)40 b(a)g(mo)r(dular)f(arithmetic)i(copro)r(cessor)c(for)j(the)g(AES)2010 183y(implemen)n(tation)31 b(describ)r(ed)f(here,)h(will)g(pro)n(vide)e(an)h(en-)2010 282 y(cryption)42 b(engine,)47 b(fast)42 b(enough)g(and)h(v)n(ery)f(secure)g(for)2010 382 y(man)n(y)32 b(applications,)h(lik)n(e)f(bulk)h(encryption,)h(that)f(with)2010 482 y(a)39 b(standard)g(soft)n(w)n(are)e(implemen)n(tation)j(could)f(not)h(b)r(e)2010581 y(ac)n(hiev)n(ed.)2010 883 y Fj(2.3)105 b(Secure)35b(Storage)g(ICs)2010 1184 y Fq(The)29 b(main)g(pro)r(duct)g(that)h(can)e(b)r(ene\014t)i(of)f(the)h(AES)f(im-)2010 1284 y(plemen)n(tation)j(describ)r(ed)f(here)h(is)f(the)h(so)f(called)h(m)n(ulti-)20101383 y(media)26 b(card)g(also)g(kno)n(wn)g(as)g(a)g(secure)g(storage)e(IC.)j(This)2010 1483 y(card)40 b(is)h(t)n(ypically)g(comp)r(osed)f(of)h(a)g(large)e(\015ash)i(mem-)2010 1583 y(ory)-7 b(,)42b(a)d(fast)h(I/O)f(in)n(terface)g(and)h(some)f(securit)n(y)g(logic.)2010 1682 y(When)c(a)g(small)f(CPU)g(and)h(a)f(mo)r(dular)g(arithmetic)h(co-)2010 1782 y(pro)r(cessor)26 b(is)i(incorp)r(orated,)f(the)h(AES)g(implemen)n(tation)2010 1882 y(describ)r(ed)37 b(here)f(will)h(pro)n(vide)e(new)i(features)f(lik)n(e)h(data)2010 1981 y(encryption)24b(and)g(decryption)g(whic)n(h)g(will)h(allo)n(w)e(to)i(build)20102081 y(new)33 b(applications)f(lik)n(e)h(fast)g(and)g(secure)f(memory)g(p)r(er-)2010 2180 y(sonalization.)h(This)21 b(kind)g(of)g(applications)f(require)g(a)g(fast)2010 2280 y(encryption/decryption)i(engine,)i(as)f(fast)g(as)g(the)h(I/O)e(in-)2010 2380y(terface)h(to)f(a)n(v)n(oid)g(a)h(p)r(enalt)n(y)g(during)f(the)i(execution)f(time)2010 2479 y(of)28 b(the)g(application.)20102781 y Fj(2.4)105 b(The)69 b(required)g(mo)s(dular)f(arithmetic)22482880 y(copro)s(cessor)2010 3182 y Fq(The)35 b(mo)r(dular)g(arithmetic)g(copro)r(cessor)d(m)n(ust)j(ha)n(v)n(e)f(at)2010 3282y(least)50 b(6)h(registers)e(\(4)h(if)i(only)e(encryption)g(is)h(imple-)2010 3381 y(men)n(ted\),)43 b(eac)n(h)c(of)g(length)g(greater)f(or)h(equal)f(than)i(16)2010 3481 y(b)n(ytes)19 b(eac)n(h.)34b(On)19 b(the)h(other)f(hand,)j(the)e(copro)r(cessor)c(shall)20103580 y(b)r(e)24 b(able)f(to)g(p)r(erform)g(the)h(follo)n(wing)e(arithmetic)h(and)g(log-)2010 3680 y(ical)k(op)r(erations:)20933948 y Fp(\017)41 b Fq(Multiplication)24 b(in)g Fm(F)28523918 y Fl(d)2852 3969 y Fk(2)2896 3948 y Fq(,)h Fn(d)eFp(\025)g Fq(128,)g(of)g(a)h(long)f(register)2176 4048y(b)n(y)k(an)h(8-bit)f(v)-5 b(alue,)2093 4219 y Fp(\017)41b Fq(Addition)21 b(mo)r(dulo)e(2)h(\()p Fp(\010)p Fq(,)h(i.e.)f(exclusiv)n(e)f(OR\))h(of)g(t)n(w)n(o)2176 4319 y(long)27b(registers,)2093 4490 y Fp(\017)41 b Fq(Righ)n(t)28b(and)f(Left)h(shifting)g(of)g(a)f(long)g(register,)20934662 y Fp(\017)41 b Fq(Logical)26 b(AND)j(of)e(t)n(w)n(o)g(long)g(registers)f(\(optional\),)2093 4833 y Fp(\017)41 b Fq(Sim)n(ultaneous)j(rotation)e(of)i(4)g(b)n(ytes)g(w)n(ords)e(\(op-)21764932 y(tional\).)2010 5201 y(The)20 b(follo)n(wing)e(\014gure)h(giv)n(es)g(an)g(example)g(ho)n(w)g(suc)n(h)h(a)f(co-)20105300 y(pro)r(cessor)27 b(could)i(lo)r(ok)f(lik)n(e:)40b(Here,)29 b(it)h(is)f(supp)r(osed)g(that)2010 5400 y(the)e(standard)f(CPU)g(can)g(directly)h(op)r(erate)e(on)i(the)g(data)peop%%Page: 3 33 2 bop 0 1391 a @beginspecial 0 @llx 0 @lly 361 @urx270 @ury 2232 @rwi @setspecial%%BeginDocument: coproc_architecture.eps%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: D:\Research\own Papers\AES on Crypto2000\final version\coproc_architecture.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 361 270
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 361 270
%AI3_TileBox: 0 0 361 270
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

  0.000 0.000 0.000 0.000 k
 [] 0 d
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  0.3600 269.6400 m
  360.3600 269.6400 L
  360.3600 -0.3600 L
  0.3600 -0.3600 L
  0.3600 269.6400 L
F
  180.3600 134.6400 m
F
U
  0.000 0.000 0.000 1.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
u
  216.3600 242.6400 m
  120.3600 242.6400 L
  120.3600 158.6400 L
  216.3600 158.6400 L
  216.3600 242.6400 L
s
  168.3600 200.6400 m
B
U
u
  0.000 0.000 0.000 1.000 K
1 J
  120.3600 206.6400 m
  216.3600 206.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  120.3600 182.6400 m
  216.3600 182.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  120.3600 170.6400 m
  216.3600 170.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  120.3600 194.6400 m
  216.3600 194.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  120.3600 218.6400 m
  216.3600 218.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  138.3600 83.6400 m
  171.3600 83.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  171.3600 83.6400 m
  180.3600 74.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  180.3600 74.6400 m
  189.3600 83.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  189.3600 83.6400 m
  222.3600 83.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  138.3600 83.6400 m
  171.3600 53.6400 L
S
U
u
  222.3600 83.6400 m
  192.3600 53.6400 L
S
U
u
  171.3600 53.6400 m
  192.3600 53.6400 L
S
U
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
u
  243.3600 110.6400 m
  213.3600 110.6400 L
  213.3600 95.7600 L
  243.3600 95.7600 L
  243.3600 110.6400 L
s
  228.3600 103.2000 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 217.2000 99.8400 0 Tp
TP
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(Mux\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
u
  276.3600 140.6400 m
  246.3600 140.6400 L
  246.3600 125.7600 L
  276.3600 125.7600 L
  276.3600 140.6400 L
s
  261.3600 133.2000 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 258.0000 129.8400 0 Tp
TP
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(m\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  195.3600 116.6400 m
  261.3600 116.6400 L
S
U
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
u
  231.3600 140.6400 m
  162.3600 140.6400 L
  162.3600 125.7600 L
  231.3600 125.7600 L
  231.3600 140.6400 L
s
  196.8600 133.2000 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 189.0000 129.8400 0 Tp
TP
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(OP2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
u
  159.3600 140.6400 m
  90.3600 140.6400 L
  90.3600 125.7600 L
  159.3600 125.7600 L
  159.3600 140.6400 L
s
  124.8600 133.2000 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 97.5600 129.8400 0 Tp
TP
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(OP1 /RESULT\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  261.3600 125.6400 m
  261.3600 116.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  195.3600 125.6400 m
  195.3600 116.6400 L
S
U
u
  228.3600 116.6400 m
  228.3600 114.2400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  226.3200 114.4800 m
  228.3600 110.6400 L
  230.2800 114.4800 L
  226.3200 114.4800 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  228.3600 95.6400 m
  210.4800 85.2000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  209.7600 87.2400 m
  207.3600 83.6400 L
  211.6800 83.8800 L
  209.7600 87.2400 L
F
U
  0.000 0.000 0.000 1.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
u
  159.3600 113.6400 m
  114.3600 113.6400 L
  114.3600 98.7600 L
  159.3600 98.7600 L
  159.3600 113.6400 L
s
  136.8600 106.2000 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 118.2000 102.8400 0 Tp
TP
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(Shift/Rot\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  135.3600 98.6400 m
  156.3600 85.3200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  155.0400 84.0000 m
  159.3600 83.6400 L
  156.9600 87.2400 L
  155.0400 84.0000 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  126.3600 125.6400 m
  126.3600 117.2400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  124.3200 117.4800 m
  126.3600 113.6400 L
  128.2800 117.4800 L
  124.3200 117.4800 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  195.3600 158.6400 m
  195.3600 144.2400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  193.3200 144.4800 m
  195.3600 140.6400 L
  197.2800 144.4800 L
  193.3200 144.4800 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  144.3600 155.0400 m
  144.3600 144.2400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  146.4000 154.8000 m
  144.3600 158.6400 L
  142.4400 154.8000 L
  146.4000 154.8000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  142.3200 144.4800 m
  144.3600 140.6400 L
  146.2800 144.4800 L
  142.3200 144.4800 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  180.3600 53.6400 m
  180.3600 44.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  180.3600 44.6400 m
  99.3600 44.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  99.3600 44.6400 m
  99.3600 122.0400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  101.4000 121.8000 m
  99.3600 125.6400 L
  97.4400 121.8000 L
  101.4000 121.8000 L
F
U
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
u
  198.3600 74.6400 m
  168.3600 74.6400 L
  168.3600 60.1200 L
  198.3600 60.1200 L
  198.3600 74.6400 L
n
  183.3600 67.3800 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 171.9600 64.0800 0 Tp
TP
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(ALU\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  213.3600 170.6400 m
  126.3600 170.6400 L
  126.3600 158.6400 L
  213.3600 158.6400 L
  213.3600 170.6400 L
n
  169.8600 164.6400 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 158.0400 162.0000 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(TEMP 4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  213.3600 182.6400 m
  126.3600 182.6400 L
  126.3600 170.6400 L
  213.3600 170.6400 L
  213.3600 182.6400 L
n
  169.8600 176.6400 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 158.0400 174.0000 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(TEMP 3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  213.3600 194.6400 m
  126.3600 194.6400 L
  126.3600 182.6400 L
  213.3600 182.6400 L
  213.3600 194.6400 L
n
  169.8600 188.6400 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 158.0400 186.0000 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(TEMP 2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  213.3600 206.6400 m
  126.3600 206.6400 L
  126.3600 194.6400 L
  213.3600 194.6400 L
  213.3600 206.6400 L
n
  169.8600 200.6400 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 158.0400 198.0000 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(TEMP 1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  213.3600 218.6400 m
  126.3600 218.6400 L
  126.3600 206.6400 L
  213.3600 206.6400 L
  213.3600 218.6400 L
n
  169.8600 212.6400 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 161.0400 210.0000 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(KEY2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  213.3600 242.6400 m
  126.3600 242.6400 L
  126.3600 230.6400 L
  213.3600 230.6400 L
  213.3600 242.6400 L
n
  169.8600 236.6400 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 159.0000 234.0000 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(STATE\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  183.3600 254.6400 m
  156.3600 254.6400 L
  156.3600 243.7200 L
  183.3600 243.7200 L
  183.3600 254.6400 L
n
  169.8600 249.1800 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 159.9600 246.9600 0 Tp
TP
/_Times-Roman 6.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(128 bits\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0 XR

  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  180.4800 248.7600 m
  180.3600 248.7600 L
  180.2400 248.6400 L
  180.2400 248.6400 L
  180.3600 248.4000 L
  180.3600 248.4000 L
  180.3600 248.5200 L
  180.4800 248.6400 L
  180.4800 248.6400 L
  180.4800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  181.0800 248.7600 m
  180.9600 248.7600 L
  180.8400 248.6400 L
  180.8400 248.5200 L
  180.9600 248.4000 L
  181.0800 248.4000 L
  181.0800 248.5200 L
  181.2000 248.6400 L
  181.2000 248.6400 L
  181.2000 248.7600 L
  181.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  181.9200 248.7600 m
  181.8000 248.7600 L
  181.6800 248.6400 L
  181.6800 248.5200 L
  181.8000 248.4000 L
  181.9200 248.4000 L
  181.9200 248.5200 L
  182.0400 248.6400 L
  182.0400 248.6400 L
  182.0400 248.7600 L
  181.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  182.6400 248.7600 m
  182.5200 248.7600 L
  182.4000 248.6400 L
  182.4000 248.5200 L
  182.5200 248.4000 L
  182.6400 248.4000 L
  182.6400 248.5200 L
  182.7600 248.6400 L
  182.7600 248.6400 L
  182.7600 248.7600 L
  182.6400 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  183.3600 248.7600 m
  183.2400 248.7600 L
  183.1200 248.6400 L
  183.1200 248.5200 L
  183.2400 248.4000 L
  183.3600 248.4000 L
  183.3600 248.5200 L
  183.4800 248.6400 L
  183.4800 248.6400 L
  183.4800 248.7600 L
  183.3600 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  184.0800 248.7600 m
  183.9600 248.7600 L
  183.8400 248.6400 L
  183.8400 248.5200 L
  183.9600 248.4000 L
  184.0800 248.4000 L
  184.0800 248.5200 L
  184.2000 248.6400 L
  184.2000 248.6400 L
  184.2000 248.7600 L
  184.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  184.9200 248.7600 m
  184.8000 248.7600 L
  184.6800 248.6400 L
  184.6800 248.5200 L
  184.8000 248.4000 L
  184.9200 248.4000 L
  184.9200 248.5200 L
  185.0400 248.6400 L
  185.0400 248.6400 L
  185.0400 248.7600 L
  184.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  185.6400 248.7600 m
  185.5200 248.7600 L
  185.4000 248.6400 L
  185.4000 248.5200 L
  185.5200 248.4000 L
  185.6400 248.4000 L
  185.6400 248.5200 L
  185.7600 248.6400 L
  185.7600 248.6400 L
  185.7600 248.7600 L
  185.6400 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  186.3600 248.7600 m
  186.2400 248.7600 L
  186.1200 248.6400 L
  186.1200 248.5200 L
  186.2400 248.4000 L
  186.3600 248.4000 L
  186.3600 248.5200 L
  186.4800 248.6400 L
  186.4800 248.6400 L
  186.4800 248.7600 L
  186.3600 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  187.0800 248.7600 m
  186.9600 248.7600 L
  186.8400 248.6400 L
  186.8400 248.5200 L
  186.9600 248.4000 L
  187.0800 248.4000 L
  187.0800 248.5200 L
  187.2000 248.6400 L
  187.2000 248.6400 L
  187.2000 248.7600 L
  187.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  187.9200 248.7600 m
  187.8000 248.7600 L
  187.6800 248.6400 L
  187.6800 248.5200 L
  187.8000 248.4000 L
  187.9200 248.4000 L
  187.9200 248.5200 L
  188.0400 248.6400 L
  188.0400 248.6400 L
  188.0400 248.7600 L
  187.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  188.6400 248.7600 m
  188.5200 248.7600 L
  188.4000 248.6400 L
  188.4000 248.5200 L
  188.5200 248.4000 L
  188.6400 248.4000 L
  188.6400 248.5200 L
  188.7600 248.6400 L
  188.7600 248.6400 L
  188.7600 248.7600 L
  188.6400 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  189.3600 248.7600 m
  189.2400 248.7600 L
  189.1200 248.6400 L
  189.1200 248.5200 L
  189.2400 248.4000 L
  189.3600 248.4000 L
  189.3600 248.5200 L
  189.4800 248.6400 L
  189.4800 248.6400 L
  189.4800 248.7600 L
  189.3600 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  190.0800 248.7600 m
  189.9600 248.7600 L
  189.8400 248.6400 L
  189.8400 248.5200 L
  189.9600 248.4000 L
  190.0800 248.4000 L
  190.0800 248.5200 L
  190.2000 248.6400 L
  190.2000 248.6400 L
  190.2000 248.7600 L
  190.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  190.9200 248.7600 m
  190.8000 248.7600 L
  190.6800 248.6400 L
  190.6800 248.5200 L
  190.8000 248.4000 L
  190.9200 248.4000 L
  190.9200 248.5200 L
  191.0400 248.6400 L
  191.0400 248.6400 L
  191.0400 248.7600 L
  190.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  191.6400 248.7600 m
  191.5200 248.7600 L
  191.4000 248.6400 L
  191.4000 248.5200 L
  191.5200 248.4000 L
  191.6400 248.4000 L
  191.6400 248.5200 L
  191.7600 248.6400 L
  191.7600 248.6400 L
  191.7600 248.7600 L
  191.6400 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  192.3600 248.7600 m
  192.2400 248.7600 L
  192.1200 248.6400 L
  192.1200 248.5200 L
  192.2400 248.4000 L
  192.3600 248.4000 L
  192.3600 248.5200 L
  192.4800 248.6400 L
  192.4800 248.6400 L
  192.4800 248.7600 L
  192.3600 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  193.0800 248.7600 m
  192.9600 248.7600 L
  192.8400 248.6400 L
  192.8400 248.5200 L
  192.9600 248.4000 L
  193.0800 248.4000 L
  193.0800 248.5200 L
  193.2000 248.6400 L
  193.2000 248.6400 L
  193.2000 248.7600 L
  193.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  193.9200 248.7600 m
  193.8000 248.7600 L
  193.6800 248.6400 L
  193.6800 248.5200 L
  193.8000 248.4000 L
  193.9200 248.4000 L
  193.9200 248.5200 L
  194.0400 248.6400 L
  194.0400 248.6400 L
  194.0400 248.7600 L
  193.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  194.6400 248.7600 m
  194.5200 248.7600 L
  194.4000 248.6400 L
  194.4000 248.5200 L
  194.5200 248.4000 L
  194.6400 248.4000 L
  194.6400 248.5200 L
  194.7600 248.6400 L
  194.7600 248.6400 L
  194.7600 248.7600 L
  194.6400 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  195.3600 248.7600 m
  195.2400 248.7600 L
  195.1200 248.6400 L
  195.1200 248.5200 L
  195.2400 248.4000 L
  195.3600 248.4000 L
  195.3600 248.5200 L
  195.4800 248.6400 L
  195.4800 248.6400 L
  195.4800 248.7600 L
  195.3600 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  196.0800 248.7600 m
  195.9600 248.7600 L
  195.8400 248.6400 L
  195.8400 248.5200 L
  195.9600 248.4000 L
  196.0800 248.4000 L
  196.0800 248.5200 L
  196.2000 248.6400 L
  196.2000 248.6400 L
  196.2000 248.7600 L
  196.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  196.9200 248.7600 m
  196.8000 248.7600 L
  196.6800 248.6400 L
  196.6800 248.5200 L
  196.8000 248.4000 L
  196.9200 248.4000 L
  196.9200 248.5200 L
  197.0400 248.6400 L
  197.0400 248.6400 L
  197.0400 248.7600 L
  196.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  197.6400 248.7600 m
  197.5200 248.7600 L
  197.4000 248.6400 L
  197.4000 248.5200 L
  197.5200 248.4000 L
  197.6400 248.4000 L
  197.6400 248.5200 L
  197.7600 248.6400 L
  197.7600 248.6400 L
  197.7600 248.7600 L
  197.6400 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  198.3600 248.7600 m
  198.2400 248.7600 L
  198.1200 248.6400 L
  198.1200 248.5200 L
  198.2400 248.4000 L
  198.3600 248.4000 L
  198.3600 248.5200 L
  198.4800 248.6400 L
  198.4800 248.6400 L
  198.4800 248.7600 L
  198.3600 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  199.0800 248.7600 m
  198.9600 248.7600 L
  198.8400 248.6400 L
  198.8400 248.5200 L
  198.9600 248.4000 L
  199.0800 248.4000 L
  199.0800 248.5200 L
  199.2000 248.6400 L
  199.2000 248.6400 L
  199.2000 248.7600 L
  199.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  199.9200 248.7600 m
  199.8000 248.7600 L
  199.6800 248.6400 L
  199.6800 248.5200 L
  199.8000 248.4000 L
  199.9200 248.4000 L
  199.9200 248.5200 L
  200.0400 248.6400 L
  200.0400 248.6400 L
  200.0400 248.7600 L
  199.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  200.6400 248.7600 m
  200.5200 248.7600 L
  200.4000 248.6400 L
  200.4000 248.5200 L
  200.5200 248.4000 L
  200.6400 248.4000 L
  200.6400 248.5200 L
  200.7600 248.6400 L
  200.7600 248.6400 L
  200.7600 248.7600 L
  200.6400 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  201.3600 248.7600 m
  201.2400 248.7600 L
  201.1200 248.6400 L
  201.1200 248.5200 L
  201.2400 248.4000 L
  201.3600 248.4000 L
  201.3600 248.5200 L
  201.4800 248.6400 L
  201.4800 248.6400 L
  201.4800 248.7600 L
  201.3600 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  202.0800 248.7600 m
  201.9600 248.7600 L
  201.8400 248.6400 L
  201.8400 248.5200 L
  201.9600 248.4000 L
  202.0800 248.4000 L
  202.0800 248.5200 L
  202.2000 248.6400 L
  202.2000 248.6400 L
  202.2000 248.7600 L
  202.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  202.9200 248.7600 m
  202.8000 248.7600 L
  202.6800 248.6400 L
  202.6800 248.5200 L
  202.8000 248.4000 L
  202.9200 248.4000 L
  202.9200 248.5200 L
  203.0400 248.6400 L
  203.0400 248.6400 L
  203.0400 248.7600 L
  202.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  203.6400 248.7600 m
  203.5200 248.7600 L
  203.4000 248.6400 L
  203.4000 248.5200 L
  203.5200 248.4000 L
  203.6400 248.4000 L
  203.6400 248.5200 L
  203.7600 248.6400 L
  203.7600 248.6400 L
  203.7600 248.7600 L
  203.6400 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  204.3600 248.7600 m
  204.2400 248.7600 L
  204.1200 248.6400 L
  204.1200 248.5200 L
  204.2400 248.4000 L
  204.3600 248.4000 L
  204.3600 248.5200 L
  204.4800 248.6400 L
  204.4800 248.6400 L
  204.4800 248.7600 L
  204.3600 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  205.0800 248.7600 m
  204.9600 248.7600 L
  204.8400 248.6400 L
  204.8400 248.5200 L
  204.9600 248.4000 L
  205.0800 248.4000 L
  205.0800 248.5200 L
  205.2000 248.6400 L
  205.2000 248.6400 L
  205.2000 248.7600 L
  205.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  205.9200 248.7600 m
  205.8000 248.7600 L
  205.6800 248.6400 L
  205.6800 248.5200 L
  205.8000 248.4000 L
  205.9200 248.4000 L
  205.9200 248.5200 L
  206.0400 248.6400 L
  206.0400 248.6400 L
  206.0400 248.7600 L
  205.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  206.6400 248.7600 m
  206.5200 248.7600 L
  206.4000 248.6400 L
  206.4000 248.5200 L
  206.5200 248.4000 L
  206.6400 248.4000 L
  206.6400 248.5200 L
  206.7600 248.6400 L
  206.7600 248.6400 L
  206.7600 248.7600 L
  206.6400 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  207.3600 248.7600 m
  207.2400 248.7600 L
  207.1200 248.6400 L
  207.1200 248.5200 L
  207.2400 248.4000 L
  207.3600 248.4000 L
  207.3600 248.5200 L
  207.4800 248.6400 L
  207.4800 248.6400 L
  207.4800 248.7600 L
  207.3600 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  208.0800 248.7600 m
  207.9600 248.7600 L
  207.8400 248.6400 L
  207.8400 248.5200 L
  207.9600 248.4000 L
  208.0800 248.4000 L
  208.0800 248.5200 L
  208.2000 248.6400 L
  208.2000 248.6400 L
  208.2000 248.7600 L
  208.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  208.9200 248.7600 m
  208.8000 248.7600 L
  208.6800 248.6400 L
  208.6800 248.5200 L
  208.8000 248.4000 L
  208.9200 248.4000 L
  208.9200 248.5200 L
  209.0400 248.6400 L
  209.0400 248.6400 L
  209.0400 248.7600 L
  208.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  209.6400 248.7600 m
  209.5200 248.7600 L
  209.4000 248.6400 L
  209.4000 248.5200 L
  209.5200 248.4000 L
  209.6400 248.4000 L
  209.6400 248.5200 L
  209.7600 248.6400 L
  209.7600 248.6400 L
  209.7600 248.7600 L
  209.6400 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  210.3600 248.7600 m
  210.2400 248.7600 L
  210.1200 248.6400 L
  210.1200 248.5200 L
  210.2400 248.4000 L
  210.3600 248.4000 L
  210.3600 248.5200 L
  210.4800 248.6400 L
  210.4800 248.6400 L
  210.4800 248.7600 L
  210.3600 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  211.0800 248.7600 m
  210.9600 248.7600 L
  210.8400 248.6400 L
  210.8400 248.5200 L
  210.9600 248.4000 L
  211.0800 248.4000 L
  211.0800 248.5200 L
  211.2000 248.6400 L
  211.2000 248.6400 L
  211.2000 248.7600 L
  211.0800 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  211.9200 248.7600 m
  211.8000 248.7600 L
  211.6800 248.6400 L
  211.6800 248.5200 L
  211.8000 248.4000 L
  211.9200 248.4000 L
  211.9200 248.5200 L
  212.0400 248.6400 L
  212.0400 248.6400 L
  212.0400 248.7600 L
  211.9200 248.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  212.6400 248.7600 m
  212.5200 248.7600 L
  212.4000 248.6400 L
  212.4000 248.5200 L
  212.5200 248.4000 L
  212.6400 248.4000 L
  212.6400 248.5200 L
  212.7600 248.6400 L
  212.7600 248.6400 L
  212.7600 248.7600 L
  212.6400 248.7600 L
F
U
u
1 XR

  0.000 0.000 0.000 1.000 k
  212.5200 246.6000 m
  216.3600 248.6400 L
  212.5200 250.5600 L
  212.5200 246.6000 L
F
U
u
0 XR

  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
  153.4800 248.4000 m
  153.4800 248.6400 L
  153.4800 248.6400 L
  153.3600 248.7600 L
  153.3600 248.7600 L
  153.2400 248.7600 L
  153.1200 248.6400 L
  153.1200 248.5200 L
  153.2400 248.4000 L
  153.3600 248.4000 L
  153.4800 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  152.7600 248.4000 m
  152.7600 248.6400 L
  152.7600 248.6400 L
  152.6400 248.7600 L
  152.6400 248.7600 L
  152.5200 248.7600 L
  152.4000 248.6400 L
  152.4000 248.5200 L
  152.5200 248.4000 L
  152.6400 248.4000 L
  152.7600 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  152.0400 248.4000 m
  152.0400 248.6400 L
  152.0400 248.6400 L
  151.9200 248.7600 L
  151.9200 248.7600 L
  151.8000 248.7600 L
  151.6800 248.6400 L
  151.6800 248.5200 L
  151.8000 248.4000 L
  151.9200 248.4000 L
  152.0400 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  151.2000 248.4000 m
  151.2000 248.6400 L
  151.2000 248.6400 L
  151.0800 248.7600 L
  151.0800 248.7600 L
  150.9600 248.7600 L
  150.8400 248.6400 L
  150.8400 248.5200 L
  150.9600 248.4000 L
  151.0800 248.4000 L
  151.2000 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  150.4800 248.4000 m
  150.4800 248.6400 L
  150.4800 248.6400 L
  150.3600 248.7600 L
  150.3600 248.7600 L
  150.2400 248.7600 L
  150.1200 248.6400 L
  150.1200 248.5200 L
  150.2400 248.4000 L
  150.3600 248.4000 L
  150.4800 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  149.7600 248.4000 m
  149.7600 248.6400 L
  149.7600 248.6400 L
  149.6400 248.7600 L
  149.6400 248.7600 L
  149.5200 248.7600 L
  149.4000 248.6400 L
  149.4000 248.5200 L
  149.5200 248.4000 L
  149.6400 248.4000 L
  149.7600 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  149.0400 248.4000 m
  149.0400 248.6400 L
  149.0400 248.6400 L
  148.9200 248.7600 L
  148.9200 248.7600 L
  148.8000 248.7600 L
  148.6800 248.6400 L
  148.6800 248.5200 L
  148.8000 248.4000 L
  148.9200 248.4000 L
  149.0400 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  148.2000 248.4000 m
  148.2000 248.6400 L
  148.2000 248.6400 L
  148.0800 248.7600 L
  148.0800 248.7600 L
  147.9600 248.7600 L
  147.8400 248.6400 L
  147.8400 248.5200 L
  147.9600 248.4000 L
  148.0800 248.4000 L
  148.2000 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  147.4800 248.4000 m
  147.4800 248.6400 L
  147.4800 248.6400 L
  147.3600 248.7600 L
  147.3600 248.7600 L
  147.2400 248.7600 L
  147.1200 248.6400 L
  147.1200 248.5200 L
  147.2400 248.4000 L
  147.3600 248.4000 L
  147.4800 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  146.7600 248.4000 m
  146.7600 248.6400 L
  146.7600 248.6400 L
  146.6400 248.7600 L
  146.6400 248.7600 L
  146.5200 248.7600 L
  146.4000 248.6400 L
  146.4000 248.5200 L
  146.5200 248.4000 L
  146.6400 248.4000 L
  146.7600 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  146.0400 248.4000 m
  146.0400 248.6400 L
  146.0400 248.6400 L
  145.9200 248.7600 L
  145.9200 248.7600 L
  145.8000 248.7600 L
  145.6800 248.6400 L
  145.6800 248.5200 L
  145.8000 248.4000 L
  145.9200 248.4000 L
  146.0400 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  145.2000 248.4000 m
  145.2000 248.6400 L
  145.2000 248.6400 L
  145.0800 248.7600 L
  145.0800 248.7600 L
  144.9600 248.7600 L
  144.8400 248.6400 L
  144.8400 248.5200 L
  144.9600 248.4000 L
  145.0800 248.4000 L
  145.2000 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  144.4800 248.4000 m
  144.4800 248.6400 L
  144.4800 248.6400 L
  144.3600 248.7600 L
  144.3600 248.7600 L
  144.2400 248.7600 L
  144.1200 248.6400 L
  144.1200 248.5200 L
  144.2400 248.4000 L
  144.3600 248.4000 L
  144.4800 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  143.7600 248.4000 m
  143.7600 248.6400 L
  143.7600 248.6400 L
  143.6400 248.7600 L
  143.6400 248.7600 L
  143.5200 248.7600 L
  143.4000 248.6400 L
  143.4000 248.5200 L
  143.5200 248.4000 L
  143.6400 248.4000 L
  143.7600 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  143.0400 248.4000 m
  143.0400 248.6400 L
  143.0400 248.6400 L
  142.9200 248.7600 L
  142.9200 248.7600 L
  142.8000 248.7600 L
  142.6800 248.6400 L
  142.6800 248.5200 L
  142.8000 248.4000 L
  142.9200 248.4000 L
  143.0400 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  142.2000 248.4000 m
  142.2000 248.6400 L
  142.2000 248.6400 L
  142.0800 248.7600 L
  142.0800 248.7600 L
  141.9600 248.7600 L
  141.8400 248.6400 L
  141.8400 248.5200 L
  141.9600 248.4000 L
  142.0800 248.4000 L
  142.2000 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  141.4800 248.4000 m
  141.4800 248.6400 L
  141.4800 248.6400 L
  141.3600 248.7600 L
  141.3600 248.7600 L
  141.2400 248.7600 L
  141.1200 248.6400 L
  141.1200 248.5200 L
  141.2400 248.4000 L
  141.3600 248.4000 L
  141.4800 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  140.7600 248.4000 m
  140.7600 248.6400 L
  140.7600 248.6400 L
  140.6400 248.7600 L
  140.6400 248.7600 L
  140.5200 248.7600 L
  140.4000 248.6400 L
  140.4000 248.5200 L
  140.5200 248.4000 L
  140.6400 248.4000 L
  140.7600 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  140.0400 248.4000 m
  140.0400 248.6400 L
  140.0400 248.6400 L
  139.9200 248.7600 L
  139.9200 248.7600 L
  139.8000 248.7600 L
  139.6800 248.6400 L
  139.6800 248.5200 L
  139.8000 248.4000 L
  139.9200 248.4000 L
  140.0400 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  139.2000 248.4000 m
  139.2000 248.6400 L
  139.2000 248.6400 L
  139.0800 248.7600 L
  139.0800 248.7600 L
  138.9600 248.7600 L
  138.8400 248.6400 L
  138.8400 248.5200 L
  138.9600 248.4000 L
  139.0800 248.4000 L
  139.2000 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  138.4800 248.4000 m
  138.4800 248.6400 L
  138.4800 248.6400 L
  138.3600 248.7600 L
  138.3600 248.7600 L
  138.2400 248.7600 L
  138.1200 248.6400 L
  138.1200 248.5200 L
  138.2400 248.4000 L
  138.3600 248.4000 L
  138.4800 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  137.7600 248.4000 m
  137.7600 248.6400 L
  137.7600 248.6400 L
  137.6400 248.7600 L
  137.6400 248.7600 L
  137.5200 248.7600 L
  137.4000 248.6400 L
  137.4000 248.5200 L
  137.5200 248.4000 L
  137.6400 248.4000 L
  137.7600 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  137.0400 248.4000 m
  137.0400 248.6400 L
  137.0400 248.6400 L
  136.9200 248.7600 L
  136.9200 248.7600 L
  136.8000 248.7600 L
  136.6800 248.6400 L
  136.6800 248.5200 L
  136.8000 248.4000 L
  136.9200 248.4000 L
  137.0400 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  136.2000 248.4000 m
  136.2000 248.6400 L
  136.2000 248.6400 L
  136.0800 248.7600 L
  136.0800 248.7600 L
  135.9600 248.7600 L
  135.8400 248.6400 L
  135.8400 248.5200 L
  135.9600 248.4000 L
  136.0800 248.4000 L
  136.2000 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  135.4800 248.4000 m
  135.4800 248.6400 L
  135.4800 248.6400 L
  135.3600 248.7600 L
  135.3600 248.7600 L
  135.2400 248.7600 L
  135.1200 248.6400 L
  135.1200 248.5200 L
  135.2400 248.4000 L
  135.3600 248.4000 L
  135.4800 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  134.7600 248.4000 m
  134.7600 248.6400 L
  134.7600 248.6400 L
  134.6400 248.7600 L
  134.6400 248.7600 L
  134.5200 248.7600 L
  134.4000 248.6400 L
  134.4000 248.5200 L
  134.5200 248.4000 L
  134.6400 248.4000 L
  134.7600 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  134.0400 248.4000 m
  134.0400 248.6400 L
  134.0400 248.6400 L
  133.9200 248.7600 L
  133.9200 248.7600 L
  133.8000 248.7600 L
  133.6800 248.6400 L
  133.6800 248.5200 L
  133.8000 248.4000 L
  133.9200 248.4000 L
  134.0400 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  133.2000 248.4000 m
  133.2000 248.6400 L
  133.2000 248.6400 L
  133.0800 248.7600 L
  133.0800 248.7600 L
  132.9600 248.7600 L
  132.8400 248.6400 L
  132.8400 248.5200 L
  132.9600 248.4000 L
  133.0800 248.4000 L
  133.2000 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  132.4800 248.4000 m
  132.4800 248.6400 L
  132.4800 248.6400 L
  132.3600 248.7600 L
  132.3600 248.7600 L
  132.2400 248.7600 L
  132.1200 248.6400 L
  132.1200 248.5200 L
  132.2400 248.4000 L
  132.3600 248.4000 L
  132.4800 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  131.7600 248.4000 m
  131.7600 248.6400 L
  131.7600 248.6400 L
  131.6400 248.7600 L
  131.6400 248.7600 L
  131.5200 248.7600 L
  131.4000 248.6400 L
  131.4000 248.5200 L
  131.5200 248.4000 L
  131.6400 248.4000 L
  131.7600 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  131.0400 248.4000 m
  131.0400 248.6400 L
  131.0400 248.6400 L
  130.9200 248.7600 L
  130.9200 248.7600 L
  130.8000 248.7600 L
  130.6800 248.6400 L
  130.6800 248.5200 L
  130.8000 248.4000 L
  130.9200 248.4000 L
  131.0400 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  130.2000 248.4000 m
  130.2000 248.6400 L
  130.2000 248.6400 L
  130.0800 248.7600 L
  130.0800 248.7600 L
  129.9600 248.7600 L
  129.8400 248.6400 L
  129.8400 248.5200 L
  129.9600 248.4000 L
  130.0800 248.4000 L
  130.2000 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  129.4800 248.4000 m
  129.4800 248.6400 L
  129.4800 248.6400 L
  129.3600 248.7600 L
  129.3600 248.7600 L
  129.2400 248.7600 L
  129.1200 248.6400 L
  129.1200 248.5200 L
  129.2400 248.4000 L
  129.3600 248.4000 L
  129.4800 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  128.7600 248.4000 m
  128.7600 248.6400 L
  128.7600 248.6400 L
  128.6400 248.7600 L
  128.6400 248.7600 L
  128.5200 248.7600 L
  128.4000 248.6400 L
  128.4000 248.5200 L
  128.5200 248.4000 L
  128.6400 248.4000 L
  128.7600 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  128.0400 248.4000 m
  128.0400 248.6400 L
  128.0400 248.6400 L
  127.9200 248.7600 L
  127.9200 248.7600 L
  127.8000 248.7600 L
  127.6800 248.6400 L
  127.6800 248.5200 L
  127.8000 248.4000 L
  127.9200 248.4000 L
  128.0400 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  127.2000 248.4000 m
  127.2000 248.6400 L
  127.2000 248.6400 L
  127.0800 248.7600 L
  127.0800 248.7600 L
  126.9600 248.7600 L
  126.8400 248.6400 L
  126.8400 248.5200 L
  126.9600 248.4000 L
  127.0800 248.4000 L
  127.2000 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  126.4800 248.4000 m
  126.4800 248.6400 L
  126.4800 248.6400 L
  126.3600 248.7600 L
  126.3600 248.7600 L
  126.2400 248.7600 L
  126.1200 248.6400 L
  126.1200 248.5200 L
  126.2400 248.4000 L
  126.3600 248.4000 L
  126.4800 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  125.7600 248.4000 m
  125.7600 248.6400 L
  125.7600 248.6400 L
  125.6400 248.7600 L
  125.6400 248.7600 L
  125.5200 248.7600 L
  125.4000 248.6400 L
  125.4000 248.5200 L
  125.5200 248.4000 L
  125.6400 248.4000 L
  125.7600 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  125.0400 248.4000 m
  125.0400 248.6400 L
  125.0400 248.6400 L
  124.9200 248.7600 L
  124.9200 248.7600 L
  124.8000 248.7600 L
  124.6800 248.6400 L
  124.6800 248.5200 L
  124.8000 248.4000 L
  124.9200 248.4000 L
  125.0400 248.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  124.2000 248.4000 m
  124.2000 248.6400 L
  124.2000 248.6400 L
  124.0800 248.7600 L
  124.0800 248.7600 L
  123.9600 248.7600 L
  123.8400 248.6400 L
  123.8400 248.5200 L
  123.9600 248.4000 L
  124.0800 248.4000 L
  124.2000 248.4000 L
F
U
u
1 XR

  0.000 0.000 0.000 1.000 k
  124.2000 250.6800 m
  120.3600 248.6400 L
  124.2000 246.7200 L
  124.2000 250.6800 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  120.3600 230.6400 m
  216.3600 230.6400 L
S
U
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
u
  213.3600 230.6400 m
  126.3600 230.6400 L
  126.3600 218.6400 L
  213.3600 218.6400 L
  213.3600 230.6400 L
n
  169.8600 224.6400 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 161.0400 222.0000 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(KEY1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  273.3600 152.6400 m
  252.3600 152.6400 L
  252.3600 141.7200 L
  273.3600 141.7200 L
  273.3600 152.6400 L
n
  262.8600 147.1800 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 255.9600 144.9600 0 Tp
TP
/_Times-Roman 6.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(8 bits\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  300.3600 83.6400 m
  228.3600 83.6400 L
  228.3600 46.4400 L
  300.3600 46.4400 L
  300.3600 83.6400 L
n
  264.3600 65.0400 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 231.9600 75.0000 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(EXOR\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 231.9600 62.5200 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(AND\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 231.9600 49.9200 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(MULT in GF\(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 275.5200 51.8400 0 Tp
TP
/_Times-Roman 4.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(128 \r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 283.4400 49.9200 0 Tp
TP
/_Times-Roman 7.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
q
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  0.000 0.000 0.000 0.000 k
*u
  0.3600 269.6400 m
  359.6400 269.6400 L
  359.6400 0.3600 L
  0.3600 0.3600 L
  0.3600 269.6400 L
  0.3600 269.6400 L
h W
n
  180.0000 135.0000 m
h W
n
*U
Q
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF%%EndDocument @endspecial 183 x Fq(Figure)35 b(1:)54 b(Example)35b(of)h(the)g(coppro)r(cessor's)d(arc)n(hitec-)0 1673y(ture.)0 1941 y(stored)25 b(on)h(the)g(copro)r(cessors)d(registers)h(but)i(that)g(op)r(era-)0 2041 y(tions)j(on)g(these)h(registers)d(are)h(m)n(uc)n(h)i(less)e(e\016cien)n(t)i(than)0 2141 y(on)23b(the)g(standard)e(CPU)i(in)n(ternal)f(registers,)g(b)r(ecause)h(the)02240 y(data)h(stored)g(in)h(those)f(registers)f(ha)n(v)n(e)h(to)g(b)r(e)h(transferred)0 2340 y(to)40 b(the)h(CPU)f(through)f(some)h(external)f(bus,)44 b(as)39 b(these)0 2440 y(data)27b(are)g(usually)g(organized)f(as)h(a)g(so)g(called)g(XRAM.)02874 y Fr(3)112 b(Description)55 b(of)j(the)f(Adv)-6b(anced)58 b(En-)168 2990 y(cryption)37 b(Standard)03308 y Fq(In)23 b(this)g(section)f(w)n(e)h(brie\015y)f(describ)r(e)h(the)g(Adv)-5 b(anced)23 b(En-)0 3407 y(cryption)33 b(Standard)f(\(AES\).)i(F)-7 b(or)33 b(a)g(more)f(detailed)h(de-)03507 y(scription)27 b(w)n(e)g(refer)g(to)h([DR2].)0 3706y(AES)51 b(encrypts)g(plain)n(texts)h(consisting)e(of)iFi(lb)e Fq(b)n(ytes,)0 3806 y(where)23 b Fi(lb)f Fq(=)h(16)pFn(;)14 b Fq(24,)22 b(or)g(32.)34 b(The)24 b(plain)n(text)f(is)g(organized)0 3906 y(as)k(a)h(\(4)18 b Fp(\002)g Fi(Nb)pFq(\))28 b(arra)n(y)d(\()p Fn(a)788 3918 y Fl(ij)8473906 y Fq(\),)j(0)c Fp(\024)f Fn(i)g(<)g Fq(4)p Fn(;)14b Fq(0)23 b Fp(\024)g Fn(j)28 b(<)23 b Fi(Nb)18 b Fp(\000)gFq(1,)0 4005 y(where)36 b Fi(Nb)i Fq(=)f(4)p Fn(;)14b Fq(6)p Fn(;)g Fq(8,)38 b(dep)r(ending)f(on)f(the)i(v)-5b(alue)36 b(of)h Fi(lb)o Fq(.)0 4105 y(The)27 b Fn(n)pFq(-th)h(b)n(yte)f(of)g(the)h(plain)n(text)f(is)g(stored)f(in)i(b)n(yte)f Fn(a)1782 4117 y Fl(i;j)0 4204 y Fq(with)h Fn(i)23b Fq(=)f Fn(n)56 b Fq(mo)r(d)27 b(4,)h Fn(j)g Fq(=)22b Fp(b)909 4172 y Fl(n)p 909 4186 42 4 v 913 4233 a Fk(4)9604204 y Fp(c)p Fq(.)0 4404 y(AES)39 b(uses)f(a)g(secret)g(k)n(ey)-7b(,)41 b(called)d Fh(cipher)k(key)p Fq(,)g(consist-)04503 y(ing)f(of)g Fi(lk)g Fq(b)n(ytes,)j(where)d Fi(lk)kFq(=)g(16)p Fn(;)14 b Fq(24)p Fn(;)40 b Fq(or)g(32.)77b(An)n(y)0 4603 y(com)n(bination)37 b(of)g(v)-5 b(alues)38b Fi(lb)f Fq(and)g Fi(lk)g Fq(is)g(allo)n(w)n(ed.)66b(The)0 4703 y(cipher)46 b(k)n(ey)f(is)h(organized)f(in)h(a)g(4)30b Fp(\002)h Fi(Nk)45 b Fq(arra)n(y)f(\()p Fn(k)1746 4715y Fl(ij)1805 4703 y Fq(\),)0 4802 y(0)f Fp(\024)g Fn(i)g(<)gFq(4)p Fn(;)14 b Fq(0)43 b Fp(\024)g Fn(j)48 b Fp(\024)43b Fi(Nk)26 b Fp(\000)g Fq(1,)43 b(where)c Fi(Nk)k Fq(=)g(4)pFn(;)14 b Fq(6)p Fn(;)g Fq(8,)0 4902 y(dep)r(ending)28b(on)g(the)g(v)-5 b(alue)27 b(of)h Fi(lk)o Fq(.)38 b(The)28b Fn(n)p Fq(-th)f(k)n(ey)h(b)n(yte)f(is)0 5001 y(stored)g(in)h(b)n(yte)f Fn(k)574 5013 y Fl(ij)660 5001 y Fq(with)i Fn(i)22b Fq(=)h Fn(n)55 b Fq(mo)r(d)28 b(4,)f Fn(j)h Fq(=)23b Fp(b)1570 4969 y Fl(n)p 1570 4983 V 1574 5030 a Fk(4)16215001 y Fp(c)p Fq(.)0 5201 y(The)71 b(AES)h(encryption)f(pro)r(cess)f(is)h(comp)r(osed)g(of)0 5300 y Fh(r)l(ounds)p Fq(.)193b(Except)79 b(for)g(the)h(last)g(round,)92 b(eac)n(h)05400 y(round)75 b(consists)g(of)h(four)f(transformations)e(called)201083 y Fi(ByteSub)m Fn(;)14 b Fi(ShiftRow)m Fn(;)g Fi(MixColumn)lFq(,)42 b(and)c Fi(AddRoundKey)l Fq(.)2010 183 y(In)32b(the)h(last)e(round)h(the)g(transformation)f Fi(MixColumn)dFq(is)2010 282 y(omitted.)35 b(The)22 b(four)f(transformations)e(op)r(erate)i(on)g(in)n(ter-)2010 382 y(mediate)j(results,)g(called)gFh(states)p Fq(.)35 b(A)24 b(state)g(is)g(a)f(4)11 bFp(\002)g Fi(Nb)22 b Fq(ar-)2010 482 y(ra)n(y)h(\()pFn(a)2226 494 y Fl(ij)2285 482 y Fq(\))h(of)h(b)n(ytes.)35b(Initially)-7 b(,)26 b(the)e(state)h(is)f(giv)n(en)g(b)n(y)g(the)2010581 y(plain)n(text)35 b(to)f(b)r(e)i(encrypted.)58 b(The)35b(n)n(um)n(b)r(er)f(of)h(rounds)2010 681 y Fi(Nr)f Fq(is)g(10)pFn(;)14 b Fq(12,)35 b(or)e(14,)j(dep)r(ending)f(on)f(max)pFp(f)p Fi(Nb)n Fn(;)14 b Fi(Nk)o Fp(g)p Fq(.)58 b(In)2010780 y(addition)41 b(to)g(the)g(transformations)e(p)r(erformed)h(in)i(the)2010 880 y Fi(Nr)33 b Fq(rounds)f(there)i(is)f(an)gFi(AddRoundKey)c Fq(applied)k(to)h(the)2010 980 y(plain)n(text)e(prior)e(to)i(the)g(\014rst)f(round.)49 b(W)-7 b(e)32 b(call)g(this)g(the)20101079 y Fh(initial)f Fi(AddRoundKey)-5 b Fq(.)2010 1279y(Next,)31 b(w)n(e)e(are)g(going)f(to)i(describ)r(e)f(the)h(transformations)2010 1378 y(used)24 b(in)h(the)f(AES)g(encryption)g(pro)r(cess.)35 b(W)-7 b(e)24 b(b)r(egin)h(with)20101478 y Fi(AddRoundKey)-5 b Fq(.)2010 1847 y Fo(The)28b(transformation)f Fi(AddRoundKey)78 b Fq(The)24 b(input)h(to)20101947 y(the)19 b(transformation)f Fi(AddRoundKey)c Fq(is)19b(a)f(state)h(\()p Fn(a)3606 1959 y Fl(ij)3665 1947 yFq(\),)i(0)h Fp(\024)2010 2046 y Fn(i)h(<)f Fq(4)p Fn(;)14b Fq(0)22 b Fp(\024)h Fn(j)28 b(<)23 b Fi(Nb)o Fq(,)e(and)f(a)fFh(r)l(ound)k(key)p Fq(,)f(whic)n(h)e(is)g(an)f(arra)n(y)20102146 y(of)30 b(b)n(ytes)g(\()p Fi(rk)2446 2158 y Fl(ij)25052146 y Fq(\),)h(0)c Fp(\024)g Fn(i)g(<)g Fq(4)p Fn(;)14b Fq(0)26 b Fp(\024)h Fn(j)32 b(<)27 b Fi(Nb)p Fq(.)44b(The)31 b(output)2010 2245 y(of)24 b Fi(AddRoundKey)cFq(is)25 b(the)f(state)h(\()p Fn(b)3094 2257 y Fl(ij)31522245 y Fq(\))p Fn(;)14 b Fq(0)23 b Fp(\024)g Fn(i)f(<)hFq(4)p Fn(;)14 b Fq(0)22 b Fp(\024)g Fn(j)28 b(<)20102345 y Fi(Nb)o Fq(,)g(where)2651 2482 y Fn(b)2687 2494y Fl(ij)2768 2482 y Fq(=)23 b Fn(a)2900 2494 y Fl(ij)29772482 y Fp(\010)18 b Fi(rk)3147 2494 y Fl(ij)3206 2482y Fn(:)2010 2669 y Fq(The)23 b(round)g(k)n(eys)f(are)g(obtained)h(from)g(the)h(cipher)f(k)n(ey)f(b)n(y)2010 2769 y(expanding)31b(the)i(cipher)e(k)n(ey)g(arra)n(y)f(\()p Fn(k)3265 2781y Fl(ij)3324 2769 y Fq(\))i(in)n(to)g(an)f(arra)n(y)20102868 y(\()p Fn(k)2085 2880 y Fl(ij)2144 2868 y Fq(\),)26b(0)d Fp(\024)g Fn(i)f(<)h Fq(4)p Fn(;)14 b Fq(0)22 bFp(\024)h Fn(j)28 b Fp(\024)22 b Fi(Nr)14 b Fp(\001)hFi(Nb)o Fq(,)26 b(called)f(the)h Fh(exp)l(ande)l(d)20102968 y(key)p Fq(.)73 b(The)39 b(round)g(k)n(ey)f(for)h(the)h(initial)f(application)g(of)2010 3068 y Fi(AddRoundKey)20 b Fq(is)25b(giv)n(en)f(b)n(y)h(the)g(\014rst)f Fi(Nb)g Fq(columns)h(of)g(the)20103167 y(expanded)36 b(k)n(ey)-7 b(.)64 b(The)36 b(round)h(k)n(ey)f(for)g(the)h(application)2010 3267 y(of)29 b Fi(AddRoundKey)24b Fq(in)30 b(the)f Fn(m)p Fq(-th)g(round)f(of)h(AES)g(is)g(giv)n(en)2010 3366 y(b)n(y)24 b(columns)g Fn(m)p Fi(Nb)o Fn(;)14b(:)g(:)g(:)g(;)g Fq(\()p Fn(m)e Fq(+)g(1\))p Fi(Nb)eFp(\000)i Fq(1)23 b(of)i(the)f(expanded)2010 3466 y(k)n(ey)-7b(,)27 b(1)c Fp(\024)f Fn(m)h Fp(\024)g Fi(Nr)o Fq(.)20103835 y Fo(The)69 b(transformation)g Fi(ByteSub)80 b Fq(Giv)n(en)60b(a)f(state)2010 3935 y(\()p Fn(a)2086 3947 y Fl(ij)21453935 y Fq(\),)39 b(0)e Fp(\024)h Fn(i)g(<)f Fq(4)p Fn(;)14b Fq(0)37 b Fp(\024)h Fn(j)43 b(<)38 b Fi(Nb)o Fq(,)h(the)e(transformation)2010 4035 y Fi(ByteSub)19 b Fq(applies)j(an)f(in)n(v)n(ertible)g(function)i Fn(S)28 b Fq(:)23 b Fp(f)p Fq(0)pFn(;)14 b Fq(1)p Fp(g)3729 4004 y Fk(8)3787 4035 y Fp(!)20104134 y(f)p Fq(0)p Fn(;)g Fq(1)p Fp(g)2215 4104 y Fk(8)22784134 y Fq(to)28 b(eac)n(h)f(state)h(b)n(yte)g Fn(a)30004146 y Fl(ij)3086 4134 y Fq(separately)-7 b(.)37 b(The)28b(exact)2010 4234 y(nature)k(of)h Fn(S)38 b Fq(is)33b(of)g(no)g(relev)-5 b(ance)32 b(for)g(the)h(implemen)n(ta-)20104333 y(tion)23 b(describ)r(ed)f(later.)35 b(W)-7 b(e)23b(just)h(men)n(tion)e(that)h Fn(S)28 b Fq(is)23 b(non-)20104433 y(linear,)30 b(and)h(in)g(fact,)g(it)g(is)f(the)h(only)f(non-linear)f(part)h(of)2010 4533 y(the)e(AES)g(encryption)f(pro)r(cess.)35 b(In)28 b(practice,)f Fn(S)32 b Fq(is)c(often)20104632 y(realized)f(b)n(y)g(a)g(substitution)h(table)g(or)fFh(S-b)l(ox)p Fq(.)2010 5001 y Fo(The)h(transformation)eFi(ShiftRow)80 b Fq(The)24 b(transforma-)2010 5101 y(tion)34b Fi(ShiftRow)c Fq(cyclically)j(shifts)h(eac)n(h)e(ro)n(w)h(of)g(a)g(state)2010 5201 y(\()p Fn(a)2086 5213 y Fl(ij)2145 5201y Fq(\))j(separately)f(to)h(the)g(left.)64 b(Ro)n(w)35b(0)h(is)g(not)g(shifted.)2010 5300 y(Ro)n(ws)27 b(1)pFn(;)14 b Fq(2)p Fn(;)g Fq(3)27 b(are)h(shifted)h(b)n(y)fFn(C)3044 5312 y Fk(1)3081 5300 y Fn(;)14 b(C)3177 5312y Fk(2)3215 5300 y Fn(;)g(C)3311 5312 y Fk(3)3377 5300y Fq(b)n(ytes,)28 b(resp)r(ec-)2010 5400 y(tiv)n(ely)-7b(,)27 b(where)h(the)g(v)-5 b(alues)27 b(of)g(the)h Fn(C)31815412 y Fl(i)3237 5400 y Fq(dep)r(end)g(on)f Fi(Nb)p Fq(.)peop%%Page: 4 44 3 bop 0 83 a Fo(The)51 b(transformation)f Fi(MixColumn)80b Fq(The)44 b(transfor-)0 183 y(mation)72 b Fi(MixColumn)cFq(is)j(crucial)g(to)h(the)g(kind)g(of)0 282 y(our)45b(sp)r(ecial)g(implemen)n(tation.)91 b(The)46 b(transformation)0382 y Fi(MixColumn)21 b Fq(op)r(erates)i(on)i(the)g(columns)f(of)g(a)h(state)f(sepa-)0 482 y(rately)-7 b(.)61 b(T)-7 b(o)35b(eac)n(h)g(column)h(a)f(\014xed)h(linear)f(transforma-)0581 y(tion)44 b(is)f(applied.)86 b(T)-7 b(o)43 b(do)g(so,)k(b)n(ytes)d(are)f(in)n(terpreted)0 681 y(as)c(elemen)n(ts)h(in)g(the)g(\014eld)gFm(F)967 696 y Fk(2)1000 679 y Fg(8)1043 681 y Fq(.)73b(As)40 b(is)g(usually)f(done,)0 780 y(w)n(e)h(will)g(denote)g(elemen)n(ts)g(in)g(this)g(\014eld)h(in)f(hexadeci-)0 880 y(mal)d(notation.)66b(Hence)37 b(01)p Fn(;)14 b Fq(02)36 b(and)h(03)f(corresp)r(ond)g(to)0980 y(the)47 b(b)n(ytes)g(00000001)p Fn(;)14 b Fq(000000)o(10)o(,)46b(and)h(00000011,)h(re-)0 1079 y(sp)r(ectiv)n(ely)-7b(.)54 b(No)n(w)32 b Fi(MixColumn)e Fq(applies)j(to)g(eac)n(h)f(ro)n(w)g(of)0 1179 y(a)25 b(state)h(the)g(linear)f(transformation)f(de\014ned)j(b)n(y)e(the)h(fol-)0 1279 y(lo)n(wing)h(matrix)4411392 y Ff(2)441 1538 y(6)441 1588 y(6)441 1641 y(4)5381459 y Fq(02)82 b(03)g(01)g(01)538 1558 y(01)g(02)g(03)g(01)5381658 y(01)g(01)g(02)g(03)538 1757 y(03)g(01)g(01)g(02)11611392 y Ff(3)1161 1538 y(7)1161 1588 y(7)1161 1641 y(5)12301609 y Fn(:)501 b Fq(\(1\))0 1939 y(One)31 b(complete)h(round)e(of)i(the)g(AES)f(encryption)g(pro)r(ce-)0 2039 y(dure)c(is)h(sc)n(hematically)e(sho)n(wn)h(in)h(\014gure)f(2.)0 3222 y@beginspecial 0 @llx 0 @lly 421 @urx 241 @ury 2232 @rwi@setspecial%%BeginDocument: Rijndael.eps%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: D:\Research\own Papers\AES on Crypto2000\final version\Rijndael.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 421 241
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 421 241
%AI3_TileBox: 0 0 421 241
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

%AI5_File:
%AI5_BeginRaster
[ 0.7500 0.0000 0.0000 -0.7500 0.3600 0.3600 ] 0 0 560 320 560 320 1 1 0 0 0 0
XI
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000E00038000E00
%03FFFFFFFFFF0001C00070001C0007FFFFFFFFFE00038000E00038000FFF
%FFFFFFFC00070001C00070001FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFBFFEEFFFBBFFEEFFFBFFFFFFFFFF7FFDDFFF77FFDDFFF7FFFFFFFFFE
%FFFBBFFEEFFFBBFFEFFFFFFFFFFDFFF77FFDDFFF77FFDFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFBFFEEFFFBBFFEEFFFBFFFFFFFFFF7FFDDFFF
%77FFDDFFF7FFFFFFFFFEFFFBBFFEEFFFBBFFEFFFFFFFFFFDFFF77FFDDFFF
%77FFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFEEFFFBBFFEEFF
%FBFFFFFFFFFF7FFDDFFF77FFDDFFF7FFFFFFFFFEFFFBBFFEEFFFBBFFEFFF
%FFFFFFFDFFF77FFDDFFF77FFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFBFFEEFFFBBFFEEFFFBFFFFFFFFFF7FFDDFFF77FFDDFFF7FFFFFFFFFE
%FFFBBFFEEFFFBBFFEFFFFFFFFFFDFFF77FFDDFFF77FFDFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFF8000E00038000E0003FFFFFFFFFF0001C000
%70001C0007FFFFFFFFFE00038000E00038000FFFFFFFFFFC00070001C000
%70001FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFF
%FFFFFFFFFBFFFEFFFFBFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBFFFEFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBF
%FFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFF
%FFFFFFFFFBFFFEFFFFBFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBFFFEFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBF
%FFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFF
%FFFFFFFFFBFFFEFFFFBFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBFFFEFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFBFFFEFFFEFFFFBFFFFFFFFFFFFFF7FFFDF
%FFDFFFF7FFFFFFFFFFFFFEFFFFBFFFBFFFEFFFFFFFFFFFFFFDFFFF7FFF7F
%FFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000007
%FFFFFFFFFFFFFF8000000000000FFFFFFFFFFFFFFF0000000000001FFFFF
%FFFFFFFFFE0000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFF
%FFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
%DFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFF
%FFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFF
%FFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFF
%FFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
%DFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83FFFFFF
%FFFFFFFFFFFFFFFFFFFF07FFFFFFFFFFFFFFFFFFFFFFFFFE0FFFFFFFFFFF
%FFFFFFFFFFFFFFFC1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFF7DFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFFFFFFFFFF
%FFFFFFFDF7FFFFFFFFFFFFFFFFFFFFFFFFFBEFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFFFFFFFFFFFFFFFFFFFFFFFFFD
%FDFFFFFFFFFFFFFFFFFFFFFFFFFBFBFFFFFFFFFFFFFFFFFFFFFFFFF7F7FF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD837FFFFF
%FFFFFFFFFFFFFFFFFFBB06FFFFFFFFFFFFFFFFFFFFFFFF760DFFFFFFFFFF
%FFFFFFFFFFFFFEEC1BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFEDFF7FFFFFFFFFFFFFFFFFFFFFFFDBFEFFFFFFFFFFFFFFFFFF
%FFFFFFB7FDFFFFFFFFFFFFFFFFFFFFFFFF6FFBFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFBFFFFFFFFFFFC05EF7FFFFFFFFFFFFFFFFFFFFFF80B
%DEFFFFFFFFFFFFFFFFFFFFFFF017BDFFFFFFFFFFFFFFFFFFFFFFE02F7BFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFDEDD77FFFFF
%FFFFFFFFFFFFFFFFFBDBAEFFFFFFFFFFFFFFFFFFFFFFF7B75DFFFFFFFFFF
%FFFFFFFFFFFFEF6EBBFFFFFFFFFFFFFFFFFFFFFFFFDD8C7BB3AB63DD9EFF
%FFFFFFFFFDDDBB7FFFFFFFFFFFFFFFFFFFFFFBBB76FFFFFFFFFFFFFFFFFF
%FFFFF776EDFFFFFFFFFFFFFFFFFFFFFFEEEDDBFFFFFFFFFFFFFFFFFFFFFF
%FFDD6B7B6D4B5BDB7D7FFFFFFFFFFDFEFEFFFFFFFFFFFFFFFFFFFFFFFBFD
%FDFFFFFFFFFFFFFFFFFFFFFFF7FBFBFFFFFFFFFFFFFFFFFFFFFFEFF7F7FF
%FFFFFFFFFFFFFFFFFFFFFFC16B7AED6B5BD70D7FFFFFFFFFFDFF7DFFFFFF
%FFFFFFFFFFFFFFFFFBFEFBFFFFFFFFFFFFFFFFFFFFFFF7FDF7FFFFFFFFFF
%FFFFFFFFFFFFEFFBEFFFFFFFFFFFFFFFFFFFFFFFFFDD6B786D695BCF6BBF
%FFFFFFFFFDFF83FFFFFFFFFFFFFFFFFFFFFFFBFF07FFFFFFFFFFFFFFFFFF
%FFFFF7FE0FFFFFFFFFFFFFFFFFFFFFFFEFFC1FFFFFFFFFFFFFFFFFFFFFFF
%FFEB8C7BB36AE3D79BBFFFFFFFFFFDFFEFFFFFFFFFFFFFFFFFFFFFFFFBFF
%DFFFFFFFFFFFFFFFFFFFFFFFF7FFBFFFFFFFFFFFFFFFFFFFFFFFEFFF7FFF
%FFFFFFFFFFFFFFFFFFFFFFEBEF7BBFFFFBDBFFFFFFFFFFFFFDFFEFFFFFFF
%FFFFFFFFFFFFFFFFFBFFDFFFFFFFFFFFFFFFFFFFFFFFF7FFBFFFFFFFFFFF
%FFFFFFFFFFFFEFFF7FFFFFFFFFFFFFFFFFFFFFFFFFF7EF787FFFFBDDFFFF
%FFFFFFFFFDFFEFFFFFFFFFFFFFFFFFFFFFFFFBFFDFFFFFFFFFFFFFFFFFFF
%FFFFF7FFBFFFFFFFFFFFFFFFFFFFFFFFEFFF7FFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFEFFFFFFFFFFFFFFFFFFFFFFFFBFF
%DFFFFFFFFFFFFFFFFFFFFFFFF7FFBFFFFFFFFFFFFFFFFFFFFFFFEFFF7FFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFEFFFFFFF
%FFFFFFFFFFFFFFFFFBFFDFFFFFFFFFFFFFFFFFFFFFFFF7FFBFFFFFFFFFFF
%FFFFFFFFFFFFEFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFDFFEFFFFFFFFFFFFFFFFFFFFFFFFBFFDFFFFFFFFFFFFFFFFFFF
%FFFFF7FFBFFFFFFFFFFFFFFFFFFFFFFFEFFF7FFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFEFFFFFFFFFFFFFFFFFFFFFFFFDFF
%DFFFFFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFDFFF7FFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0028000000
%000000000000000000005000000000000000000000000000A00000000000
%0000000000003FFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFBFFFFF
%FFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
%DFFFFFFFFFFFFFBFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFF
%FFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFBFFFFFFFFFFFFFBFFFFFFFFFFF
%FFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFBFFFFF
%FFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
%DFFFFFFFFFFFFFBFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000028000000
%00000000000000000000500000000000003FFFFFFFFFFFFFBFFFFFFFFFFF
%FFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFF
%FFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
%DFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFF
%FFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFF
%FFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFF
%FFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
%DFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFF
%FFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFF
%FFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFC0000000000007FFFFFFFFFFFFFF8000000000000FFFFFFFFFFFFF
%FF0000000000001FFFFFFFFFFFFFFE0000000000003FFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFBFFFEFFFEFFFFBFFFFFFFFFFFFFF7FFFDF
%FFDFFFF7FFFFFFFFFFFFFEFFFFBFFFBFFFEFFFFFFFFFFFFFFDFFFF7FFF7F
%FFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFF
%FFFFFFFFFBFFFEFFFFBFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBFFFEFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBF
%FFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFF
%FFFFFFFFFBFFFEFFFFBFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBFFFEFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBF
%FFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFF
%FFFFFFFFFBFFFEFFFFBFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBFFFFBFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBF
%FFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFF
%FFFFFFFFFBFFFEFFFFBFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBFFFFF7FFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBF
%FFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFF
%FFFFFFFFFBFFFEFFFFBFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBFFFFFEFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBF
%FFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFF
%FFFFFFFFFBFFFEFFFFBFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBFFFFFFDFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFBFFFEFFFFBF
%FFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFFBFFFF
%FFFFFFFFFBFFFEFFFFBFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFFDFFFFFFFFFFFFFBFFFEFFFFBFFFFFFFBFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFFEFFFFFFFFFFFFFBFFFEFFFFBF
%FFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFFF7FFF
%FFFFFFFFFBFFFEFFFFBFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFFFBFFFFFFFFFFFFBFFFEFFFFDFFFFFFFF7FFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFFFDFFFFFFFFFFFFBFFFEFFFFEF
%FFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFFFEFFF
%FFFFFFFFFBFFFEFFFFF7FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFFFF7FFFFFFFFFFFBFFFEFFFFFBFFFFFFFEFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFFFFBFFFFFFFFFFFBFFFEFFFFFD
%FFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFFFFDFF
%FFFFFFFFFBFFFEFFFFFEFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFBFFFFFFFFFFFF
%FDFFFF7FFFDFFFFFFEFFFFFFFFFFFBFFFEFFFFFF7FFFFFFFD1FFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFBFFFFFFFFFFFFFDFFFF7FFFDFFFFFFF7FFFFFFFFFFBFFFEFFFFFF
%BFFFFFFFEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFDFFFFFFFFFFFFFDFFFF7FFFDFFFFFFFBF
%FFFFFFFFFBFFFEFFFFFFDFFFFFFFDF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFEFFFFFFFFFFFF
%FDFFFF7FFFDFFFFFFFDFFFFFFFFFFBFFFEFFFFFFEFFFFFFFDF7FFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFF7FFFFFFFFFFFFDFFFF7FFFDFFFFFFFEFFFFFFFFFFBFFFEFFFFFF
%F7FFFFF7DF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFFBFFFFFFFFFFFFDFFFF7FFFDFFFFFFFF7
%FFFFFFFFFBFFFEFFFFFFFBFFFFEBEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFFDFFFFFFFFFFF
%FDFFFF7FFFEFFFFFFFFBFFFFFFFFFBFFFEFFFFFFFDFFFFDDD17FFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFFEFFFFFFFFFFFFDFFFF7FFFF7FFFFFFFDFFFFFFFFFBFFFEFFFFFF
%FEFFFFBEBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFFF7FFFFFFFFFFFDFFFF7FFFFBFFFFFFFE
%FFFFFFFFFBFFFEFFFFFFFF7FFF7F7FDFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFFFBFFFFFFFFFF
%FDFFFF7FFFFDFFFFFFFF7FFFFFFFFBFFFEFFFFFFFFBFFEFFBFEFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFFFDFFFFFFFFFFFDFFFF7FFFFEFFFFFFFFBFFFFFFFFBFFFF7FFFFF
%FFDFFF7FDFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFFFFEFFFFBFFFEFFFFFFEFFFFFFFFFFFDFFFF7FFFFF7FFFFFFF
%DFFFFFFFFBFFFFBFFFFFFFEFFFBFEFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBFFFEFFFFFFF7FFFFFFFFF
%FDFFFF7FFFFFBFFFFFFFE8FFFFFFFBFFFFDFFFFFFFF7FFDFF7FDFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFFFFEFFFFBF
%FFEFFFFFFFBFFFFFFFFFFDFFFF7FFFFFDFFFFFFFF77FFFFFFBFFFFEFFFFF
%FFFBFFEFEFFE8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFE
%FFFFFFFFFFFFFEFFFFBFFFEFFFFFFFDFFFFFFFFFFDFFFF7FFFFFEFFFFFFF
%EFBFFFFFFBFFFFF7FFFFFFFDFFD7DFFF77FFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFF7FFFFFFFFFFFFEFFFFBFFFEFFFFFFFEFFFFFFFFF
%FDFFFF7FFFFFF7FFFFFFEFBFFFFFFBFFFFFBFFFFFFFEFFBBBFFEFBFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFFBFFFFFFFFFFFFEFFFFBF
%FFEFFFFFFFF7FFFFFFFFFDFFFF7FFFFFFBFFFFFBEFBFFFFFFBFFFFFDFFFF
%FFFF7F7D7FFEFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFF
%DFFFFFFFFFFFFEFFFFBFFFEFFFFFFFFBFFFFFFFFFDFFFF7FFFFFFDFFFFF5
%F77FFFFFFBFFFFFEFFFFFFFFA3BEFFBEFBFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFFEFFFFFFFFFFFFEFFFFBFFFF7FFFFFFFDFFFFFFFF
%FDFFFF7FFFFFFEFFFFEEE8BFFFFFFBFFFFFF7FFFFFFFDDDFFF5F77FFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFFF7FFFFFFFFFFFEFFFFBF
%FFFBFFFFFFFEFFFFFFFFFDFFFF7FFFFFFF7FFFDF5FDFFFFFFBFFFFFFBFFF
%FFFFBEEFFEEE8BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFF
%FBFFFFFFFFFFFEFFFFBFFFFDFFFFFFFF7FFFFFFFFDFFFF7FFFFFFFBFFFBF
%BFEFFFFFFBFFFFFFDFFFFFFFBEF7FDF5FDFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFFFDFFFFFFFFFFFEFFFFBFFFFEFFFFFFFFBFFFFFFF
%FDFFFF7FFFFFFFDFFF7FDFF7FFFFFBFFFFFFEFFFFFEFBEFBFBFBFEFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFFFEFFFFFFFFFFFEFFFFBF
%FFFF7FFFFFFFDFFFFFFFFDFFFFBFFFFFFFEFFFBFEFFBFFFFFBFFFFFFF7FF
%FFD7DDFDF7FDFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFF
%FF7FFFFFFFFFFEFFFFBFFFFFBFFFFFFFEFFFFFFFFDFFFFDFFFFFFFF7FFDF
%F7FDFFFFFBFFFFFFFBFFFFBBA2FBFBFEFFBFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFFFFBFFFFFFFFFFEFFFFBFFFFFDFFFFFFFF47FFFFF
%FDFFFFEFFFFFFFFBFFEFFBFEFFFFFBFFFFFFFDFFFF7D7F77FDFF7FDFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFFFFDFFFFFFFFFFEFFFFBF
%FFFFEFFFFFFFFBBFFFFFFDFFFFF7FFFFFFFDFFF7F7FF47FFFBFFFFFFFEFF
%FEFEFFBFFEFFBFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFF
%FFEFFFFFFFFFFEFFFFBFFFFFF7FFFFFFF7DFFFFFFDFFFFFBFFFFFFFEFFEB
%EFFFBBFFFDFFFFFFFF7FFDFF7FDFFF7F7FF47FFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFFFFF7FFFFFFFFFEFFFFBFFFFFFBFFFFFFF7DFFFFF
%FDFFFFFDFFFFFFFF7FDDDFFF7DFFFEFFFFFFFFBFFEFFBFEFFEBEFFFBBFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFFFFFBFFFFFFFFFEFFFFBF
%FFFFFDFFFFFDF7DFFFFFFDFFFFFEFFFFFFFFBFBEBFFF7DFFFF7FFFFFFFDF
%FF7FDF77FDDDFFF7DFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFF
%FFFDFFFFFFFFFEFFFFBFFFFFFEFFFFFAFBBFFFFFFDFFFFFF7FFFFFFFD1DF
%7FDF7DFFFFBFFFFFFFEFFFBFEEFBFBEBFFF7DFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFFBFFFFFFFEFFFFFFFFFEFFFFBFFFFFFF7FFFF7745FFFFF
%FDFFFFFFBFFFFFFFEEEFFFAFBBFFFFDFFFFFFFF7FFDFDDFD1DF7FDF7DFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFDFFFFFFFF7FFFFFFFFEFFFFBF
%FFFFFFBFFFEFAFEFFFFFFDFFFFFFDFFFFFFFDF77FF7745FFFFEFFFFFFFFB
%FFAFBBFEEEFFFAFBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFEFFFF
%FFFFBFFFFFFFFEFFFFBFFFFFFFDFFFDFDFF7FFFFFDFFFFFFEFFFFFFFDF7B
%FEFAFEFFFFF7FFFFFFFDFF7777FDF77FF7745FFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFFF7FFFFFFFDFFFFFFFFEFFFFBFFFFFFFEFFFBFEFFBFFFF
%FDFFFFFFF7FFFFF7DF7DFDFDFF7FFFFBFFFFFFFEFEFAEFFDF7BFEFAFEFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFBFFFFFFFEFFFFFFFFEFFFFDF
%FFFFFFF7FFDFF7FDFFFFFDFFFFFFFBFFFFEBEEFEFBFEFFBFFFFDFFFFFFFF
%477DDF7DF7DFDFDFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFDFFF
%FFFFF7FFFFFFFEFFFFEFFFFFFFFBFFEFFBFEFFFFFDFFFFFFFDFFFFDDD17D
%FDFF7FDFFFFEFFFFFFFFBBBFBEBEEFEFBFEFFBFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFFFEFFFFFFFFA3FFFFFFEFFFFF7FFFFFFFDFFF7FDFF7FFF
%FDFFFFFFFEFFFFBEBFBBFEFFBFEFFFFF7FFFFFFF7DDF7DDD17DFDFF7FDFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFF7FFFFFFFDDFFFFFFEFFFFFB
%FFFFFFFEFFFBFBFFA3FFFDFFFFFFFF7FFF7F7FDFFF7FDFF7FFFFBFFFFFFF
%7DEEFBEBFBBFEFFBFEFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFFBFF
%FFFFFBEFFFFFFEFFFFFDFFFFFFFF7FF5F7FFDDFFFEFFFFFFFFBFFEFFBFEF
%FFBFBFFA3FFFDFFFFFDF7DF5F7F7FDFFF7FDFF7FFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFFFFDFFFFFFFBEFFFFFFEFFFFFEFFFFFFFFBFEEEFFFBEFF
%FF7FFFFFFFDFFF7FDFF7FF5F7FFDDFFFEFFFFFAFBBFBEFFBFEFFFBFBFFBF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFFEFFFFFEFBEFFFFFFEFFFFFF
%7FFFFFFFDFDF5FFFBEFFFFBFFFFFFFEFFFBFEFBBFEEEFFFBEFFFF7FFFF77
%45F7F7FDFF7FF5F7FFDFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFFF7F
%FFFD7DDFFFFFFEFFFFFFBFFFFFFFE8EFBFEFBEFFFFDFFFFFFFF7FFDFF77D
%FDF5FFFBEFFFFBFFFEFAFEEFFBFEFBBFEEEFFFEFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFFFFFBFFFFBBA2FFFFFFEFFFFFFDFFFFFFFF777FFD7DDFF
%FFEFFFFFFFFBFFEFEEFE8EFBFEFBEFFFFDFFFDFDFF5FFDFF77DFDF5FFFF7
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFFFDFFFF7D7F7FFFFFEFFFFFF
%EFFFFFFFEFBBFFBBA2FFFFF7FFFFFFFDFFD7DDFF777FFD7DDFFFFEFFFBFE
%FFBFFEFEEFE8EFBFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFFFEF
%FFEFEFFBFFFFFEFFFFFFF7FFFFFFEFBDFF7D7F7FFFFBFFFFFFFEFFBBBBFE
%FBBFFBBA2FFFFF7FFDFF7FDFFD7DDFF777FFD7DFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFFFFFF7FFDFF7FDFFFFFEFFFFFFFBFFFFFBEFBEFEFEFFBF
%FFFDFFFFFFFF7F7D77FEFBDFF7D7F7FFFFBFFEFFBEEFFBBBBFEFBBFFBBBF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFEFFFFFFFFBFFEFFBFEFFFFFEFFFFFF
%FDFFFFF5F77F7DFF7FDFFFFEFFFFFFFFA3BEEFBEFBEFEFEFFBFFFFDFFF7F
%DDF7F7D77FEFBDFF7D7FFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFF7FFFFFFFD
%FFF7FDFF7FFFFEFFFFFFFEFFFFEEE8BEFEFFBFEFFFFF7FFFFFFFDDDFDF5F
%77F7DFF7FDFFFFEFFFBFBBFA3BEEFBEFBEFEFEFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFBFFFFFFFEFFFBFEFFBFFFFEFFFFFFFF7FFFDF5FDDFF7FDFF7
%FFFFBFFFFFFFBEEFBEEE8BEFEFFBFEFFFFF7FF5F77FDDDFDF5F77F7DFF7F
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFDFFFFFFFF7FFDFDFFD1FFFEFFFFFF
%FFBFFFBFBFEFFFBFEFFBFFFFDFFFFFFFBEF77DF5FDDFF7FDFF7FFFFBFEEE
%EFFBEEFBEEE8BEFEFFBFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFEFFFFFFFF
%BFFAFBFFEEFFFF7FFFFFFFDFFF7FDFF7FFDFDFFD1FFFEFFFFFEFBEFAFBFB
%FEFFFBFEFFBFFFFDFDF5DFFBEF77DF5FDDFF7FDFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFF7FFFFFFFDFF777FFDF7FFFBFFFFFFFEFFFBFEFFBFFAFBFFE
%EFFFF7FFFFD7DDFDF7FDFF7FFDFDFFDFFFFE8EFBBEFBEFAFBFBFEFFFBFEF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFBFFFFFFFEFEFAFFFDF7FFFDFFFFF
%FFF7FFDFF7DDFF777FFDF7FFFBFFFFBBA2FBFBFEFFBFFAFBFFEFFFFF777F
%7D7DDFDF7FDFF7FFDFDFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFDFFFFFFF
%F477DFF7DF7FFFEFFFFFFFFBFFEFFBBEFEFAFFFDF7FFFDFFFF7D7F77FDFF
%7DDFF777FFF7FFFEFBBEFBBA2FBFBFEFFBFFAFBFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFEFFFFFFFFBBBFFEBEEFFFFF7FFFFFFFDFFF7F77F477DFF7D
%F7FFFEFFFEFEFFAFFEFFBBEFEFAFFFFBFFFEFBDDF7D7F77FDFF7DDFF777F
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFF7FFFFFFF7DDFFDDD17FFFFBFFFF
%FFFEFFEBEEFFBBBFFEBEEFFFFF7FFDFF7FDFFF7F77F477DFF7F7FFBEFBEB
%EFEFFAFFEFFBBEFEFAFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFBFFFFFF
%F7DEFFBEBFBFFFFDFFFFFFFF7FDDDDFF7DDFFDDD17FFFFBFFEFFBFEFFEBE
%EFFBBBFFEBEFFF5F77F7DFF7FDFFF7F77F7F7DFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFFDFFFFFDF7DF7F7F7FDFFFFEFFFFFFFFBFBEBBFF7DEFFBEB
%FBFFFFDFFF7FDF77FDDDDFF7DDFFDDDFFEEE8BEFEFFBFEFFEBEEFFBFBFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFEFFFFFAFBBFBEFFBFEFFFFF7FFF
%FFFFD1DF77DF7DF7F7F7FDFFFFEFFFBFEEFBFBEBBFF7DEFFBEBFFDF5FDDF
%F7FDF77FDDDDFFDFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF7FFFF7
%745F7F7FDFF7FFFFBFFFFFFFEEEFEFAFBBFBEFFBFEFFFFF7FFDFDDFD1DF7
%7DF7DF7F7F7FFBFBFEBFFBFEEFBFBEBBFFEFEFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFFFBFFFEFAFEEFFBFEFFBFFFFDFFFFFFFDF77DF7745F7F7FD
%FF7FFFFBFFAFBBFEEEFEFAFBBFBEFFBFF7FDFF7FFDFDDFD1DF77DFDFF7FF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFDFFFDFDFF7FFDFF7FDFFFFEFFF
%FFFFDF7BBEFAFEEFFBFEFFBFFFFDFF7777FDF77DF7745F7F7FDFFBFEFFBF
%FAFBBFEEEFEFAFBFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFEFFFBF
%EFFBFFEFEFFE8FFFF7FFFFF7DF7D7DFDFF7FFDFF7FDFFFFEFEFAEFFDF7BB
%EFAFEEFFBFEFFDFF7DDFF7777FDF77DF777FF7FFFFFFFFFFFFFFFFFFFFFF
%FFFFFFDFFFFFFFF7FFDFF7FDFFD7DFFF77FFFBFFFFEBEEFEFBFEFFBFFEFE
%FFEFFFFF477DDF7DF7D7DFDFF7FFDFF7FEFFBBEFEFAEFFDF7BBEFAFFEFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFBFFEFFBEEFFBBBFFEFBFFFDFF
%FFDDD17DFDFF7FDFFD7DFFF7FFFFBBBFBEBEEFEFBFEFFBFFEFEFFF7F77F4
%77DDF7DF7D7DFDFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFDFFF7
%FDDF7F7D7FFEFBFFFEFFFFBEBFBBFEFFBEEFFBBBFFFBFFFF7DDF7DDD17DF
%DFF7FDFFD7DFFEBEEFFBBBFBEBEEFEFBFEFFBFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFBFFFFFFFEFFFBFBBFA3BEFFBEFBFFFF7FFF7F7FD7FF7FDDF7F7D7
%FFFDFFFF7DEEFBEBFBBFEFFBEEFFBBBFFDDDDFF7DDF7DDD17DFDFF7F7FFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFF7FF5F77FDDDFFF5F77FFFFBF
%FEFFBFEFFFBFBBFA3BEFFBFBFFDF7DF5F7F7FD7FF7FDDF7F7D7FFBEBBFF7
%DEEFBEBFBBFEFFBEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFBFEE
%EEFFBEEFFEEE8BFFFFDFFF7FDFF7FF5F77FDDDFFF5F7FFAFBBFBEFFBFEFF
%FBFBBFBFBEFFFDF77DF7DF5F7F7FD7FF7FDDFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFF7FFFFFFFDFDF5DFFBEF7FDF5FDFFFFEFFFBFEFBBFEEEEFFBEEFF
%EEEFFF7745F7F7FDFF7FF5F77FDFDFFFFEFEFAFBBFBEFFBFEFFFBFBBFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFE8EFBBEFBEFBFBFBFEFFFFF7
%FFDFF77DFDF5DFFBEF7FDF5FFEFAFEEFFBFEFBBFEEEEFFEFEFFFFF7DF774
%5F7F7FDFF7FF5F77FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFF777
%F7D7DDFDF7FDFF7FFFFBFFEFEEFE8EFBBEFBEFBFBFBFFDFDFF5FFDFF77DF
%DF5DFFF7F7FFFFBBEFAFEEFFBFEFBBFEEEEFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFEFFFFFFFEFBBEFBBA2FBFBFEFFBFFFFDFFD7DDFF777F7D7DDFDF
%7FDFFBFEFFBFFEFEEFE8EFBBEFEFFBFFFFD7DFDFF5FFDFF77DFDF5DFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFEFBDDF7D7F77FDFF7FDFFFFE
%FFBBBBFEFBBEFBBA2FBFBFEFFDFF7FDFFD7DDFF777F7D7DFFDFFFFEFBFEF
%FBFFEFEEFEFEFBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFBEFBE
%BEFEFFBFFEFFBFEFFFFF7F7D77FEFBDDF7D7F77FDFF7FEFFBEEFFBBBBFEF
%BBEFBBBFFBFFFFDFDFF7FDFFD7DDFF7F7F7FFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFDFFFFF5F77F7DFF7FDFFF7F7FF7FFFFA3BEEFBEFBEBEFEFFBFF
%EFFBFF7FDDF7F7D77FEFBDDF7D7FF7FFFFBFEFFBEEFFBBBBFFBFBEFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEEE8BEFEFFBFEFFEBEFFFBFFFF
%DDDFDF5F77F7DFF7FDFFF7F7FFBFBBFA3BEEFBEFBEBEFEFFEFFFFF7FF7FD
%DF7F7D77FFDFDDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDF5FDD
%FF7FDF77FDDDFFFDFFFFBEEFBEEE8BEFEFFBFEFFEBEFFF5F77FDDDFDF5F7
%7F7DFF7FDFFFFEFFFBFBBFA3BEEFBFBFEBFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFBFFFBFBFEBFFBFEEFBFBEBFFFEFFFFBEF77DF5FDDFF7FDF77F
%DDDFFEEEEFFBEEFBEEE8BEFEFFBFBFFFFDFFF5F77FDDDFDF5F7FF7FFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFF7FDFF7FFDFDDFD1DF7FDFDFFEF
%BEFAFBFBFEBFFBFEEFBFBEBFFDF5DFFBEF77DF5FDDFF7FDF7FFFFBFFEEEE
%FFBEEFBEEEFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFBFEFFB
%FFAFBBFEEEFFFAFBFFD7DDFDF7FDFF7FFDFDDFDFDF7FFEFBBEFBEFAFBFBF
%EBFFBFEEFFFFF7FFDF5DFFBEF77DF5FFDFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFF7FFDFF7DDFF7777FDF77FF777FFBBA2FBFBFEFFBFFAFBBFEF
%EFFFFF7F7D7DDFDF7FDFF7FFDFDDFFFFEFFFEFBBEFBEFAFBFBFFBFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFEFFBBEFEFAEFFDF7BFEFAFFF7D
%7F77FDFF7DDFF7777FF7F7FFFFBEFBBA2FBFBFEFFBFFAFBBFFFFDFFFF7F7
%D7DDFDF7FDFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFF7F77F
%477DDF7DF7DFDFDFFEFEFFAFFEFFBBEFEFAEFFFBFBFFFFDDF7D7F77FDFF7
%DDFF7777FFFFBFFFFBEFBBA2FBFBFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFEFFEBEEFFBBBFBEBEEFEFBFEFFDFF7FDFFF7F77F477DDF7F7
%FDFFFFEBEFEFFAFFEFFBBEFEFAEFFFFF7FFFFDDF7D7F77FDFF7DFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FDDDDFF7DDF7DDD17DFDFF7FEFF
%BFEFFEBEEFFBBBFBEBEFFEFFFFF7DFF7FDFFF7F77F7F7DDFFFFEFFFFFEBE
%FEFFAFFEFFBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBEBBFF
%7DEEFBEBFBBFEFFBFF7FDF77FDDDDFF7DDF7DDDFFDFFFFEFEFFBFEFFEBEE
%FFBFBFBFFFFDFFFFFF7DFF7FDFFF7F77FFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFD1DF77DF7DF5F7F7FDFFF7FDFFBFEEFBFBEBBFF7DEEFBEBF
%FBFFFFDFF7FDF77FDDDDFFDFDF7FFFFBFFFFFEFEFFBFEFFEBEEFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEFEFAFBBFBEFFBFEFFFBFBFFDF
%DDFD1DF77DF7DF5F7F7FF7FFFFBFFBFEEFBFBEBBFFEFEEFFFFF7FFFFFDFF
%7FDF77FDDDDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDF77DF77
%45F7F7FDFF7FF5F7FFAFBBFEEEFEFAFBBFBEFFBFEFFFFF7FFDFDDFD1DF77
%DFDFF5FFFFEFFFFFFBFFBFEEFBFBEBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFDF7BBEFAFEEFFBFEFBBFEEEFFF7777FDF77DF7745F7F7FDF
%DFFFFEFFFAFBBFEEEFEFAFBFFBFFFFDFFFFFF7FFDFDDFDFDF77FFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7DF7D7DFDFF5FFDFF77DFDF5FFEFA
%EFFDF7BBEFAFEEFFBFEFBFFFFDFFF7777FDF77DF777FF7FFFFBFFFFFEFFF
%AFBBFEFEFEFFFFFFFFFFFFDF45DF1CC6ADADFFFFFFFFFFFFFFEBEEFEFBFE
%FFBFFEFEEFEFEFBFFF7DDF7DF7D7DFDFF5FFDFF77FFFFBFFEFAEFFDF7BBE
%FAFFEFFFFF7FFFFFDFFF7777FF7F7DFFFFFFFFFFFFDF6EBEEB6D2DADFFFF
%FFFFFFFFFFDDD17DFDFF7FDFFD7DDFF7F7FFFFBFBEBEEFEFBFEFFBFFEFEE
%FFFFF7FFF7DDF7DF7D7DFDFFDFFFFEFFFFFFBFFEFAEFFFBFBBFFFFFFFFFF
%FFDF6F7EFB6DADADFFFFFFFFFFFFFFBEBFBBFEFFBEEFFBBBBFFBFBFFFFDF
%7DDD17DFDFF7FDFFD7DDFFFFEFFFFBFBEBEEFEFBFEFFBFFFFDFFFFFF7FFF
%7DDF7F7FD7FFFFFFFFFFFFDB6EBEFB6DA4A5FFFFFFFFFFFFFF7F7FD7FF7F
%DDF7F7D77FFDFDFFFFEEFBEBFBBFEFFBEEFFBBBBFFFFDFFFFDF7DDD17DFD
%FF7F7FFFFBFFFFFEFFFFBFBEBEFFEFFFFFFFFFFFFFD54DDEFCEDAB6BFFFF
%FFFFFFFFFEFFBFEFFFBFBBFA3BEEFBFBFEFFFFF5F7F7FD7FF7FDDF7F7D77
%FFFFBFFFFEEFBEBFBBFEFFBEFFFFF7FFFFFDFFFFDF7DDDFFDFFFFFFFFFFF
%FFCE7FFEEFEFFFFFFFFFFFFFFFFFFF7FDFF7FF5F77FDDDFDF5F7FF7FFFFB
%EFFBFEFFFBFBBFBFBEEFFFFF7FFFFF5F7F7FD7FF7FDDFFFFEFFFFFFBFFFF
%EEFBEBFFBFFFFFFFFFFFFFDF6FFF1FCFFFFFFFFFFFFFFFFFFFBFEFBBFEEE
%EFFBEEFBEEEFFEFFFFF7F7FDFF7FF5F77FDFDFDFFFFEFFFFFFBEFFBFEFFF
%BFBBFFFFDFFFFFF7FFFFF5F7F7FF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFDFF77DFDF5DFFBEF77DF5FFDFFFFEFFBFEFBBFEEEEFFEFEFBF
%FFFDFFFFFF7F7FDFF7FF5F77FFFFBFFFFFEFFFFFFBEFFBFEFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEEFE8EFBBEFBEFAFBFBFFBFFFFDF
%FDFF77DFDF5DFFF7F77FFFFBFFFFFEFFBFEFBBFEEEEFFFFF7FFFFFDFFFFF
%F7F7FDFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7DDFF777F
%7D7DDFDF7FDFF7FFFFBFFEFEEFE8EFBBEFEFFAFFFFF7FFFFFDFFDFF77DFD
%F5DFFFFEFFFFFFBFFFFFEFFBFEFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFBBBBFEFBBEFBBA2FBFBFEFEFFFFF7FFD7DDFF777F7D7DFFDFF
%FFEFFFFFFBFFEFEEFEFEFBBFFFFDFFFFFF7FFFFFDFFDFF77FFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7D77FEFBDDF7D7F77FDFF7DFFFFEFF
%FBBBBFEFBBEFBBBFFBFFFFDFFFFFF7FFD7DDFF7F7F7FFFFBFFFFFEFFFFFF
%BFFEFEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBEEFBEFBEB
%EFEFFAFFEFFBBFFFFDFFF7D77FEFBDDF7D7FF7FFFFBFFFFFEFFFBBBBFFBF
%BEFFFFF7FFFFFDFFFFFF7FFD7DDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFDFDF5F77F7DFF7FDFFF7F77FFFFBFFFBEEFBEFBEBEFEFFEFFF
%FF7FFFFFDFFF7D77FFDFDDFFFFEFFFFFFBFFFFFEFFFBBBBFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBEEE8BEFEFFBFEFFEBEEFFFFF7FF
%FDFDF5F77F7DFF7FDFFFFEFFFFFFBFFFBEEFBFBFEBFFFFDFFFFFF7FFFFFD
%FFF7D77FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF77DF5FDDF
%F7FDF77FDDDDFFFFEFFFFEFBEEE8BEFEFFBFBFFFFDFFFFFF7FFFDFDF5F7F
%F7FFFFBFFFFFEFFFFFFBFFFBEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFAFBFBFEBFFBFEEFBFBEBBFFFFDFFFFF77DF5FDDFF7FDF7FFF
%FBFFFFFEFFFFEFBEEEFFEFFFFF7FFFFFDFFFFFF7FFFDFDFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDF7FDFF7FFDFDDFDFDF77FFFFBFFF
%FFAFBFBFEBFFBFEEFFFFF7FFFFFDFFFFF77DF5FFDFFFFEFFFFFFBFFFFFEF
%FFFEFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBFEFFBF
%FAFBBFEFEFEFFFFF7FFFFFDF7FDFF7FFDFDDFFFFEFFFFFFBFFFFFAFBFBFF
%BFFFFDFFFFFF7FFFFFDFFFFF77FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFF7FDFF7DDFF7777FF7F7DFFFFEFFFFFFBFBFEFFBFFAFBBFFFF
%DFFFFFF7FFFFFDF7FDFF7FFFFBFFFFFEFFFFFFBFFFFFAFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFEFFBBEFEFAEFFFBFBBFFFFDFFFF
%FF7FDFF7DDFF7777FFFFBFFFFFEFFFFFFBFBFEFEFFFFF7FFFFFDFFFFFF7F
%FFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFF7F77F4
%77DDF7F7FD7FFFFBFFFFFEFFEFFBBEFEFAEFFFFF7FFFFFDFFFFFF7FDFF7D
%FFFFEFFFFFFBFFFFFEFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFBFFEBEEFFBBBFBEBEFFEFFFFF7FFFFFDFFF7F77F7F7DDFFFFE
%FFFFFFBFFFFFEFFEFFBBFFFFDFFFFFF7FFFFFDFFFFFF7FFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFDDDDFF7DDF7DDDFFDFFFFEFFFFF
%FBFFEBEEFFBFBFBFFFFDFFFFFF7FFFFFDFFF7F77FFFFBFFFFFEFFFFFFBFF
%FFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFBEBBFF7
%DEEFBEBFFBFFFFDFFFFFF7FFDDDDFFDFDF7FFFFBFFFFFEFFFFFFBFFEBEEF
%FFFF7FFFFFDFFFFFF7FFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFDFFFDF77DF7DF5F7F7FF7FFFFBFFFFFEFFFBEBBFFEFEEFFFFF7
%FFFFFDFFFFFF7FFDDDDFFFFEFFFFFFBFFFFFEFFFFFFBFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFEFEFAFBBFBEFFBFEFFFFF7FFFFF
%DFFFDF77DFDFF5FFFFEFFFFFFBFFFFFEFFFBEBBFFFFDFFFFFF7FFFFFDFFF
%FFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFF7DF774
%5F7F7FDFDFFFFEFFFFFFBFFFEFEFAFBFFBFFFFDFFFFFF7FFFFFDFFFDF77F
%FFFBFFFFFEFFFFFFBFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFEFFFFFBBEFAFEEFFBFEFBFFFFDFFFFFF7FFFF7DF777FF7FFFFBF
%FFFFEFFFFFFBFFFEFEFFFFF7FFFFFDFFFFFF7FFFFFDFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFD7DFDFF5FFDFF77FFFFBFFFFFE
%FFFFFBBEFAFFEFFFFF7FFFFFDFFFFFF7FFFF7DFFFFEFFFFFFBFFFFFEFFFF
%FFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFEFBFEF
%FBFFEFEEFFFFF7FFFFFDFFFFFD7DFDFFDFFFFEFFFFFFBFFFFFEFFFFFBBFF
%FFDFFFFFF7FFFFFDFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFF7FFFFFDFDFF7FDFFD7DDFFFFEFFFFFFBFFFFFEFBFEFFBFFFFDFF
%FFFF7FFFFFDFFFFFD7FFFFBFFFFFEFFFFFFBFFFFFEFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFBFEFFBEEFFBBBBFFFFDFFFFFF7
%FFFFFDFDFF7F7FFFFBFFFFFEFFFFFFBFFFFFEFFFFF7FFFFFDFFFFFF7FFFF
%FDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF7FF7FD
%DF7F7D77FFFFBFFFFFEFFFFFFBFEFFBEFFFFF7FFFFFDFFFFFF7FFFFFDFFF
%FEFFFFFFBFFFFFEFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFBFFFFFEFFFBFBBFBFBEEFFFFF7FFFFFDFFFFFF7FF7FDDFFFFEFFF
%FFFBFFFFFEFFFFFFBFFFFDFFFFFF7FFFFFDFFFFFF7FFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFDFFF5F77FDFDFDFFFFEFFFFFFBF
%FFFFEFFFBFBBFFFFDFFFFFF7FFFFFDFFFFFF7FFFFBFFFFFEFFFFFFBFFFFF
%EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFBFFEEEE
%FFEFEFBFFFFDFFFFFF7FFFFFDFFF5F77FFFFBFFFFFEFFFFFFBFFFFFEFFFF
%F7FFFFFDFFFFFF7FFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFDFFFFFF7FFDF5DFFF7F77FFFFBFFFFFEFFFFFFBFFEEEEFFFFF7FFF
%FFDFFFFFF7FFFFFDFFFFEFFFFFFBFFFFFEFFFFFFBFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFEFFFEFBBEFEFFAFFFFF7FFFFFDFF
%FFFF7FFDF5DFFFFEFFFFFFBFFFFFEFFFFFFBFFFFDFFFFFF7FFFFFDFFFFFF
%7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFDFFFF7F7
%D7DFFDFFFFEFFFFFFBFFFFFEFFFEFBBFFFFDFFFFFF7FFFFFDFFFFFF7FFFF
%BFFFFFEFFFFFFBFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFBFFFFBEFBBBFFBFFFFDFFFFFF7FFFFFDFFFF7F7FFFFBFFFF
%FEFFFFFFBFFFFFEFFFFF7FFFFFDFFFFFF7FFFFFDFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFF7FFFFDDF7D7FF7FFFFDFFFFFEFFF
%FFFBFFFFBEFFFFF7FFFFFDFFFFFF7FFFFFDFFFFEFFFFFFBFFFFFEFFFFFFB
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFEFFFFFEBE
%FEFFEFFFFFDFFFFFDFFFFFF7FFFFDDFFFFF7FFFFFBFFFFFEFFFFFFBFFFFD
%FFFFFF7FFFFFDFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFDFFFFFF7DFF7FDFFFFFDFFFFFBFFFFFEFFFFFEBFFFFF7FFFF
%F7FFFFFDFFFFFF7FFFFDFFFFFEFFFFFFBFFFFFEFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFBFFFFFEFEFFBFBFFFFFDFFFFF7FFF
%FFDFFFFFF7FFFFF7FFFFEFFFFFFBFFFFFEFFFFFDFFFFFDFFFFFF7FFFFFDF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFF7FFFFFDFF
%7FDF7FFFFFDFFFFEFFFFFFBFFFFFEFFFFFF7FFFFDFFFFFF7FFFFFDFFFFFD
%FFFFFBFFFFFEFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFEFFFFFFBFFBFEEFFFFFFDFFFFDFFFFFF7FFFFFDFFFFFF7FFFF
%BFFFFFEFFFFFFBFFFFFDFFFFF7FFFFFDFFFFFF7FFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFF7FFDFDDFFFFFFDFFFFBFFFF
%FEFFFFFFBFFFFFF7FFFF7FFFFFDFFFFFF7FFFFFDFFFFEFFFFFFBFFFFFEFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFEFFF
%AFBBFFFFFFDFFFF7FFFFFDFFFFFF7FFFFFF7FFFEFFFFFFBFFFFFEFFFFFFD
%FFFFDFFFFFF7FFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFFFDFFF7777FFFFFFDFFFF7FFFFFBFFFFFEFFFFFFF7FFFD
%FFFFFF7FFFFFDFFFFFFDFFFFBFFFFFEFFFFFFBFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFFBFFEFAEFFFFFFFDFFFF7FFFF
%F7FFFFFDFFFFFFF7FFFDFFFFFEFFFFFFBFFFFFFDFFFF7FFFFFDFFFFFF7FF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFF7FFF
%7DDFFFFFFFDFFFF7FFFFEFFFFFFBFFFFFFF7FFFDFFFFFDFFFFFF7FFFFFFD
%FFFF7FFFFFBFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFFEFFFFBFBFFFFFFFDFFFF7FFFFDFFFFFF7FFFFFFF7FFFD
%FFFFFBFFFFFEFFFFFFFDFFFF7FFFFF7FFFFFDFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFDFFFFDF7FFFFFFFDFFFF7FFFF
%BFFFFFEFFFFFFFF7FFFDFFFFF7FFFFFDFFFFFFFDFFFF7FFFFEFFFFFFBFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFFBFFFF
%EEFFFFFFFFDFFFF7FFFF7FFFFFDFFFFFFFF7FFFDFFFFEFFFFFFBFFFFFFFD
%FFFF7FFFFDFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFFF5FFFFFFFFDFFFF7FFFEFFFFFFBFFFFFFFF7FFFD
%FFFFDFFFFFF7FFFFFFFDFFFF7FFFFBFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFFFBFFFFFFFFDFFFF7FFFD
%FFFFFF7FFFFFFFF7FFFDFFFFBFFFFFEFFFFFFFFDFFFF7FFFF7FFFFFDFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFF
%F7FFFFFFFFDFFFF7FFFDFFFFFEFFFFFFFFF7FFFDFFFF7FFFFFDFFFFFFFFD
%FFFF7FFFEFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFFEFFFFFFFFFDFFFF7FFFDFFFFFDFFFFFFFFF7FFFD
%FFFF7FFFFFBFFFFFFFFDFFFF7FFFDFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFFDFFFFFFFFFDFFFF7FFFD
%FFFFFBFFFFFFFFF7FFFDFFFF7FFFFF7FFFFFFFFDFFFF7FFFDFFFFFEFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFF
%BFFFFFFFFFDFFFF7FFFDFFFFF7FFFFFFFFF7FFFDFFFF7FFFFEFFFFFFFFFD
%FFFF7FFFDFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFF7FFFFFFFFFDFFFF7FFFDFFFFEFFFFFFFFFF7FFFD
%FFFF7FFFFDFFFFFFFFFDFFFF7FFFDFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFEFFFFFFFFFFDFFFF7FFFD
%FFFFDFFFFFFFFFF7FFFDFFFF7FFFFBFFFFFFFFFDFFFF7FFFDFFFFF7FFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFDFFFF7FFFDFFFFBFFFFFFFFFF7FFFDFFFF7FFFF7FFFFFFFFFD
%FFFF7FFFDFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFD
%FFFF7FFFEFFFFFFFFFFDFFFF7FFFDFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFD
%FFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFFBFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFD
%FFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFD
%FFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFD
%FFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFD
%FFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFD
%FFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFD
%FFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF1FFFC
%3FFFFFFFFFDFFFF7FFFC7FFE7FFFFFFFFFF7FFFDFFFC7FFF9FFFFFFFFFFD
%FFFF7FFF1FFFE7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFE7FFFE0FFFC03FFFFFFFDFFFF9FFFF83F9FFFFFFFFFFF7FFFE
%7F83FFFE7FFFFFFFFFFDFFF87FE0FFFF9FFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFF8FFFFF03FFFC03FFFFFDFFFFE3FFF
%FC07FFFFFFFFFFF7FFFF807FFFF1FFFFFFFFFFFDF807F81FFFFC7FFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFF3FFFFFC1
%FFFFC03FFFDFFFFFCFFFFE307FFFFFFFFFF7FFFC13FFFF8FFFFFFFFFFFF8
%07FF07FFFFE3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFC7FFFFFE0FFFFFC03FDFFFFFF1FFF9FF83FFFFFFFFF7FF83
%FC7FFE7FFFFFFFFFF805FFE0FFFFFF9FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFF8FFFFFFF03FFFFFC01FFFFFFE3F
%C7FFFC0FFFFFFFF7E07FFF8FF1FFFFFFFFF807FDF81FFFFFFC7FFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF1FFFFF
%FFC1FFFFFFC03FFFFFC63FFFFFF07FFFFFF41FFFFFF18FFFFFFFF007FFFD
%07FFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFFFE3FFFFFFFE0FFFFFDFC03FFFF8FFFFFFFF83FFFF83FFFF
%FFFE3FFFFFF00FFFFFE0FFFFFFFF8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFCFFFFFFFFF03FFFDFFFC03FC7
%3FFFFFFFFC0FE077FFFFFFF1CFFFF00FFFFFF81DFFFFFFFC7FFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFF1FFF
%FFFFFFC1FFDFFFFFC03FC7FFFFFFFFF01FF7FFFFFF8FF1F00FFFFFFF07FD
%FFFFFFE3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFFFFFE3FFFFFFFFFE0FDFFFFFF9C038FFFFFFFF8383F7FFFF
%FE7FF00FFFFFFFE0FFFDFFFFFF9FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFC7FFFFFFFFFF05FFFFFC7FF
%C01FFFFFF07FFC17FFFFF1E00FC7FFFFFC1FFFFDFFFFFC7FFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFF9F
%FFFFFFFFFF81FFFE3FFFFFC03FFC0FFFFFE07FFF801FFFF9FFFF03FFFFFD
%FFFFE3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFFFFFFFE3FFFFFFFFFFDE0FF9FFFFFFF8C003FFFFFFF783E0
%1FFFFFFE3FE0FFFFFFFDFFFF9FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFC368DF7DD9D7FFFFFFFFFFFF7FFFFFFFFFFFFC7FFFFFFFFFDFF047FFFF
%FFFF10403FFFFFF7E011FFFFFFFFC41FFFFFFFFDFFFC7FFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFD6DDEBDB6ABFFFFFFFFFFFF7FFFFFFFFFFFFF
%8FFFFFFFFFDFFE01FFFFFFFC03FFC03FFFE01F807FFFFFFF00FFFFFFFFFD
%FFE3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD6DDEFD76ABFFFFFF
%FFFFFF7FFFFFFFFFFFFFF3FFFFFFFFDFF9FE0FFFFF83FCFFFFC00017FE7F
%83FFFFE0FF3FFFFFFFFDFF9FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFE36DDEFC36BBFFFFFFFFFFFF7FFFFFFFFFFFFFFC7FFFFFFFDFC7FFF07F
%F07FFF1FFFC00037F1FFFC1FFC1FFFC7FFFFFFFDFC7FFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFDF198C7DD9BBFFFFFFFFFFFF7FFFFFFFFFFFFF
%FF8FFFFFFFDF3FFFFF820FFFFFE3C03FFFC04FFFFFE083FFFFF8FFFFFFFD
%F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDF7FDEFDDFFFFFFFFF
%FFFFFF7FFFFFFFFFFFFFFFF1FFFFFFD8FFFFFF800FFFFFC03FFFFFF6007F
%FFE003FFFFFF1FFFFFFD8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFE17DE6FC3FFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFE3FFFFFC7FFFFF07F
%F07FC03F8FFFFFF1FF807C1FFC1FFFFFE3FFFFFC7FFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFF
%FFFFCFFFFF1FFFFE0FFFFF803FFFF3FFFFC7FFFF807FFFE0FFFFFCFFFFF1
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFFFFFFFFFFFFFF1FFF8DFFF81FFFF803C0FFFFC7FFE37FFE0
%7F807FFF03FFFF1FFF8DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFE3FC7DFF07FFF80
%7FFFF07FFF8FF1F7FC1FFFFF807FFC1FFFE3FC7DFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFF
%FFFFFFC73FDE0FFF807FFFFFFF83FFF1CFF783FFFFFFFF807FE0FFFC73FD
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFFFFFFFFFFFFFFFF8FF81FF807FFFFFFFFFFC0FFE3FE07FFF
%FFFFFFFF807F03FF8FFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFC6305F807FFFFF
%FFFFFFFFF0718C17FFFFFFFFFFFFFF807C1C63FDFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFF
%FFFFFF3E07007FFFFFFFFFFFFFFFFF8381F7FFFFFFFFFFFFFFFF8060FC7D
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFFFFFFFFFFFFFF8C100DFFFFFFFFFFFFFFFFFFE301E37FFFF
%FFFFFFFFFFFFFF80078DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFC000FF1FFFFFFFFF
%FFFFFFFFF00FE047FFFFFFFFFFFFFFFFFC7F8011FFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFF
%FFFE00FFFFC7FFFFFFFFFFFFFFFF83FFFF81FFFFFFFFFFFFFFFFF3FFFF80
%7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFFFFFFFFFFF00FFFFFFD8FFFFFFFFFFFFFFF03FFFFFF41FFF
%FFFFFFFFFFFF8FFFFFFD007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFE0007FFFFFFDF1FFFFFFF
%FFFFFC01FFFFFFF7C07FFFFFFFFFFFFC7FFFFFFDF0007FFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFE00
%0F3FFFFFFFDFE3FFFFFFFFFF83CFFFFFFFF7F883FFFFFFFFFFF3FFFFFFFD
%FE20807FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFFFFFFE01C1F8FFFFFFFFDFFCFFFFFFFFF07E3FFFFFFFF7FF3C
%1FFFFFFFFF8FFFFFFFFDFFCF07807FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFE01F03FC7FFFFFFFFDFFF1FFFFF
%FC0FF1FFFFFFFFF7FFC7E07FFFFFFC7FFFFFFFFDFFF1F81F807FFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFE01FE0FFF
%3FFFFFFFFFDFFFE7FFFF83FFCFFFFFFFFFF7FFF9FF83FFFFF3FFFFFFFFFD
%FFFE7FE0FF807FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFC1FFF1FFFCFFFFFFFFFFDFFFF7FFFC7FFF3FFFFFFFFFF7FFFD
%FFFC7FFFCFFFFFFFFFFDFFFF7FFF1FFF87FFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFD
%FFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFD
%FFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFD
%FFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFD
%FFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFD
%FFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFD
%FFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFD
%FFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFC001F0007C001F00
%07FFFFFFF0007C001F0007C001FFFFFFFC001F0007C001F0007FFFFFFF00
%07C001F0007C001FFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF
%FFFFDFFDF7FF7DFFDF7FF7FFFFFFF7FF7DFFDF7FF7DFFDFFFFFFFDFFDF7F
%F7DFFDF7FF7FFFFFFF7FF7DFFDF7FF7DFFDFFFFFFFFFFFFFFFFFFFFFFFFF
%FFC3DF73E1D47FFFFFFFFFFFDFFDF7FF7DFFDF7FF7FFFFFFF7FF7DFFDF7F
%F7DFFDFFFFFFFDFFDF7FF7DFFDF7FF7FFFFFFF7FF7DFFDF7FF7DFFDFFFFF
%FFFFFFFFFFFFFFFFFFFFFFDDAEAFFEA5BFFFFFFFFFFFDFFDF7FF7DFFDF7F
%F7FFFFFFF7FF7DFFDF7FF7DFFDFFFFFFFDFFDF7FF7DFFDF7FF7FFFFFFF7F
%F7DFFDF7FF7DFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFDDAEE1FEB5BFFFFFFF
%FFFFDC3DF70F7DC3DF70F7FFFFFFF70F7DC3DF70F7DC3DFFFFFFFDC3DF70
%F7DC3DF70F7FFFFFFF70F7DC3DF70F7DC3DFFFFFFFFFFFFFFFFFFFFFFFFF
%FFC376EDF1B5BFFFFFFFFFFFDFDDF7F77DFDDF7F77FFFFFFF7F77DFDDF7F
%77DFDDFFFFFFFDFDDF7F77DFDDF7F77FFFFFFF7F77DFDDF7F77DFDDFFFFF
%FFFFFFFFFFFFFFFFFFFFFFDD7473EFB47FFFFFFFFFFFDFDDF7F77DFDDF7F
%77FFFFFFF7F77DFDDF7F77DFDDFFFFFFFDFDDF7F77DFDDF7F77FFFFFFF7F
%77DFDDF7F77DFDDFFFFFFFFFFFFFFFFFFFFFFFFFFFDDFEFFEFFDFFFFFFFF
%FFFFDE3DF78F7DE3DF78F7FFFFFFF78F7DE3DF78F7DE3DFFFFFFFDE3DF78
%F7DE3DF78F7FFFFFFF78F7DE3DF78F7DE3DFFFFFFFFFFFFFFFFFFFFFFFFF
%FFC3FEFFF0FDFFFFFFFFFFFFDDFDF77F7DDFDF77F7FFFFFFF77F7DDFDF77
%F7DDFDFFFFFFFDDFDF77F7DDFDF77F7FFFFFFF77F7DDFDF77F7DDFDFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDDFDF77F7DDFDF77
%F7FFFFFFF77F7DDFDF77F7DDFDFFFFFFFDDFDF77F7DDFDF77F7FFFFFFF77
%F7DDFDF77F7DDFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFDE1DF7877DE1DF7877FFFFFFF7877DE1DF7877DE1DFFFFFFFDE1DF78
%77DE1DF7877FFFFFFF7877DE1DF7877DE1DFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFDFFDF7FF7DFFDF7FF7FFFFFFF7FF7DFFDF7F
%F7DFFDFFFFFFFDFFDF7FF7DFFDF7FF7FFFFFFF7FF7DFFDF7FF7DFFDFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC001F0007C001F00
%07FFFFFFF0007C001F0007C001FFFFFFFC001F0007C001F0007FFFFFFF00
%07C001F0007C001FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFD
%FFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFD
%FFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFD
%FFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFD
%FFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFD
%FFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFDFFFF7FFFD
%FFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFDFFFF7FFFDFFFFFFFFFFD
%FFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFF7FFFDFFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFF7FFFD
%FFFF7FFFDFFFFFFFFFFDFFFF7FFFDFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFF8000E00038000E0003FFFFFFE00038000E00
%038000FFFFFFF8000E00038000E0003FFFFFFE00038000E00038000FFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFEEFFFBBFFEEFF
%FBFFFFFFEFFFBBFFEEFFFBBFFEFFFFFFFBFFEEFFFBBFFEEFFFBFFFFFFEFF
%FBBFFEEFFFBBFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFBFFEEFFFBBFFEEFFFBFFFFFFEFFFBBFFEEFFFBBFFEFFFFFFFBFFEEFF
%FBBFFEEFFFBFFFFFFEFFFBBFFEEFFFBBFFEFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFBFFEEFFFBBFFEEFFFBFFFFFFEFFFBBFFEEFF
%FBBFFEFFFFFFFBFFEEFFFBBFFEEFFFBFFFFFFEFFFBBFFEEFFFBBFFEFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFEEFFFBBFFEEFF
%FBFFFFFFEFFFBBFFEEFFFBBFFEFFFFFFFBFFEEFFFBBFFEEFFFBFFFFFFEFF
%FBBFFEEFFFBBFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFF8000E00038000E0003FFFFFFE00038000E00038000FFFFFFF8000E00
%038000E0003FFFFFFE00038000E00038000FFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%AI5_EndRaster
B
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF%%EndDocument @endspecial 173 3405 a(Figure)g(2:)36 b(AES)28 b(round)f(description,)g(cf.)h([Sa].)0 3833 y Fo(The)67 b(op)s(eration)e Fi(xtime)81b Fq(The)58 b(m)n(ultiplications)g(in)0 3933 y Fm(F)453948 y Fk(2)78 3931 y Fg(8)193 3933 y Fq(necessary)71b(to)h(compute)h(the)g(transformation)0 4033 y Fi(MixColumn)36b Fq(are)i(of)i(great)e(imp)r(ortance)h(to)g(our)g(imple-)04132 y(men)n(tation.)c(Therefore)21 b(w)n(e)h(are)g(going)f(to)h(describ)r(e)h(them)0 4232 y(in)36 b(more)f(detail.)62b(First)36 b(w)n(e)f(need)h(to)g(sa)n(y)f(a)g(few)h(w)n(ords)04332 y(ab)r(out)f(the)g(represen)n(tation)d(of)j(the)g(\014eld)gFm(F)1428 4347 y Fk(2)1461 4330 y Fg(8)1503 4332 y Fq(.)58b(In)35 b(AES)0 4431 y(the)28 b(\014eld)g Fm(F)368 4446y Fk(2)401 4429 y Fg(8)471 4431 y Fq(is)f(represen)n(ted)g(as)2024617 y Fm(F)246 4632 y Fk(2)279 4615 y Fg(8)345 4617y Fq(=)c Fm(F)477 4629 y Fk(2)521 4617 y Fq([)p Fn(x)pFq(])p Fn(=)p Fq(\()p Fn(x)735 4582 y Fk(8)791 4617 yFq(+)18 b Fn(x)921 4582 y Fk(4)977 4617 y Fq(+)g Fn(x)11074582 y Fk(3)1164 4617 y Fq(+)g Fn(x)g Fq(+)g(1\))p Fn(:)262b Fq(\(2\))0 4802 y(That)28 b(is,)g(elemen)n(ts)g(of)gFm(F)794 4817 y Fk(2)827 4800 y Fg(8)898 4802 y Fq(are)f(p)r(olynomials)g(o)n(v)n(er)f Fm(F)1722 4814 y Fk(2)17934802 y Fq(of)0 4902 y(degree)k(at)h(most)g(7.)46 b(The)31b(addition)g(and)g(m)n(ultiplication)0 5001 y(of)g(t)n(w)n(o)f(p)r(olynomials)g(is)h(done)g(mo)r(dulo)f(the)i(p)r(olynomial)05101 y Fn(x)47 5071 y Fk(8)108 5101 y Fq(+)23 b Fn(x)2435071 y Fk(4)304 5101 y Fq(+)g Fn(x)439 5071 y Fk(3)5005101 y Fq(+)g Fn(x)h Fq(+)e(1.)59 b(Since)35 b(this)g(is)g(an)g(irreducible)0 5201 y(p)r(olynomial)29 b(o)n(v)n(er)eFm(F)655 5213 y Fk(2)698 5201 y Fq(,)i(\(2\))h(de\014nes)f(a)g(\014eld.)42 b(In)29 b(this)h(rep-)0 5300 y(resen)n(tation)d(of)iFm(F)569 5315 y Fk(2)602 5299 y Fg(8)673 5300 y Fq(the)g(b)n(yte)gFo(a)c Fq(=)f(\()p Fn(a)1239 5312 y Fk(7)1277 5300 yFn(;)14 b(:)g(:)g(:)f(;)h(a)1505 5312 y Fk(1)1542 5300y Fn(;)g(a)1623 5312 y Fk(0)1660 5300 y Fq(\))29 b(cor-)05400 y(resp)r(onds)23 b(to)g(the)h(p)r(olynomial)f Fn(a)10465412 y Fk(7)1083 5400 y Fn(x)1130 5370 y Fk(7)1178 5400y Fq(+)10 b Fp(\001)k(\001)g(\001)g Fn(a)1408 5412 yFk(1)1445 5400 y Fn(x)c Fq(+)g Fn(a)1621 5412 y Fk(0)16585400 y Fq(.)36 b(The)2010 83 y(m)n(ultiplication)31 b(of)g(an)f(elemen)n(t)h Fo(a)e Fq(=)g(\()p Fn(a)3317 95 y Fk(7)3354 83y Fn(;)14 b(:)g(:)g(:)g(;)g(a)3583 95 y Fk(1)3620 83y Fn(;)g(a)3701 95 y Fk(0)3738 83 y Fq(\))31 b(in)2010183 y Fm(F)2055 198 y Fk(2)2088 181 y Fg(8)2159 183 yFq(b)n(y)d(01)p Fn(;)14 b Fq(02,)27 b(and)i(03)e(is)i(realized)f(b)n(y)g(m)n(ultiplying)h(the)2010 282 y(p)r(olynomial)h Fn(a)2486294 y Fk(7)2523 282 y Fn(x)2570 252 y Fk(7)2628 282 yFq(+)19 b Fp(\001)14 b(\001)g(\001)g Fn(a)2867 294 yFk(1)2904 282 y Fn(x)21 b Fq(+)f Fn(a)3101 294 y Fk(0)3168282 y Fq(with)31 b(the)g(p)r(olynomi-)2010 382 y(als)e(1)pFn(;)14 b(x;)g(x)20 b Fq(+)g(1,)30 b(resp)r(ectiv)n(ely)-7b(,)29 b(and)h(reducing)f(the)h(result)2010 482 y(mo)r(dulo)dFn(x)2354 451 y Fk(8)2411 482 y Fq(+)18 b Fn(x)2541 451y Fk(4)2597 482 y Fq(+)g Fn(x)2727 451 y Fk(3)2783 482y Fq(+)g Fn(x)h Fq(+)f(1.)36 b(Hence)2550 666 y(01)17b Fp(\001)i Fo(a)83 b Fq(=)g Fo(a)2550 791 y Fq(03)17b Fp(\001)i Fo(a)83 b Fq(=)g(02)17 b Fp(\001)i Fo(a)gFq(+)f Fo(a)p Fn(:)2010 975 y Fq(W)-7 b(e)55 b(see)g(that)g(the)h(only)e(non-trivial)g(m)n(ultiplication)2010 1075 y(needed)30b(to)g(m)n(ultiply)h(a)f(column)g(of)g(a)g(state)g(b)n(y)g(the)h(ma-)2010 1174 y(trix)23 b(in)h(\(1\))f(is)h(the)f(m)n(ultiplication)h(b)n(y)f(02.)34 b(F)-7 b(ollo)n(wing)23 b(the)2010 1274 y(notation)35b(in)i([DR2])f(w)n(e)g(denote)g(the)g(m)n(ultiplication)g(of)20101374 y(b)n(yte)29 b Fo(a)h Fq(b)n(y)g(02)e(b)n(y)i Fi(xtime)mFq(\()p Fo(a)p Fq(\).)44 b(The)30 b(crucial)f(observ)-5b(ation)2010 1473 y(is)24 b(that)g Fi(xtime)n Fq(\()pFo(a)p Fq(\))h(is)f(simply)g(a)g(shift)h(of)f(b)n(yte)gFo(a)p Fq(,)h(follo)n(w)n(ed)2010 1573 y(in)20 b(some)f(cases)g(b)n(y)g(an)h(xor)e(of)i(t)n(w)n(o)f(b)n(ytes.)34 b(More)19 b(precisely)-7b(,)2010 1672 y(for)27 b Fo(a)d Fq(=)e(\()p Fn(a)23701684 y Fk(7)2408 1672 y Fn(;)14 b(:)g(:)g(:)f(;)h(a)26361684 y Fk(0)2673 1672 y Fq(\))2052 2056 y Fi(xtime)mFq(\()p Fo(a)p Fq(\))24 b(=)2491 1786 y Ff(8)2491 1861y(>)2491 1886 y(>)2491 1911 y(>)2491 1936 y(>)2491 1961y(<)2491 2110 y(>)2491 2135 y(>)2491 2160 y(>)2491 2185y(>)2491 2210 y(:)2606 1856 y Fq(\()p Fn(a)2682 1868y Fk(6)2720 1856 y Fn(;)14 b(:)g(:)g(:)f(;)h(a)2948 1868y Fk(0)2985 1856 y Fn(;)g Fq(0\))p Fn(;)2689 1956 y Fq(if)29b Fn(a)2810 1968 y Fk(7)2870 1956 y Fq(=)22 b(0)26062155 y(\()p Fn(a)2682 2167 y Fk(6)2720 2155 y Fn(;)14b(:)g(:)g(:)f(;)h(a)2948 2167 y Fk(0)2985 2155 y Fn(;)gFq(0\))19 b Fp(\010)f Fq(\(0)p Fn(;)c Fq(0)p Fn(;)g Fq(0)pFn(;)g Fq(1)p Fn(;)g Fq(1)p Fn(;)g Fq(0)p Fn(;)g Fq(1)pFn(;)g Fq(1\))p Fn(;)2689 2255 y Fq(if)29 b Fn(a)28102267 y Fk(7)2870 2255 y Fq(=)22 b(1)2010 2435 y(This)37b(\014nishes)f(our)h(brief)f(description)h(of)f(the)i(AES)e(en-)20102535 y(cryption)27 b(pro)r(cedure.)2010 2734 y(In)f(a)g(pure)g(soft)n(w)n(are)f(implemen)n(tation)h(of)h(the)f(algorithm)20102834 y(on)d(an)f(8051)f(based)h Fn(\026)p Fq(-con)n(troller)f(these)i(transformations)2010 2933 y(are)31 b(p)r(erformed)h(one)f(after)h(the)h(other)e(within)i(the)f(CPU)2010 3033 y(using)19 b(48)g(b)n(ytes)g(of)h(directly)f(addressable)f(in)n(ternal)h(RAM,)2010 3133y(and)29 b(taking)f(roughly)g(12000)f(clo)r(c)n(k)h(cycles)h(to)g(encrypt)f(a)2010 3232 y(128)g(bit)h(data)g(blo)r(c)n(k)f(with)h(a)g(128-bit)f(k)n(ey)-7 b(.)40 b(The)29 b(decryp-)2010 3332y(tion)c(algorithm)e(tak)n(es)g(ab)r(out)i(30\045)e(more)h(time)h(than)g(the)2010 3432 y(cipher)g(and)h(requires)e(at)i(least)f(the)h(same)f(b)n(ytes)g(of)h(in)n(ter-)2010 3531 y(nal)e(RAM)i(resources.)33b(This)25 b(is)g(due)f(to)h(the)g(fact)g(that)g(the)20103631 y(soft)n(w)n(are)33 b(implemen)n(tation)i(of)g(the)g(in)n(v)n(erse)f Fi(MixColumn)2010 3730 y Fq(transformation)g(used)i(for)f(decryption)g(is)h(less)f(e\016cien)n(t)2010 3830 y(than)20b(the)f Fi(MixColumn)d Fq(transformation)i(used)h(for)g(encryp-)20103930 y(tion.)2010 4347 y Fr(4)112 b(The)54 b(public-k)m(ey)e(copro)s(cessor)i(based)2178 4463 y(AES)37 b(implemen)m(tation)20104764 y Fq(The)e(formerly)g(men)n(tioned)g(t)n(yp)r(e)h(of)f(public-k)n(ey)g(copro-)2010 4863 y(cessor)22 b(is)i(actually)f(useful)h(to)g(impro)n(v)n(e)e(the)i(p)r(erformance)2010 4963 y(of)j(the)h(follo)n(wing)e(transformations)g(of)h(the)h(AES)f(cipher:)20935230 y Fp(\017)41 b Fi(MixColumn)l Fq(,)2093 5400 y Fp(\017)gFq(in)n(v)n(erse)26 b Fi(MixColumn)l Fq(,)p eop%%Page: 5 55 4 bop 83 83 a Fp(\017)41 b Fq(KeyExpansion)26 b(and)83235 y Fp(\017)41 b Fi(AddRoundKey)-5 b Fq(.)0 473 y(Other)79b(transformations)f(lik)n(e)h(the)h Fi(ByteSub)c Fq(and)0573 y Fi(ShiftRow)32 b Fq(are)i(p)r(erformed)g(inside)h(the)g(standard)f(CPU)0 672 y(and)25 b(therefore)f(remain)g(unc)n(hanged.)36b(The)25 b(reason)e(of)i(not)0 772 y(using)38 b(the)g(copro)r(cessor)e(to)i(accelerate)f(these)h(t)n(w)n(o)f(last)0 872 y(transformations)f(is)h(the)h(follo)n(wing.)65 b(The)38 b(fastest)f(w)n(a)n(y)0971 y(of)25 b(p)r(erforming)g(the)h Fi(ByteSub)c Fq(transformation)i(is)i(b)n(y)f(the)0 1071 y(use)f(of)f(a)g(lo)r(ok-up)g(table)h(\(the)g(so)f(called)g(S-Bo)n(x\))g(con)n(tain-)0 1171 y(ing)34b(256)f(8-bit)h(v)-5 b(alues.)56 b(Because)34 b(b)r(oth)g(of)h(them,)h(table)0 1270 y(indices)24 b(and)f(table)h(con)n(ten)n(ts)f(are)g(8-bit)g(v)-5 b(alues,)24 b(the)g(8-bit)0 1370 y(CPU)h(is)h(the)g(most)f(suitable)h(unit)g(to)f(p)r(erform)g(this)h(table)01469 y(access.)45 b(Nev)n(ertheless,)30 b(w)n(e)h(advice)f(the)h(reader)e(to)h(care-)0 1569 y(fully)i(consult)f(our)g(section)g(5)g(on)g(the)h(ph)n(ysical)f(securit)n(y)0 1669 y(of)d(the)g(AES.)01868 y(On)39 b(the)h(other)f(hand,)j(the)e Fi(ShiftRow)cFq(transformation)0 1968 y(can)31 b(b)r(e)g(em)n(b)r(edded)g(in)n(to)g(the)h Fi(ByteSub)c Fq(transformation)0 2067 y(in)21b(suc)n(h)g(a)g(w)n(a)n(y)e(that)j(there)f(is)f(no)h(p)r(erformance)f(loss.)34 b(The)0 2167 y(next)h(\014gure)g(describ)r(es)f(the)i(execution)f(parts)f(executed)0 2266 y(in)27 b(the)g(CPU)f(and)g(the)h(other)f(ones)g(executed)g(within)i(the)0 2366 y(copro)r(cessor:)03864 y @beginspecial 0 @llx 0 @lly 365 @urx 274 @ury2232 @rwi @setspecial%%BeginDocument: AES_transformations.eps%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: D:\Research\own Papers\AES on C2K\final version\AES_transformations.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 365 274
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 365 274
%AI3_TileBox: 0 0 365 274
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

  0.000 0.000 0.000 0.000 k
 [] 0 d
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  0.3600 272.7600 m
  364.5600 272.7600 L
  364.5600 -0.3600 L
  0.3600 -0.3600 L
  0.3600 272.7600 L
F
  182.4600 136.2000 m
F
U
  0.000 0.000 0.000 1.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
u
  300.8400 184.8000 m
  212.8800 184.8000 L
  212.8800 166.0800 L
  300.8400 166.0800 L
  300.8400 184.8000 L
s
  256.8600 175.4400 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 216.6000 171.0000 0 Tp
TP
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(Key Expansion\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
u
  300.8400 102.7200 m
  212.8800 102.7200 L
  212.8800 84.2400 L
  300.8400 84.2400 L
  300.8400 102.7200 L
s
  256.8600 93.4800 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 216.6000 89.1600 0 Tp
TP
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(MixColumns\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
u
  300.8400 145.2000 m
  212.8800 145.2000 L
  212.8800 126.7200 L
  300.8400 126.7200 L
  300.8400 145.2000 L
s
  256.8600 135.9600 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 216.6000 131.6400 0 Tp
TP
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(AddRoundKey\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
u
  127.8000 145.2000 m
  61.0800 145.2000 L
  61.0800 112.0800 L
  127.8000 112.0800 L
  127.8000 145.2000 L
s
  94.4400 128.6400 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 64.8000 131.6400 0 Tp
TP
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(SubBytes\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 111.3600 131.6400 0 Tp
TP
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
( +\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.8000 117.0000 0 Tp
TP
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(ShiftRows\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  136.9200 230.2800 m
  100.4400 230.2800 L
  100.4400 212.0400 L
  136.9200 212.0400 L
  136.9200 230.2800 L
n
  118.6800 221.1600 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 104.2800 216.7200 0 Tp
TP
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(CPU\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  318.9600 230.2800 m
  206.7600 230.2800 L
  206.7600 212.0400 L
  318.9600 212.0400 L
  318.9600 230.2800 L
n
  262.8600 221.1600 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 210.3600 216.7200 0 Tp
TP
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(COPROCESSOR\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0 XR

  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  167.5200 211.9200 m
  167.4000 212.0400 L
  167.2800 212.1600 L
  167.2800 212.1600 L
  167.1600 212.0400 L
  167.1600 210.6000 L
  167.1600 210.4800 L
  167.2800 210.3600 L
  167.4000 210.3600 L
  167.5200 210.4800 L
  167.5200 211.9200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
  167.5200 209.4000 m
  167.5200 209.5200 L
  167.4000 209.6400 L
  167.2800 209.6400 L
  167.1600 209.5200 L
  167.1600 207.9600 L
  167.1600 207.8400 L
  167.2800 207.7200 L
  167.4000 207.7200 L
  167.5200 207.8400 L
  167.5200 209.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 206.7600 m
  167.5200 206.8800 L
  167.4000 207.0000 L
  167.2800 207.0000 L
  167.1600 206.8800 L
  167.1600 205.3200 L
  167.1600 205.2000 L
  167.2800 205.0800 L
  167.4000 205.0800 L
  167.5200 205.2000 L
  167.5200 206.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 204.1200 m
  167.5200 204.2400 L
  167.4000 204.3600 L
  167.2800 204.3600 L
  167.1600 204.2400 L
  167.1600 202.8000 L
  167.1600 202.6800 L
  167.2800 202.5600 L
  167.4000 202.5600 L
  167.5200 202.6800 L
  167.5200 204.1200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 201.4800 m
  167.5200 201.6000 L
  167.4000 201.7200 L
  167.2800 201.7200 L
  167.1600 201.6000 L
  167.1600 200.1600 L
  167.1600 200.0400 L
  167.2800 199.9200 L
  167.4000 199.9200 L
  167.5200 200.0400 L
  167.5200 201.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 198.8400 m
  167.5200 198.9600 L
  167.4000 199.0800 L
  167.2800 199.0800 L
  167.1600 198.9600 L
  167.1600 197.5200 L
  167.1600 197.4000 L
  167.2800 197.2800 L
  167.4000 197.2800 L
  167.5200 197.4000 L
  167.5200 198.8400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 196.2000 m
  167.5200 196.3200 L
  167.4000 196.5600 L
  167.2800 196.5600 L
  167.1600 196.3200 L
  167.1600 194.8800 L
  167.1600 194.7600 L
  167.2800 194.6400 L
  167.4000 194.6400 L
  167.5200 194.7600 L
  167.5200 196.2000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 193.6800 m
  167.5200 193.8000 L
  167.4000 193.9200 L
  167.2800 193.9200 L
  167.1600 193.8000 L
  167.1600 192.2400 L
  167.1600 192.1200 L
  167.2800 192.0000 L
  167.4000 192.0000 L
  167.5200 192.1200 L
  167.5200 193.6800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 191.0400 m
  167.5200 191.1600 L
  167.4000 191.2800 L
  167.2800 191.2800 L
  167.1600 191.1600 L
  167.1600 189.6000 L
  167.1600 189.4800 L
  167.2800 189.3600 L
  167.4000 189.3600 L
  167.5200 189.4800 L
  167.5200 191.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 188.4000 m
  167.5200 188.5200 L
  167.4000 188.6400 L
  167.2800 188.6400 L
  167.1600 188.5200 L
  167.1600 186.9600 L
  167.1600 186.8400 L
  167.2800 186.7200 L
  167.4000 186.7200 L
  167.5200 186.8400 L
  167.5200 188.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 185.7600 m
  167.5200 185.8800 L
  167.4000 186.0000 L
  167.2800 186.0000 L
  167.1600 185.8800 L
  167.1600 184.3200 L
  167.1600 184.2000 L
  167.2800 184.0800 L
  167.4000 184.0800 L
  167.5200 184.2000 L
  167.5200 185.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 183.1200 m
  167.5200 183.2400 L
  167.4000 183.3600 L
  167.2800 183.3600 L
  167.1600 183.2400 L
  167.1600 181.8000 L
  167.1600 181.6800 L
  167.2800 181.5600 L
  167.4000 181.5600 L
  167.5200 181.6800 L
  167.5200 183.1200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 180.4800 m
  167.5200 180.6000 L
  167.4000 180.7200 L
  167.2800 180.7200 L
  167.1600 180.6000 L
  167.1600 179.1600 L
  167.1600 179.0400 L
  167.2800 178.9200 L
  167.4000 178.9200 L
  167.5200 179.0400 L
  167.5200 180.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 177.8400 m
  167.5200 177.9600 L
  167.4000 178.0800 L
  167.2800 178.0800 L
  167.1600 177.9600 L
  167.1600 176.5200 L
  167.1600 176.4000 L
  167.2800 176.2800 L
  167.4000 176.2800 L
  167.5200 176.4000 L
  167.5200 177.8400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 175.2000 m
  167.5200 175.3200 L
  167.4000 175.5600 L
  167.2800 175.5600 L
  167.1600 175.3200 L
  167.1600 173.8800 L
  167.1600 173.7600 L
  167.2800 173.6400 L
  167.4000 173.6400 L
  167.5200 173.7600 L
  167.5200 175.2000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 172.6800 m
  167.5200 172.8000 L
  167.4000 172.9200 L
  167.2800 172.9200 L
  167.1600 172.8000 L
  167.1600 171.2400 L
  167.1600 171.1200 L
  167.2800 171.0000 L
  167.4000 171.0000 L
  167.5200 171.1200 L
  167.5200 172.6800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 170.0400 m
  167.5200 170.1600 L
  167.4000 170.2800 L
  167.2800 170.2800 L
  167.1600 170.1600 L
  167.1600 168.6000 L
  167.1600 168.4800 L
  167.2800 168.3600 L
  167.4000 168.3600 L
  167.5200 168.4800 L
  167.5200 170.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 167.4000 m
  167.5200 167.5200 L
  167.4000 167.6400 L
  167.2800 167.6400 L
  167.1600 167.5200 L
  167.1600 165.9600 L
  167.1600 165.8400 L
  167.2800 165.7200 L
  167.4000 165.7200 L
  167.5200 165.8400 L
  167.5200 167.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 164.7600 m
  167.5200 164.8800 L
  167.4000 165.0000 L
  167.2800 165.0000 L
  167.1600 164.8800 L
  167.1600 163.3200 L
  167.1600 163.2000 L
  167.2800 163.0800 L
  167.4000 163.0800 L
  167.5200 163.2000 L
  167.5200 164.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 162.1200 m
  167.5200 162.2400 L
  167.4000 162.3600 L
  167.2800 162.3600 L
  167.1600 162.2400 L
  167.1600 160.8000 L
  167.1600 160.6800 L
  167.2800 160.4400 L
  167.4000 160.4400 L
  167.5200 160.6800 L
  167.5200 162.1200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 159.4800 m
  167.5200 159.6000 L
  167.4000 159.7200 L
  167.2800 159.7200 L
  167.1600 159.6000 L
  167.1600 158.1600 L
  167.1600 158.0400 L
  167.2800 157.9200 L
  167.4000 157.9200 L
  167.5200 158.0400 L
  167.5200 159.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 156.8400 m
  167.5200 156.9600 L
  167.4000 157.0800 L
  167.2800 157.0800 L
  167.1600 156.9600 L
  167.1600 155.5200 L
  167.1600 155.4000 L
  167.2800 155.2800 L
  167.4000 155.2800 L
  167.5200 155.4000 L
  167.5200 156.8400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 154.2000 m
  167.5200 154.3200 L
  167.4000 154.4400 L
  167.2800 154.4400 L
  167.1600 154.3200 L
  167.1600 152.8800 L
  167.1600 152.7600 L
  167.2800 152.6400 L
  167.4000 152.6400 L
  167.5200 152.7600 L
  167.5200 154.2000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 151.6800 m
  167.5200 151.8000 L
  167.4000 151.9200 L
  167.2800 151.9200 L
  167.1600 151.8000 L
  167.1600 150.2400 L
  167.1600 150.1200 L
  167.2800 150.0000 L
  167.4000 150.0000 L
  167.5200 150.1200 L
  167.5200 151.6800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 149.0400 m
  167.5200 149.1600 L
  167.4000 149.2800 L
  167.2800 149.2800 L
  167.1600 149.1600 L
  167.1600 147.6000 L
  167.1600 147.4800 L
  167.2800 147.3600 L
  167.4000 147.3600 L
  167.5200 147.4800 L
  167.5200 149.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 146.4000 m
  167.5200 146.5200 L
  167.4000 146.6400 L
  167.2800 146.6400 L
  167.1600 146.5200 L
  167.1600 144.9600 L
  167.1600 144.8400 L
  167.2800 144.7200 L
  167.4000 144.7200 L
  167.5200 144.8400 L
  167.5200 146.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 143.7600 m
  167.5200 143.8800 L
  167.4000 144.0000 L
  167.2800 144.0000 L
  167.1600 143.8800 L
  167.1600 142.3200 L
  167.1600 142.2000 L
  167.2800 142.0800 L
  167.4000 142.0800 L
  167.5200 142.2000 L
  167.5200 143.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 141.1200 m
  167.5200 141.2400 L
  167.4000 141.3600 L
  167.2800 141.3600 L
  167.1600 141.2400 L
  167.1600 139.8000 L
  167.1600 139.6800 L
  167.2800 139.4400 L
  167.4000 139.4400 L
  167.5200 139.6800 L
  167.5200 141.1200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 138.4800 m
  167.5200 138.6000 L
  167.4000 138.7200 L
  167.2800 138.7200 L
  167.1600 138.6000 L
  167.1600 137.1600 L
  167.1600 137.0400 L
  167.2800 136.9200 L
  167.4000 136.9200 L
  167.5200 137.0400 L
  167.5200 138.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 135.8400 m
  167.5200 135.9600 L
  167.4000 136.0800 L
  167.2800 136.0800 L
  167.1600 135.9600 L
  167.1600 134.5200 L
  167.1600 134.4000 L
  167.2800 134.2800 L
  167.4000 134.2800 L
  167.5200 134.4000 L
  167.5200 135.8400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 133.2000 m
  167.5200 133.3200 L
  167.4000 133.4400 L
  167.2800 133.4400 L
  167.1600 133.3200 L
  167.1600 131.8800 L
  167.1600 131.7600 L
  167.2800 131.6400 L
  167.4000 131.6400 L
  167.5200 131.7600 L
  167.5200 133.2000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 130.6800 m
  167.5200 130.8000 L
  167.4000 130.9200 L
  167.2800 130.9200 L
  167.1600 130.8000 L
  167.1600 129.2400 L
  167.1600 129.1200 L
  167.2800 129.0000 L
  167.4000 129.0000 L
  167.5200 129.1200 L
  167.5200 130.6800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 128.0400 m
  167.5200 128.1600 L
  167.4000 128.2800 L
  167.2800 128.2800 L
  167.1600 128.1600 L
  167.1600 126.6000 L
  167.1600 126.4800 L
  167.2800 126.3600 L
  167.4000 126.3600 L
  167.5200 126.4800 L
  167.5200 128.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 125.4000 m
  167.5200 125.5200 L
  167.4000 125.6400 L
  167.2800 125.6400 L
  167.1600 125.5200 L
  167.1600 123.9600 L
  167.1600 123.8400 L
  167.2800 123.7200 L
  167.4000 123.7200 L
  167.5200 123.8400 L
  167.5200 125.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 122.7600 m
  167.5200 122.8800 L
  167.4000 123.0000 L
  167.2800 123.0000 L
  167.1600 122.8800 L
  167.1600 121.3200 L
  167.1600 121.2000 L
  167.2800 121.0800 L
  167.4000 121.0800 L
  167.5200 121.2000 L
  167.5200 122.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 120.1200 m
  167.5200 120.2400 L
  167.4000 120.3600 L
  167.2800 120.3600 L
  167.1600 120.2400 L
  167.1600 118.8000 L
  167.1600 118.6800 L
  167.2800 118.4400 L
  167.4000 118.4400 L
  167.5200 118.6800 L
  167.5200 120.1200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 117.4800 m
  167.5200 117.6000 L
  167.4000 117.7200 L
  167.2800 117.7200 L
  167.1600 117.6000 L
  167.1600 116.1600 L
  167.1600 116.0400 L
  167.2800 115.9200 L
  167.4000 115.9200 L
  167.5200 116.0400 L
  167.5200 117.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 114.8400 m
  167.5200 114.9600 L
  167.4000 115.0800 L
  167.2800 115.0800 L
  167.1600 114.9600 L
  167.1600 113.5200 L
  167.1600 113.4000 L
  167.2800 113.2800 L
  167.4000 113.2800 L
  167.5200 113.4000 L
  167.5200 114.8400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 112.2000 m
  167.5200 112.3200 L
  167.4000 112.4400 L
  167.2800 112.4400 L
  167.1600 112.3200 L
  167.1600 110.8800 L
  167.1600 110.7600 L
  167.2800 110.6400 L
  167.4000 110.6400 L
  167.5200 110.7600 L
  167.5200 112.2000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 109.6800 m
  167.5200 109.8000 L
  167.4000 109.9200 L
  167.2800 109.9200 L
  167.1600 109.8000 L
  167.1600 108.2400 L
  167.1600 108.1200 L
  167.2800 108.0000 L
  167.4000 108.0000 L
  167.5200 108.1200 L
  167.5200 109.6800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 107.0400 m
  167.5200 107.1600 L
  167.4000 107.2800 L
  167.2800 107.2800 L
  167.1600 107.1600 L
  167.1600 105.6000 L
  167.1600 105.4800 L
  167.2800 105.3600 L
  167.4000 105.3600 L
  167.5200 105.4800 L
  167.5200 107.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 104.4000 m
  167.5200 104.5200 L
  167.4000 104.6400 L
  167.2800 104.6400 L
  167.1600 104.5200 L
  167.1600 102.9600 L
  167.1600 102.8400 L
  167.2800 102.7200 L
  167.4000 102.7200 L
  167.5200 102.8400 L
  167.5200 104.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 101.7600 m
  167.5200 101.8800 L
  167.4000 102.0000 L
  167.2800 102.0000 L
  167.1600 101.8800 L
  167.1600 100.3200 L
  167.1600 100.2000 L
  167.2800 100.0800 L
  167.4000 100.0800 L
  167.5200 100.2000 L
  167.5200 101.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 99.1200 m
  167.5200 99.2400 L
  167.4000 99.3600 L
  167.2800 99.3600 L
  167.1600 99.2400 L
  167.1600 97.8000 L
  167.1600 97.5600 L
  167.2800 97.4400 L
  167.4000 97.4400 L
  167.5200 97.5600 L
  167.5200 99.1200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 96.4800 m
  167.5200 96.6000 L
  167.4000 96.7200 L
  167.2800 96.7200 L
  167.1600 96.6000 L
  167.1600 95.1600 L
  167.1600 95.0400 L
  167.2800 94.9200 L
  167.4000 94.9200 L
  167.5200 95.0400 L
  167.5200 96.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 93.8400 m
  167.5200 93.9600 L
  167.4000 94.0800 L
  167.2800 94.0800 L
  167.1600 93.9600 L
  167.1600 92.5200 L
  167.1600 92.4000 L
  167.2800 92.2800 L
  167.4000 92.2800 L
  167.5200 92.4000 L
  167.5200 93.8400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 91.2000 m
  167.5200 91.3200 L
  167.4000 91.4400 L
  167.2800 91.4400 L
  167.1600 91.3200 L
  167.1600 89.8800 L
  167.1600 89.7600 L
  167.2800 89.6400 L
  167.4000 89.6400 L
  167.5200 89.7600 L
  167.5200 91.2000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 88.5600 m
  167.5200 88.8000 L
  167.4000 88.9200 L
  167.2800 88.9200 L
  167.1600 88.8000 L
  167.1600 87.2400 L
  167.1600 87.1200 L
  167.2800 87.0000 L
  167.4000 87.0000 L
  167.5200 87.1200 L
  167.5200 88.5600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 86.0400 m
  167.5200 86.1600 L
  167.4000 86.2800 L
  167.2800 86.2800 L
  167.1600 86.1600 L
  167.1600 84.6000 L
  167.1600 84.4800 L
  167.2800 84.3600 L
  167.4000 84.3600 L
  167.5200 84.4800 L
  167.5200 86.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 83.4000 m
  167.5200 83.5200 L
  167.4000 83.6400 L
  167.2800 83.6400 L
  167.1600 83.5200 L
  167.1600 81.9600 L
  167.1600 81.8400 L
  167.2800 81.7200 L
  167.4000 81.7200 L
  167.5200 81.8400 L
  167.5200 83.4000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 80.7600 m
  167.5200 80.8800 L
  167.4000 81.0000 L
  167.2800 81.0000 L
  167.1600 80.8800 L
  167.1600 79.3200 L
  167.1600 79.2000 L
  167.2800 79.0800 L
  167.4000 79.0800 L
  167.5200 79.2000 L
  167.5200 80.7600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 78.1200 m
  167.5200 78.2400 L
  167.4000 78.3600 L
  167.2800 78.3600 L
  167.1600 78.2400 L
  167.1600 76.8000 L
  167.1600 76.5600 L
  167.2800 76.4400 L
  167.4000 76.4400 L
  167.5200 76.5600 L
  167.5200 78.1200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 75.4800 m
  167.5200 75.6000 L
  167.4000 75.7200 L
  167.2800 75.7200 L
  167.1600 75.6000 L
  167.1600 74.1600 L
  167.1600 74.0400 L
  167.2800 73.9200 L
  167.4000 73.9200 L
  167.5200 74.0400 L
  167.5200 75.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 72.8400 m
  167.5200 72.9600 L
  167.4000 73.0800 L
  167.2800 73.0800 L
  167.1600 72.9600 L
  167.1600 71.5200 L
  167.1600 71.4000 L
  167.2800 71.2800 L
  167.4000 71.2800 L
  167.5200 71.4000 L
  167.5200 72.8400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  167.5200 70.2000 m
  167.5200 70.3200 L
  167.4000 70.4400 L
  167.2800 70.4400 L
  167.1600 70.3200 L
  167.1600 69.3600 L
  167.1600 69.3600 L
  167.2800 69.2400 L
  167.2800 69.2400 L
  167.5200 69.2400 L
  167.5200 70.2000 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 J
  97.4400 93.7200 m
  209.2800 93.7200 L
S
U
u
1 XR

  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  208.9200 91.8000 m
  212.8800 93.7200 L
  208.9200 95.6400 L
  208.9200 91.8000 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  252.2400 84.6000 m
  252.2400 72.4800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  252.2400 72.4800 m
  309.9600 72.4800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  309.9600 72.4800 m
  309.9600 136.0800 L
S
U
u
  309.9600 136.0800 m
  304.4400 136.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  304.6800 138.1200 m
  300.8400 136.0800 L
  304.6800 134.2800 L
  304.6800 138.1200 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  212.8800 136.0800 m
  131.5200 136.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  131.7600 138.1200 m
  127.8000 136.0800 L
  131.7600 134.2800 L
  131.7600 138.1200 L
F
U
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
u
  197.6400 69.3600 m
  149.1600 69.3600 L
  149.1600 54.7200 L
  197.6400 54.7200 L
  197.6400 69.3600 L
n
  173.4000 62.0400 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 152.7600 58.8000 0 Tp
TP
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(X-BUS\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  252.2400 166.5600 m
  252.2400 148.9200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  250.2000 149.1600 m
  252.2400 145.2000 L
  254.0400 149.1600 L
  250.2000 149.1600 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  252.2400 127.0800 m
  252.2400 106.3200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  250.2000 106.5600 m
  252.2400 102.7200 L
  254.0400 106.5600 L
  250.2000 106.5600 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  309.9600 175.6800 m
  304.4400 175.6800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  304.6800 177.6000 m
  300.8400 175.6800 L
  304.6800 173.7600 L
  304.6800 177.6000 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  97.4400 163.4400 m
  97.4400 148.9200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  95.5200 149.1600 m
  97.4400 145.2000 L
  99.3600 149.1600 L
  95.5200 149.1600 L
F
U
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
u
  249.2400 203.0400 m
  228.0000 203.0400 L
  228.0000 190.8000 L
  249.2400 190.8000 L
  249.2400 203.0400 L
n
  238.6200 196.9200 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 231.6000 194.2800 0 Tp
TP
/_Times-Bold 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(Key\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  300.8400 166.5600 m
  255.2400 166.5600 L
  255.2400 154.3200 L
  300.8400 154.3200 L
  300.8400 166.5600 L
n
  278.0400 160.4400 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 258.9600 157.9200 0 Tp
TP
/_Times-Bold 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(Round key\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  97.4400 199.9200 m
  76.2000 199.9200 L
  76.2000 187.8000 L
  97.4400 187.8000 L
  97.4400 199.9200 L
n
  86.8200 193.8600 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 79.8000 191.2800 0 Tp
TP
/_Times-Bold 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(Text\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  185.5200 108.8400 m
  155.1600 108.8400 L
  155.1600 96.7200 L
  185.5200 96.7200 L
  185.5200 108.8400 L
n
  170.3400 102.7800 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 158.8800 100.2000 0 Tp
TP
/_Times-Bold 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(State\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  312.9600 120.9600 m
  282.6000 120.9600 L
  282.6000 108.8400 L
  312.9600 108.8400 L
  312.9600 120.9600 L
n
  297.7800 114.9000 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 286.2000 112.3200 0 Tp
TP
/_Times-Bold 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(State\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  191.6400 151.3200 m
  155.1600 151.3200 L
  155.1600 139.2000 L
  191.6400 139.2000 L
  191.6400 151.3200 L
n
  173.4000 145.2600 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 158.8800 142.8000 0 Tp
TP
/_Times-Bold 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(State\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  252.2400 154.3200 m
  309.9600 154.3200 L
S
U
u
  0.000 0.000 0.000 1.000 K
  309.9600 154.3200 m
  309.9600 175.6800 L
S
U
u
  252.2400 199.9200 m
  252.2400 188.4000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  250.2000 188.6400 m
  252.2400 184.8000 L
  254.0400 188.6400 L
  250.2000 188.6400 L
F
U
  0.000 0.000 0.000 1.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
u
  149.1600 181.8000 m
  61.0800 181.8000 L
  61.0800 163.0800 L
  149.1600 163.0800 L
  149.1600 181.8000 L
s
  105.1200 172.4400 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 64.8000 168.0000 0 Tp
TP
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(AddRoundKey\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  97.4400 111.8400 m
  97.4400 93.7200 L
S
U
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
u
  258.3600 120.9600 m
  228.0000 120.9600 L
  228.0000 108.8400 L
  258.3600 108.8400 L
  258.3600 120.9600 L
n
  243.1800 114.9000 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 231.6000 112.3200 0 Tp
TP
/_Times-Bold 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(State\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
u
  106.5600 160.4400 m
  76.2000 160.4400 L
  76.2000 148.3200 L
  106.5600 148.3200 L
  106.5600 160.4400 L
n
  91.3800 154.3800 m
F
U
0 To
1.0000 0.0000 0.0000 1.0000 79.8000 151.8000 0 Tp
TP
/_Times-Bold 7.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(State\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  97.4400 199.9200 m
  97.4400 185.4000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  95.5200 185.6400 m
  97.4400 181.8000 L
  99.3600 185.6400 L
  95.5200 185.6400 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  252.2400 190.8000 m
  115.6800 190.8000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  115.6800 190.8000 m
  115.6800 185.4000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  113.7600 185.6400 m
  115.6800 181.8000 L
  117.6000 185.6400 L
  113.7600 185.6400 L
F
U
q
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
*u
  0.3600 272.7600 m
  363.8400 272.7600 L
  363.8400 0.3600 L
  0.3600 0.3600 L
  0.3600 272.7600 L
  0.3600 272.7600 L
h W
n
  182.1000 136.5600 m
h W
n
*U
Q
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF%%EndDocument @endspecial 27 4047 a(Figure)f(3:)36 b(Execution)27b(of)h(the)g(AES)f(transformations)f(.)0 4418 y Fj(4.1)105b(The)35 b Fe(MixColumn)d Fj(transformation)0 4703 yFq(The)22 b(m)n(ultiplication)g(of)h(columns)e(\()p Fi(MixColumn)mFq(\))i(is)f(based)0 4802 y(on)31 b(the)h Fi(xtime)dFq(op)r(eration)i(as)f(de\014ned)i(within)g(the)g(AES)04902 y(sp)r(eci\014cation.)61 b(It)37 b(m)n(ultiplies)f(a)f(b)n(yte)h(of)g(the)g(so)f(called)0 5001 y(state)c(b)n(y)f(2)g(mo)r(dulo)h(the)g(irreducible)f(p)r(olynomial)g Fn(x)1737 4971 y Fk(8)17955001 y Fq(+)0 5101 y Fn(x)47 5071 y Fk(4)96 5101 y Fq(+)11b Fn(x)219 5071 y Fk(3)267 5101 y Fq(+)g Fn(x)g Fq(+)g(1.)35b(This)24 b(op)r(eration)e(is)i(usually)g(p)r(erformed)05201 y(on)e(a)g(b)n(yte)g(b)n(y)g(left)h(shifting)g(the)f(b)n(yte)h(\(m)n(ultiplication)f(b)n(y)0 5300 y(2\))i(and,)h(in)g(case)e(of)h(o)n(v)n(er\015o)n(w,)f(xoring)g(\(addition)h(mo)r(dulo)05400 y(2\))j(with)i(the)f(hexadecimal)e(v)-5 b(alue)28b(0)p Fn(x)p Fq(1)p Fn(b)p Fq(.)2010 83 y(The)56 b(MixColumn)f(transformation)f(requires)h(matrix)2010 183 y(m)n(ultiplication)25b(in)g(the)h(\014eld)f Fm(F)2997 153 y Fk(8)2997 203y(2)3040 183 y Fq(.)36 b(In)25 b(an)g(8-bit)g(CPU,)g(this)2010282 y(can)f(b)r(e)h(implemen)n(ted)h(in)e(an)h(e\016cien)n(t)g(w)n(a)n(y)e(for)h(eac)n(h)g(col-)2010 382 y(umn)k(as)f(follo)n(ws:)2130573 y Fn(y)2171 585 y Fk(0)2291 573 y Fq(=)82 b(02)18b Fp(\003)g Fn(x)2647 585 y Fk(0)2703 573 y Fp(\010)gFq(03)f Fp(\003)h Fn(x)2994 585 y Fk(1)3050 573 y Fp(\010)gFq(01)g Fp(\003)g Fn(x)3342 585 y Fk(2)3398 573 y Fp(\010)gFq(01)g Fp(\003)g Fn(x)3690 585 y Fk(3)2130 698 y Fn(y)2171710 y Fk(1)2291 698 y Fq(=)82 b(01)18 b Fp(\003)g Fn(x)2647710 y Fk(0)2703 698 y Fp(\010)g Fq(02)f Fp(\003)h Fn(x)2994710 y Fk(1)3050 698 y Fp(\010)g Fq(03)g Fp(\003)g Fn(x)3342710 y Fk(2)3398 698 y Fp(\010)g Fq(01)g Fp(\003)g Fn(x)3690710 y Fk(3)2130 822 y Fn(y)2171 834 y Fk(2)2291 822 yFq(=)82 b(01)18 b Fp(\003)g Fn(x)2647 834 y Fk(0)2703822 y Fp(\010)g Fq(01)f Fp(\003)h Fn(x)2994 834 y Fk(1)3050822 y Fp(\010)g Fq(02)g Fp(\003)g Fn(x)3342 834 y Fk(2)3398822 y Fp(\010)g Fq(03)g Fp(\003)g Fn(x)3690 834 y Fk(3)2130947 y Fn(y)2171 959 y Fk(3)2291 947 y Fq(=)82 b(03)18b Fp(\003)g Fn(x)2647 959 y Fk(0)2703 947 y Fp(\010)gFq(01)f Fp(\003)h Fn(x)2994 959 y Fk(1)3050 947 y Fp(\010)gFq(01)g Fp(\003)g Fn(x)3342 959 y Fk(2)3398 947 y Fp(\010)gFq(02)g Fp(\003)g Fn(x)3690 959 y Fk(3)3727 947 y Fn(;)20101138 y Fq(where)33 b Fp(\003)g Fq(represen)n(ts)f(the)iFi(xtime)d Fq(op)r(eration.)54 b(After)34 b(re-)20101238 y(ordering)26 b(the)i(equations)f(w)n(e)g(get:)23011429 y Fn(y)2342 1441 y Fk(0)2462 1429 y Fq(=)82 b(02)18b Fp(\003)g Fn(x)2818 1441 y Fk(0)2874 1429 y Fp(\010)gFq(03)f Fp(\003)h Fn(x)3165 1441 y Fk(1)3221 1429 y Fp(\010)gFn(x)3351 1441 y Fk(2)3407 1429 y Fp(\010)g Fn(x)p Fq(3)23011554 y Fn(y)2342 1566 y Fk(1)2462 1554 y Fq(=)82 b(02)18b Fp(\003)g Fn(x)2818 1566 y Fk(1)2874 1554 y Fp(\010)gFq(03)f Fp(\003)h Fn(x)3165 1566 y Fk(2)3221 1554 y Fp(\010)gFn(x)3351 1566 y Fk(3)3407 1554 y Fp(\010)g Fn(x)p Fq(0)23011678 y Fn(y)2342 1690 y Fk(2)2462 1678 y Fq(=)82 b(02)18b Fp(\003)g Fn(x)2818 1690 y Fk(2)2874 1678 y Fp(\010)gFq(03)f Fp(\003)h Fn(x)3165 1690 y Fk(3)3221 1678 y Fp(\010)gFn(x)3351 1690 y Fk(0)3407 1678 y Fp(\010)g Fn(x)p Fq(1)23011803 y Fn(y)2342 1815 y Fk(3)2462 1803 y Fq(=)82 b(02)18b Fp(\003)g Fn(x)2818 1815 y Fk(3)2874 1803 y Fp(\010)gFq(03)f Fp(\003)h Fn(x)3165 1815 y Fk(0)3221 1803 y Fp(\010)gFn(x)3351 1815 y Fk(1)3407 1803 y Fp(\010)g Fn(x)p Fq(2)20102094 y(The)36 b Fi(xtime)e Fq(op)r(eration)h(can)h(b)r(e)g(p)r(erformed)g(inside)g(the)2010 2194 y(copro)r(cessor)28b(on)i(the)h(16)f(b)n(ytes)g(of)g(the)h(state)f(in)h(parallel)20102293 y(via)c(the)h(follo)n(wing)f(form)n(ula:)2109 2485y Fi(xtime)n Fq(\(state\))84 b(=)e(\(\(state&)p Fn(m)31762497 y Fk(2)3213 2485 y Fq(\))24 b Fn(<<)e Fq(1\))c Fp(\010)27982609 y Fq(\(\(\(state)q(&)p Fn(m)3209 2621 y Fk(1)32452609 y Fq(\))24 b Fn(>>)e Fq(7\))c Fp(\003)g Fn(m)36782621 y Fk(3)3715 2609 y Fq(\))p Fn(;)2010 2801 y Fq(where)65b Fn(m)2361 2813 y Fk(1)2484 2801 y Fq(=)86 b(0)p Fn(x)pFq(8080)p Fn(:::)p Fq(80)63 b(\(16)i(b)n(ytes\),)75 bFn(m)3682 2813 y Fk(2)3805 2801 y Fq(=)2010 2900 y(0)pFn(x)p Fq(7)p Fn(f)9 b Fq(7)p Fn(f)t(:::)p Fq(7)p Fn(f)47b Fq(\(16)39 b(b)n(ytes\))h(and)g Fn(m)3141 2912 y Fk(3)32222900 y Fq(=)j(0)p Fn(x)p Fq(1)p Fn(b)p Fq(.)74 b(Here,)42b Fp(\003)2010 3000 y Fq(denotes)25 b(the)i(m)n(ultiplication)f(op)r(eration)e(in)i Fm(F)3490 2970 y Fk(8)3490 3020 y(2)35333000 y Fq(,)h Fp(\010)e Fq(is)h(the)2010 3099 y(addition)31b(mo)r(dulo)g(2,)h(&)f(the)g(AND)i(op)r(eration)d(and)hFn(<<)2010 3199 y Fq(and)19 b Fn(>>)f Fq(are)g(the)h(bit-left)h(and)f(bit-righ)n(t)f(shift)h(op)r(erations)2010 3299 y(resp)r(ectiv)n(ely)-7b(.)2010 3498 y(The)30 b Fi(xtime)e Fq(op)r(eration)h(itself)i(can)f(b)r(e)g(implemen)n(ted)h(in-)2010 3598 y(side)25 b(the)g(copro)r(cessor)d(with)j(only)f(t)n(w)n(o)g(temp)r(orary)g(regis-)20103697 y(ters,)j(as)g(sho)n(wn)g(b)r(elo)n(w:)2616 3889y Fn(t)2646 3901 y Fk(1)2766 3889 y Fq(=)83 b(state)o(&)pFn(m)3227 3901 y Fk(1)2616 4013 y Fn(t)2646 4025 y Fk(1)27664013 y Fq(=)g Fn(t)2944 4025 y Fk(1)3004 4013 y Fn(>>)22b Fq(7)2616 4138 y Fn(t)2646 4150 y Fk(1)2766 4138 yFq(=)83 b Fn(t)2944 4150 y Fk(1)2999 4138 y Fp(\003)18b Fn(m)3132 4150 y Fk(3)2616 4262 y Fn(t)2646 4274 yFk(2)2766 4262 y Fq(=)83 b(state)o(&)p Fn(m)3227 4274y Fk(2)2616 4387 y Fn(t)2646 4399 y Fk(2)2766 4387 yFq(=)g Fn(t)2944 4399 y Fk(2)3004 4387 y Fn(<<)22 b Fq(1)26164511 y Fn(t)2646 4523 y Fk(1)2766 4511 y Fq(=)83 b Fn(t)29444523 y Fk(1)2999 4511 y Fp(\010)18 b Fn(t)3112 4523 yFk(2)2010 4703 y Fq(If)35 b(the)g(AND)g(op)r(eration)e(is)h(not)h(supp)r(orted)f(b)n(y)g(the)h(co-)2010 4802 y(pro)r(cessor,)f(it)h(has)f(to)h(b)r(e)g(done)f(in)h(the)g(standard)e(CPU)2010 4902 y(b)r(efore)e(loading)f(the)i(state)f(in)n(to)g(the)h(copro)r(cessor's)c(reg-)20105001 y(ister.)42 b(Then,)30 b(one)f(has)f(to)i(load)e(the)i(result)f(of)g(the)h(AND)2010 5101 y(op)r(erations)38 b(in)j(b)r(oth)fFn(t)2774 5113 y Fk(1)2851 5101 y Fq(and)f Fn(t)30545113 y Fk(2)3092 5101 y Fq(.)73 b(Based)39 b(on)h(the)g(pre-)20105201 y(vious)34 b(de\014nition)g(of)g(the)h Fi(xtime)dFq(op)r(eration,)j(the)f(whole)2010 5300 y Fi(MixColumn)cFq(transformation)h(can)i(b)r(e)h(de\014ned)g(to)f(op)r(er-)20105400 y(ate)38 b(on)g(the)g(16)g(b)n(ytes)f(of)i(the)f(state)g(in)h(parallel.)67 b(The)p eop%%Page: 6 66 5 bop 0 83 a Fq(implemen)n(tation)31 b(is)h(based)f(on)g(the)g(previous)g(de\014nition)0 183 y(of)d(the)g Fi(xtime)dFq(op)r(eration:)563 376 y Fn(t)593 388 y Fk(1)713 376y Fq(=)82 b Fi(xtime)n Fq(\(state\))563 501 y Fn(t)593513 y Fk(2)713 501 y Fq(=)g Fn(t)890 513 y Fk(1)946 501y Fp(\010)18 b Fq(state)563 625 y Fn(t)593 637 y Fk(2)713625 y Fq(=)82 b Fi(RotWord)n Fq(\()p Fn(t)1228 637 yFk(2)1265 625 y Fq(\))563 750 y Fn(t)593 762 y Fk(1)713750 y Fq(=)g Fn(t)890 762 y Fk(1)946 750 y Fp(\010)18b Fn(t)1059 762 y Fk(2)563 874 y Fn(t)593 886 y Fk(2)713874 y Fq(=)82 b Fi(RotWord)n Fq(\(state\))563 999 y Fn(t)5931011 y Fk(2)713 999 y Fq(=)g Fi(RotWord)n Fq(\()p Fn(t)12281011 y Fk(2)1265 999 y Fq(\))563 1123 y Fn(t)593 1135y Fk(1)713 1123 y Fq(=)g Fn(t)890 1135 y Fk(1)946 1123y Fp(\010)18 b Fn(t)1059 1135 y Fk(2)563 1248 y Fn(t)5931260 y Fk(2)713 1248 y Fq(=)82 b Fi(RotWord)n Fq(\()pFn(t)1228 1260 y Fk(2)1265 1248 y Fq(\))454 1372 y(state)h(=)fFn(t)890 1384 y Fk(1)946 1372 y Fp(\010)18 b Fn(t)10591384 y Fk(2)0 1566 y Fq(The)27 b(total)f(n)n(um)n(b)r(er)g(of)h(registers)e(needed)i(for)f(the)h(imple-)0 1665 y(men)n(tation)32b(of)h(the)g Fi(MixColumn)c Fq(transformation)i(in)i(the)01765 y(copro)r(cessor)c(is)j(3,)h(t)n(w)n(o)e(temp)r(oral)h(registers)e(for)i(the)g(in-)0 1865 y(termediate)27 b(results)g(and)h(another)e(for)i(the)g(state.)0 2064 y(The)d Fi(RotWord)e Fq(op)r(eration)h(as)h(de\014ned)h(in)f(the)h(AES)f(sp)r(ec-)0 2164 y(i\014cation)38b(has)f(to)h(b)r(e)h(p)r(erformed)e(on)h(ev)n(ery)f(4)g(b)n(ytes)h(of)02263 y(the)e(state)f(indep)r(enden)n(tly)-7 b(.)60 b(If)36b(it)f(is)g(not)g(supp)r(orted)g(b)n(y)0 2363 y(the)24b(copro)r(cessor,)e(this)i(op)r(eration)f(m)n(ust)h(b)r(e)g(done)g(b)n(y)g(the)0 2462 y(standard)k(CPU,)h(accessing)f(the)h(in)n(ternal)g(copro)r(cessor's)0 2562 y(registers.)0 2872 y Fj(4.2)105b(The)54 b(in)m(v)m(erse)h Fe(MixColumn)d Fj(transforma-)2382971 y(tion)0 3281 y Fq(The)23 b(in)n(v)n(erse)f Fi(MixColumn)dFq(transformation)i(requires)h(also)0 3381 y(a)30 b(matrix)g(m)n(ultiplication)g(in)h(the)g(\014eld)f Fm(F)1353 3351y Fk(8)1353 3401 y(2)1396 3381 y Fq(.)46 b(In)30 b(an)g(8-bit)03480 y(CPU,)k(this)h(can)e(b)r(e)i(implemen)n(ted)g(in)f(an)g(e\016cien)n(t)g(w)n(a)n(y)0 3580 y(for)27 b(eac)n(h)g(column)g(as)g(follo)n(ws:)123 3774 y Fn(y)164 3786 y Fk(0)284 3774y Fq(=)83 b(0)p Fn(e)17 b Fp(\003)h Fn(x)637 3786 y Fk(0)6943774 y Fp(\010)g Fq(0)p Fn(b)f Fp(\003)h Fn(x)979 3786y Fk(1)1035 3774 y Fp(\010)g Fq(0)p Fn(d)g Fp(\003)gFn(x)1328 3786 y Fk(2)1385 3774 y Fp(\010)g Fq(09)f Fp(\003)hFn(x)1676 3786 y Fk(3)123 3898 y Fn(y)164 3910 y Fk(1)2843898 y Fq(=)83 b(09)17 b Fp(\003)h Fn(x)640 3910 y Fk(0)6963898 y Fp(\010)g Fq(0)p Fn(e)g Fp(\003)g Fn(x)985 3910y Fk(1)1041 3898 y Fp(\010)g Fq(0)p Fn(b)g Fp(\003)gFn(x)1327 3910 y Fk(2)1383 3898 y Fp(\010)g Fq(0)p Fn(d)gFp(\003)g Fn(x)1676 3910 y Fk(3)123 4023 y Fn(y)164 4035y Fk(2)284 4023 y Fq(=)83 b(0)p Fn(d)18 b Fp(\003)g Fn(x)6424035 y Fk(0)698 4023 y Fp(\010)g Fq(09)g Fp(\003)g Fn(x)9904035 y Fk(1)1046 4023 y Fp(\010)g Fq(0)p Fn(e)f Fp(\003)hFn(x)1334 4035 y Fk(2)1390 4023 y Fp(\010)g Fq(0)p Fn(b)gFp(\003)g Fn(x)1676 4035 y Fk(3)123 4147 y Fn(y)164 4159y Fk(3)284 4147 y Fq(=)83 b(0)p Fn(b)17 b Fp(\003)h Fn(x)6344159 y Fk(0)691 4147 y Fp(\010)g Fq(0)p Fn(d)g Fp(\003)gFn(x)984 4159 y Fk(1)1040 4147 y Fp(\010)g Fq(09)f Fp(\003)hFn(x)1331 4159 y Fk(2)1387 4147 y Fp(\010)g Fq(0)p Fn(e)gFp(\003)g Fn(x)1676 4159 y Fk(3)1714 4147 y Fn(:)0 4341y Fq(After)28 b(reordering)d(the)j(equations)f(w)n(e)g(get:)1234534 y Fn(y)164 4546 y Fk(0)284 4534 y Fq(=)83 b(0)pFn(e)17 b Fp(\003)h Fn(x)637 4546 y Fk(0)694 4534 y Fp(\010)gFq(0)p Fn(b)f Fp(\003)h Fn(x)979 4546 y Fk(1)1035 4534y Fp(\010)g Fq(0)p Fn(d)g Fp(\003)g Fn(x)1328 4546 yFk(2)1385 4534 y Fp(\010)g Fq(09)f Fp(\003)h Fn(x)16764546 y Fk(3)123 4659 y Fn(y)164 4671 y Fk(1)284 4659y Fq(=)83 b(0)p Fn(e)17 b Fp(\003)h Fn(x)637 4671 y Fk(1)6944659 y Fp(\010)g Fq(0)p Fn(b)f Fp(\003)h Fn(x)979 4671y Fk(2)1035 4659 y Fp(\010)g Fq(0)p Fn(d)g Fp(\003)gFn(x)1328 4671 y Fk(3)1385 4659 y Fp(\010)g Fq(09)f Fp(\003)hFn(x)1676 4671 y Fk(0)123 4783 y Fn(y)164 4795 y Fk(2)2844783 y Fq(=)83 b(0)p Fn(e)17 b Fp(\003)h Fn(x)637 4795y Fk(2)694 4783 y Fp(\010)g Fq(0)p Fn(b)f Fp(\003)h Fn(x)9794795 y Fk(3)1035 4783 y Fp(\010)g Fq(0)p Fn(d)g Fp(\003)gFn(x)1328 4795 y Fk(0)1385 4783 y Fp(\010)g Fq(09)f Fp(\003)hFn(x)1676 4795 y Fk(1)123 4908 y Fn(y)164 4920 y Fk(3)2844908 y Fq(=)83 b(0)p Fn(e)17 b Fp(\003)h Fn(x)637 4920y Fk(3)694 4908 y Fp(\010)g Fq(0)p Fn(b)f Fp(\003)h Fn(x)9794920 y Fk(0)1035 4908 y Fp(\010)g Fq(0)p Fn(d)g Fp(\003)gFn(x)1328 4920 y Fk(1)1385 4908 y Fp(\010)g Fq(09)f Fp(\003)hFn(x)1676 4920 y Fk(2)1714 4908 y Fn(:)0 5201 y Fq(As)39b(for)e(the)i Fi(MixColumn)m Fq(,)i(the)e(in)n(v)n(erse)e(transformation)0 5300 y(\(needed)d(for)e(decryption\))h(can)g(also)f(b)r(e)h(de\014ned)h(to)f(op-)0 5400 y(erate)f(on)g(the)g(16)g(b)n(ytes)g(of)g(the)h(state)f(in)h(parallel.)50 b(The)201083 y(implemen)n(tation)31 b(is)h(based)f(on)g(the)g(previous)g(de\014nition)2010 183 y(of)d(the)g Fi(xtime)d Fq(op)r(eration:)2257342 y Fn(t)2287 354 y Fk(1)2407 342 y Fq(=)83 b Fi(xtime)nFq(\(state\))2257 467 y Fn(t)2287 479 y Fk(2)2407 467y Fq(=)g Fi(xtime)n Fq(\()p Fn(t)2835 479 y Fk(1)2872467 y Fq(\))2257 591 y Fn(t)2287 603 y Fk(3)2407 591y Fq(=)g Fi(xtime)n Fq(\()p Fn(t)2835 603 y Fk(2)2872591 y Fq(\))2257 716 y Fn(t)2287 728 y Fk(4)2407 716y Fq(=)g Fn(t)2585 728 y Fk(1)2641 716 y Fp(\010)18 bFn(t)2754 728 y Fk(2)2809 716 y Fp(\010)g Fn(t)2922 728y Fk(3)2257 841 y Fn(t)2287 853 y Fk(2)2407 841 y Fq(=)83b(state)18 b Fp(\010)g Fn(t)2862 853 y Fk(2)2918 841y Fp(\010)g Fn(t)3031 853 y Fk(3)2257 965 y Fn(t)2287977 y Fk(1)2407 965 y Fq(=)83 b(state)18 b Fp(\010)gFn(t)2862 977 y Fk(1)2918 965 y Fp(\010)g Fn(t)3031 977y Fk(3)2257 1090 y Fn(t)2287 1102 y Fk(3)2407 1090 yFq(=)83 b(state)18 b Fp(\010)g Fn(t)2862 1102 y Fk(3)22571214 y Fn(t)2287 1226 y Fk(1)2407 1214 y Fq(=)83 b Fi(RotWord)mFq(\()p Fn(t)2922 1226 y Fk(1)2960 1214 y Fq(\))22571339 y Fn(t)2287 1351 y Fk(2)2407 1339 y Fq(=)g Fi(RotWord)mFq(\()p Fi(RotWord)n Fq(\()p Fn(t)3260 1351 y Fk(2)32971339 y Fq(\)\))2257 1463 y Fn(t)2287 1475 y Fk(3)24071463 y Fq(=)g Fi(RotWord)m Fq(\()p Fi(RotWord)n Fq(\()pFi(RotWord)m Fq(\()p Fn(t)3597 1475 y Fk(3)3634 1463y Fq(\)\)\))2149 1588 y(state)f(=)h Fn(t)2585 1600 yFk(1)2641 1588 y Fp(\010)18 b Fn(t)2754 1600 y Fk(2)28091588 y Fp(\010)g Fn(t)2922 1600 y Fk(3)2978 1588 y Fp(\010)gFn(t)3091 1600 y Fk(4)2010 1747 y Fq(The)27 b(total)f(n)n(um)n(b)r(er)g(of)h(registers)e(needed)i(for)f(the)h(imple-)2010 1847y(men)n(tation)33 b(of)h(the)g(in)n(v)n(erse)e(transformation)f(in)j(the)g(co-)2010 1947 y(pro)r(cessor)29 b(is)i(5,)h(where)e(4)h(temp)r(oral)g(registers)e(are)h(used)2010 2046 y(for)36 b(in)n(termediate)g(results)f(and)h(one)g(other)g(register)f(for)2010 2146y(the)28 b(state)f(itself.)2010 2345 y(Another)35 b(w)n(a)n(y)f(to)h(implemen)n(t)h(the)g(in)n(v)n(erse)e Fi(MixColumn)20102445 y Fq(transformation)27 b(is)i(b)n(y)g(de\014nition)g(of)g(the)g(follo)n(wing)f(t)n(w)n(o)2010 2544 y(new)g(op)r(erations:)20912704 y Fi(xtime)2309 2716 y Fk(4)2346 2704 y Fq(\(state\))83b(=)g(\(\(state&)p Fn(m)3195 2716 y Fk(5)3232 2704 yFq(\))23 b Fn(<<)f Fq(2\))d Fp(\010)2817 2829 y Fq(\(\(\(state&)pFn(m)3227 2841 y Fk(4)3264 2829 y Fq(\))k Fn(>>)g Fq(6\))18b Fp(\003)g Fn(m)3697 2841 y Fk(3)3734 2829 y Fq(\))20912953 y Fi(xtime)2309 2965 y Fk(8)2346 2953 y Fq(\(state\))83b(=)g(\(\(state&)p Fn(m)3195 2965 y Fk(7)3232 2953 yFq(\))23 b Fn(<<)f Fq(3\))d Fp(\010)2817 3078 y Fq(\(\(\(state&)pFn(m)3227 3090 y Fk(6)3264 3078 y Fq(\))k Fn(>>)g Fq(5\))18b Fp(\003)g Fn(m)3697 3090 y Fk(3)3734 3078 y Fq(\))pFn(;)2010 3237 y Fq(where)67 b Fn(m)2363 3249 y Fk(4)24893237 y Fq(=)89 b(0)p Fn(xc)p Fq(0)p Fn(c)p Fq(0)p Fn(:::c)pFq(0)66 b(\(16)h(b)n(ytes\),)77 b Fn(m)3679 3249 y Fk(5)38053237 y Fq(=)2010 3337 y(0)p Fn(x)p Fq(3)p Fn(f)9 b Fq(3)pFn(f)t(:::)p Fq(3)p Fn(f)64 b Fq(\(16)57 b(b)n(ytes\),)66b Fn(m)3051 3349 y Fk(6)3161 3337 y Fq(=)72 b(0)p Fn(xe)pFq(0)p Fn(e)p Fq(0)p Fn(:::e)p Fq(0)56 b(\(16)2010 3437y(b)n(ytes\),)47 b Fn(m)2375 3449 y Fk(7)2461 3437 yFq(=)i(0)p Fn(x)p Fq(1)p Fn(f)9 b Fq(1)p Fn(f)t(:::)pFq(1)p Fn(f)50 b Fq(\(16)43 b(b)n(ytes\))g(and)g Fn(m)37193449 y Fk(3)3805 3437 y Fq(=)2010 3536 y(0)p Fn(x)p Fq(1)pFn(b)p Fq(.)e(Therefore,)29 b(the)g(implemen)n(tation)h(of)f(the)h(in)n(v)n(erse)2010 3636 y Fi(MixColumn)g Fq(transformation)h(can)i(b)r(e)h(rede\014ned)f(as)f(fol-)2010 3736 y(lo)n(ws:)2257 3895y Fn(t)2287 3907 y Fk(1)2407 3895 y Fq(=)83 b Fi(xtime)nFq(\(state\))2257 4020 y Fn(t)2287 4032 y Fk(2)2407 4020y Fq(=)g Fi(xtime)2773 4032 y Fk(4)2810 4020 y Fq(\(state\))22574144 y Fn(t)2287 4156 y Fk(3)2407 4144 y Fq(=)g Fi(xtime)27734156 y Fk(8)2810 4144 y Fq(\(state\))2257 4269 y Fn(t)22874281 y Fk(4)2407 4269 y Fq(=)g Fn(t)2585 4281 y Fk(1)26414269 y Fp(\010)18 b Fn(t)2754 4281 y Fk(2)2809 4269 yFp(\010)g Fn(t)2922 4281 y Fk(3)2257 4393 y Fn(t)22874405 y Fk(2)2407 4393 y Fq(=)83 b(state)18 b Fp(\010)gFn(t)2862 4405 y Fk(2)2918 4393 y Fp(\010)g Fn(t)30314405 y Fk(3)2257 4518 y Fn(t)2287 4530 y Fk(1)2407 4518y Fq(=)83 b(state)18 b Fp(\010)g Fn(t)2862 4530 y Fk(1)29184518 y Fp(\010)g Fn(t)3031 4530 y Fk(3)2257 4643 y Fn(t)22874655 y Fk(3)2407 4643 y Fq(=)83 b(state)18 b Fp(\010)gFn(t)2862 4655 y Fk(3)2257 4767 y Fn(t)2287 4779 y Fk(1)24074767 y Fq(=)83 b Fi(RotWord)m Fq(\()p Fn(t)2922 4779y Fk(1)2960 4767 y Fq(\))2257 4892 y Fn(t)2287 4904 yFk(2)2407 4892 y Fq(=)g Fi(RotWord)m Fq(\()p Fi(RotWord)nFq(\()p Fn(t)3260 4904 y Fk(2)3297 4892 y Fq(\)\))22575016 y Fn(t)2287 5028 y Fk(3)2407 5016 y Fq(=)g Fi(RotWord)mFq(\()p Fi(RotWord)n Fq(\()p Fi(RotWord)m Fq(\()p Fn(t)35975028 y Fk(3)3634 5016 y Fq(\)\)\))2149 5141 y(state)f(=)hFn(t)2585 5153 y Fk(1)2641 5141 y Fp(\010)18 b Fn(t)27545153 y Fk(2)2809 5141 y Fp(\010)g Fn(t)2922 5153 y Fk(3)29785141 y Fp(\010)g Fn(t)3091 5153 y Fk(4)2010 5300 y Fq(The)i(adv)-5b(an)n(tage)18 b(of)h(this)h(second)f(implemen)n(tation)h(is)g(that)2010 5400 y(the)39 b(op)r(erations)e Fi(xtime)n Fq(,)42b Fi(xtime)3079 5412 y Fk(4)3155 5400 y Fq(and)d Fi(xtime)35465412 y Fk(8)3622 5400 y Fq(can)f(b)r(e)p eop%%Page: 7 77 6 bop 0 83 a Fq(calculated)36 b(in)h(parallel)e(from)h(the)h(state,)i(a)n(v)n(oiding)c(the)0 183 y(sequence)27 b(of)g(the)g(\014rst)g(implemen)n(tation.)37 b(M)27 b(oreo)n(v)n(er,)e(in)0282 y(the)39 b(case)e(that)i(the)g(AND)g(op)r(eration)f(is)g(not)g(a)n(v)-5 b(ailable)0 382 y(within)33 b(the)g(copro)r(cessor,)e(this)i(second)f(solution)f(allo)n(ws)0 482 y(to)d(precompute)g(all)f(the)i(AND)g(v)-5 b(alues)27 b(within)i(the)g(stan-)0 581 y(dard)i(CPU)h(b)r(efore)g(loading)f(the)i(state)e(in)n(to)h(the)h(copro-)0681 y(cessor.)0 1146 y Fj(4.3)105 b(The)35 b(Key)g(Expansion)01611 y Fq(The)j(16,)i(24)e(or)f(32)g(b)n(ytes)h(of)g(the)h(k)n(ey)e(\(dep)r(ending)i(on)0 1711 y(the)27 b(k)n(ey)g(length\))g(are)f(loaded)h(in)n(to)f(the)i(Key)e(register)1730 1681 yFk(1)1793 1711 y Fq(of)0 1811 y(the)34 b(copro)r(cessor)e(\(Key1)h(and)g(Key2)g(registers)f(for)i(256-)0 1910 y(bit)e(k)n(eys\).)46b(Then,)32 b(the)g(next)f(round)g(k)n(ey)f(b)n(ytes)h(are)f(cal-)02010 y(culated)e(with)g(the)g(follo)n(wing)e(sequence)h(of)h(op)r(erations.)0 2209 y(F)-7 b(or)34 b(a)f(128-bit)g(k)n(ey)-7b(,)35 b(p)r(erform)f(the)g(follo)n(wing)g(sequence,)02309 y(and)27 b(for)h(eac)n(h)e(in)n(termediate)i(round)f(do:)2402658 y Fn(t)270 2670 y Fk(1)390 2658 y Fq(=)83 b Fi(Rcon)17b Fp(\010)h Fi(ByteSub)m Fq(\()p Fi(RotWord)m Fq(\(Key\)\))1622782 y(Key)82 b(=)h(Key)17 b Fp(\010)h Fn(t)814 2794y Fk(1)240 2907 y Fn(t)270 2919 y Fk(1)390 2907 y Fq(=)83b(Key)240 3031 y Fn(t)270 3043 y Fk(1)390 3031 y Fq(=)gFn(t)568 3043 y Fk(1)628 3031 y Fn(>>)22 b Fq(32)1623156 y(Key)82 b(=)h(Key)17 b Fp(\010)h Fn(t)814 3168y Fk(1)240 3280 y Fn(t)270 3292 y Fk(1)390 3280 y Fq(=)83b Fn(t)568 3292 y Fk(1)628 3280 y Fn(>>)22 b Fq(32)1623405 y(Key)82 b(=)h(Key)17 b Fp(\010)h Fn(t)814 3417y Fk(1)240 3529 y Fn(t)270 3541 y Fk(1)390 3529 y Fq(=)83b Fn(t)568 3541 y Fk(1)628 3529 y Fn(>>)22 b Fq(32)1623654 y(Key)82 b(=)h(Key)17 b Fp(\010)h Fn(t)814 3666y Fk(1)852 3654 y Fn(:)0 4003 y Fq(The)23 b Fi(RotWord)mFq(,)h Fi(ByteSub)c Fq(op)r(erations)i(are)g(p)r(erformed)g(b)n(y)04103 y(the)32 b(standard)e(CPU)h(on)g(the)h(4)e(righ)n(tmost)h(b)n(ytes)f(of)i(the)0 4202 y(Key)27 b(register,)f(then)j(storing)d(the)i(result)g(in)n(to)f(the)h(4)g(left-)0 4302 y(most)f(b)n(ytes)g(of)gFn(t)544 4314 y Fk(1)608 4302 y Fq(and)g(clearing)e(the)j(other)e(b)n(ytes.)37 b Fi(Rcon)0 4401 y Fq(is)25 b(the)h(4-b)n(yte)f(constan)n(t)f(de\014ned)i(within)g(the)g(AES)f(sp)r(ec-)0 4501 y(i\014cation.)04700 y(F)-7 b(or)36 b(a)g(256-bit)g(k)n(ey)g(p)r(erform)g(the)h(follo)n(wing)f(sequence,)p 0 5086 744 4 v 92 5140 a Fd(1)1275163 y Fc(Mapping)d(the)g(encryption)g(or)f(decryption)i(k)n(ey)f(to)f(the)i(Key)0 5242 y(register)22 b(is)g(straigh)n(tforw)n(ard,)g(b)n(ytes)h Fb(a)1055 5251 y Fd(0)1090 5242 y Fb(;)12 b(a)11595251 y Fd(1)1194 5242 y Fb(;)f(:::;)f(a)1352 5251 y Fd(15)14405242 y Fc(of)22 b(the)i(k)n(ey)f(are)0 5321 y(mapp)r(ed)e(one)i(to)f(one)g(to)g(b)n(ytes)g Fb(k)908 5330 y Fd(0)943 5321y Fb(;)11 b(k)1011 5330 y Fd(1)1045 5321 y Fb(;)h(:::;)e(k)12045330 y Fd(15)1290 5321 y Fc(of)21 b(the)h(Key)g(register)05400 y(resp)r(ectiv)n(ely)-6 b(.)2010 83 y Fq(and)27b(for)h(eac)n(h)e(in)n(termediate)i(\\ev)n(en")e(round)h(do:)2248239 y Fn(t)2278 251 y Fk(1)2398 239 y Fq(=)83 b Fi(Rcon)16b Fp(\010)i Fi(ByteSub)n Fq(\()p Fi(RotWord)m Fq(\(Key2)o(\)\))2132363 y(Key)2278 383 y Fk(1)2398 363 y Fq(=)83 b(Key)2691383 y Fk(1)2747 363 y Fp(\010)18 b Fn(t)2860 375 y Fk(1)2248488 y Fn(t)2278 500 y Fk(1)2398 488 y Fq(=)83 b(Key)2691508 y Fk(1)2248 612 y Fn(t)2278 624 y Fk(1)2398 612 yFq(=)g Fn(t)2576 624 y Fk(1)2636 612 y Fn(>>)22 b Fq(32)2132737 y(Key)2278 757 y Fk(1)2398 737 y Fq(=)83 b(Key)2691757 y Fk(1)2747 737 y Fp(\010)18 b Fn(t)2860 749 y Fk(1)2248861 y Fn(t)2278 873 y Fk(1)2398 861 y Fq(=)83 b Fn(t)2576873 y Fk(1)2636 861 y Fn(>>)22 b Fq(32)2132 986 y(Key)22781006 y Fk(1)2398 986 y Fq(=)83 b(Key)2691 1006 y Fk(1)2747986 y Fp(\010)18 b Fn(t)2860 998 y Fk(1)2248 1110 y Fn(t)22781122 y Fk(1)2398 1110 y Fq(=)83 b Fn(t)2576 1122 y Fk(1)26361110 y Fn(>>)22 b Fq(32)2132 1235 y(Key)2278 1255 y Fk(1)23981235 y Fq(=)83 b(Key)2691 1255 y Fk(1)2747 1235 y Fp(\010)18b Fn(t)2860 1247 y Fk(1)2010 1391 y Fq(while)h(ev)n(ery)f(in)n(termediate)h(\\o)r(dd")f(round)h(\(except)h(round)20101490 y(1\))27 b(is)h(done)f(as:)2570 1646 y Fn(t)26001658 y Fk(1)2721 1646 y Fq(=)82 b Fi(ByteSub)m Fq(\(Key1\))24551770 y(Key)2600 1791 y Fk(2)2721 1770 y Fq(=)g(Key)30141791 y Fk(2)3069 1770 y Fp(\010)18 b Fn(t)3182 1782 yFk(1)2570 1895 y Fn(t)2600 1907 y Fk(1)2721 1895 y Fq(=)82b(Key)3014 1915 y Fk(2)2570 2019 y Fn(t)2600 2031 y Fk(1)27212019 y Fq(=)g Fn(t)2898 2031 y Fk(1)2959 2019 y Fn(>>)22b Fq(32)2455 2144 y(Key)2600 2164 y Fk(2)2721 2144 yFq(=)82 b(Key)3014 2164 y Fk(2)3069 2144 y Fp(\010)18b Fn(t)3182 2156 y Fk(1)2570 2268 y Fn(t)2600 2280 yFk(1)2721 2268 y Fq(=)82 b Fn(t)2898 2280 y Fk(1)29592268 y Fn(>>)22 b Fq(32)2455 2393 y(Key)2600 2413 y Fk(2)27212393 y Fq(=)82 b(Key)3014 2413 y Fk(2)3069 2393 y Fp(\010)18b Fn(t)3182 2405 y Fk(1)2570 2518 y Fn(t)2600 2530 yFk(1)2721 2518 y Fq(=)82 b Fn(t)2898 2530 y Fk(1)29592518 y Fn(>>)22 b Fq(32)2455 2642 y(Key)2600 2662 y Fk(2)27212642 y Fq(=)82 b(Key)3014 2662 y Fk(2)3069 2642 y Fp(\010)18b Fn(t)3182 2654 y Fk(1)2010 2897 y Fq(F)-7 b(or)39 b(196-bit)g(k)n(eys,)k(the)d(sequence)g(gets)f(more)g(compli-)2010 2997y(cated)27 b(as)f(in)h(that)g(case,)f(new)h(round)f(k)n(ey)g(b)n(ytes)h(are)f(gen-)2010 3097 y(erated)33 b(within)i(a)e(windo)n(w)h(of)f(6)h(b)n(ytes,)h(but)f(round)g(k)n(ey)2010 3196 y(b)n(ytes)c(should)g(b)r(e)h(deliv)n(ered)e(at)i(a)e(rate)h(of)g(4)g(b)n(ytes.)45b(Ba-)2010 3296 y(sically)-7 b(,)35 b(the)f(pro)r(cess)e(to)i(generate)e(the)i(new)g(round)f(k)n(ey)2010 3395 y(b)n(ytes)40b(is)g(similar)f(to)h(that)g(for)g(128)f(bit)h(k)n(eys,)j(but)d(y)n(et)2010 3495 y(longer)20 b(registers)f(\(24)h(b)n(ytes)g(long\))h(and/or)e(an)i(additional)2010 3595 y(temp)r(orary)26 b(register)g(migh)n(t)i(b)r(e)g(needed.)2010 3794 y(T)-7 b(otally)g(,)31 b(the)f(n)n(um)n(b)r(er)g(of)h(registers)d(needed)j(for)e(the)i(im-)2010 3894y(plemen)n(tation)e(of)f(the)h(Key)f(Expansion)g(transformation)20103993 y(within)36 b(the)g(copro)r(cessor)d(is)j(2)f(\(or)g(at)h(maxim)n(um)f(3)h(for)2010 4093 y(k)n(eys)27 b(longer)f(than)i(16)e(b)n(ytes\).)2010 4381 y Fj(4.4)105 b(The)35 b Fe(AddRoundKey)dFj(transformation)2010 4669 y Fq(This)27 b(transformation)f(is)h(p)r(erformed)g(b)n(y)g(simply)h(adding)2010 4769 y(the)e(state)f(and)g(the)g(k)n(ey)g(mo)r(dulo)g(2)g(inside)g(the)h(copro)r(ces-)20104868 y(sor:)2574 4968 y(state)d(=)f(Key)c Fp(\010)g Fq(state)pFn(:)2010 5101 y Fq(No)30 b(temp)r(oral)f(register)g(is)h(therefore)f(needed.)45 b(The)30 b(Key)2010 5201 y(register)18 b(used)i(will)f(b)r(e)h(Key1)f(or)f(Key2)h(in)h(the)g(case)e(of)i(256-)20105300 y(bit)25 b(k)n(eys,)g(dep)r(ending)g(on)g(the)g(round)g(n)n(um)n(b)r(er)f(\(Key1)h(for)2010 5400 y(\\ev)n(en")h(rounds)h(and)g(Key2)g(for)g(\\o)r(dd")g(rounds\).)p eop%%Page: 8 88 7 bop 0 83 a Fr(5)112 b(Securit)m(y)37 b(Considerations)0419 y Fq(Although)31 b(there)g(is)f(a)h(large)e(v)-5b(ariet)n(y)30 b(of)h(p)r(ossible)g(ph)n(ysi-)0 518 y(cal)20b(attac)n(ks)f(on)h(the)g(AES,)g(cf.)h([A)n(G,)g(BS99)n(,)g(BS02)o(,)f(CJRR,)0 618 y(DR1,)32 b(K)n(Q)o(,)g(KWMK,)g(Me,)g(YT],)i(the)eFi(xtime)e Fq(op)r(eration)0 718 y(is)42 b(clearly)e(the)j(most)e(critical)g(one)h(in)g(the)g(AES)g(algo-)0 817 y(rithm,)22b(at)d(least)h(with)g(resp)r(ect)f(to)h(ph)n(ysical)f(securit)n(y)g(or)g(so)0 917 y(called)29 b(side-c)n(hannel)f(attac)n(ks.)40b(Namely)-7 b(,)30 b(this)f(op)r(eration)0 1016 y(in)n(v)n(olv)n(es)34b(a)h(m)n(ultiplication)h(that)g(is)g(sub)5 b(ject)36b(to)g(timing)0 1116 y(and)31 b(fault)h(attac)n(ks)e(\(see)h([K)n(Q,)f(BS02]\).)47 b(W)-7 b(e)32 b(also)e(stress)0 1216 y(that)f(the)f(recen)n(tly)g(dev)n(elop)r(ed)g(fault)g(based)g(susceptibil-)01315 y(it)n(y)k(due)g(to)g([BS02])f(cannot)g(b)r(e)i(a)n(v)n(oided)d(b)n(y)i(the)g(simple)0 1415 y(dedicated)27 b(fault-toleran)n(t)f(AES)g(hardw)n(are)f(as)h(prop)r(osed)0 1515 y(b)n(y)h([KWMK].)01714 y(Ho)n(w)n(ev)n(er,)39 b(thanks)f(to)g(the)g(implemen)n(tation)g(describ)r(ed)0 1813 y(here,)32 b(the)f(aforesaid)f(timing)h(attac)n(k)f(on)h(the)h Fi(xtime)d Fq(op-)0 1913 y(eration)21 b(do)r(esnt)g(w)n(ork.)34 b(This)21 b(is)h(due)g(to)f(the)h(fact)g(that)g(the)02013 y(timing)32 b(b)r(eha)n(viour)e(of)i(mo)r(dern)f(crypto)g(copro)r(cessors)d(is)0 2112 y(indep)r(enden)n(t)i(of)e(its)h(op)r(erands,)g(whic)n(h)f(indeed)h(a)n(v)n(oids)e(a)0 2212 y(timing)h(attac)n(k)f(vulnerabilit)n(y)f(of)i(our)f(implemen)n(tation.)0 2411y(Moreo)n(v)n(er,)22 b(b)n(y)h(p)r(erforming)g(the)hFi(xtime)e Fq(op)r(eration)h(on)g(16)0 2511 y(b)n(ytes)g(in)i(parallel)d(w)n(e)i(mak)n(e)f(fault)h(attac)n(ks)f(v)n(ery)f(di\016cult)02610 y(to)28 b(ac)n(hiev)n(e,)f(b)r(ecause)h(w)n(e)f(can)h(use)g(a)g(fault)g(in)g(the)h(calcu-)0 2710 y(lation)k(to)g(\015ip)h(a)f(bit,)j(but)e(the)g(\015ipp)r(ed)g(bit)g(can)f(b)r(e)h(an)n(y)02810 y(one)e(of)f(the)i(128)d(bits)i(of)g(the)h(state)e(or)g(temp)r(orary)g(v)-5 b(ari-)0 2909 y(able.)62 b(Another)36 b(critical)f(part)h(of)g(the)g(implemen)n(tation)0 3009 y(describ)r(ed)20b(here)g(migh)n(t)g(b)r(e)h(the)f(transfer)g(of)g(data)g(through)03109 y(the)h(so)f(called)g(X-BUS,)h(the)g(bus)g(that)g(connects)f(the)h(CPU)0 3208 y(and)31 b(the)h(copro)r(cessor.)45 b(This)31b(transfer)g(of)g(data)g(is)g(more)0 3308 y(signi\014can)n(t)40b(when)h(the)g(AND)h(and)e(Rotate)g(op)r(erations)0 3407y(are)27 b(not)g(supp)r(orted)h(b)n(y)f(the)h(copro)r(cessor)d(and)j(therefore)0 3507 y(ha)n(v)n(e)18 b(to)i(b)r(e)g(p)r(erformed)f(within)i(the)f(standard)e(CPU.)i(The)0 3607 y(bus)37 b(con)n(ten)n(ts)e(could)i(then)g(b)r(e)g(tamp)r(ered)f(via)g(an)h(elec-)0 3706y(tronic)28 b(microscop)r(e,)g(a)h(fo)r(cused)g(ion)g(b)r(eam,)g(or)f(could)h(b)r(e)0 3806 y(rev)n(ealed)22 b(through)g(measuring)g(the)i(p)r(o)n(w)n(er)e(consumption)0 3906 y(or)27 b(ev)n(en)g(b)n(y)g(an)g(electromagnetic)g(\014eld)h(analysis.)0 4105 y(F)-7b(ortunately)g(,)51 b(this)46 b(X-BUS)h(is)f(b)n(y)g(some)gFn(\026)p Fq(-con)n(troller)0 4204 y(ICs)24 b(v)n(endors)g(protected)g(b)n(y)g(hardw)n(are)f(and/or)g(soft)n(w)n(are)0 4304y(mec)n(hanisms.)34 b(Among)20 b(the)g(hardw)n(are)e(coun)n(termeasures)0 4404 y(there)35 b(are)f(activ)n(e)g(shields)h(or)f(random)g(bus)h(scram)n(bling)0 4503 y(tec)n(hniques)30b(a)n(v)-5 b(ailable)29 b(on)h(some)f(existing)h(high)g(securit)n(y)04603 y(m-con)n(troller)44 b(ICs.)92 b(Last)46 b(generation)e(of)i(those)g(high)0 4703 y(securit)p Fn(\026)p Fq(-con)n(troller)e(ICs)i(are)f(designed)h(using)f(a)h(sp)r(e-)0 4802 y(cial)38b(dual)h(rail)f(securit)n(y)g(logic,)j(cf.)e([MAK,)g(MA)n(CMT].)04902 y(This)31 b(logic)f(not)g(only)h(ensures)e(that)i(b)r(oth,)h(a)f(\\0")e(and)h(a)0 5001 y(\\1")g(ha)n(v)n(e)f(the)j(same)e(Hamming)h(w)n(eigh)n(t,)g(but)h(also)e(that)0 5101 y(c)n(hanges)c(b)r(et)n(w)n(een)i(a)f(logical)f(\\0")h(and)g(a)g(logical)g(\\1")f(are)05201 y(not)i(distinguishable)f(b)n(y)g(an)g(adv)n(ersary)-7b(.)0 5400 y(As)23 b(soft)n(w)n(are)f(measures)g(some)h(masking)f(and)i(encryption)2010 83 y(tec)n(hniques)d(could)g(b)r(e)h(applied)f(to)g(the)h(data)f(b)r(efore)g(b)r(eing)2010 183 y(transferred,)e(b)r(oth)h(in)f(the)g(CPU)g(and)g(in)g(the)h(copro)r(cessor.)2010282 y(Ho)n(w)n(ev)n(er,)j(these)i(measures)e(ma)n(y)g(ha)n(v)n(e)g(a)h(signi\014can)n(t)g(im-)2010 382 y(pact)37 b(on)f(the)i(o)n(v)n(erall)c(p)r(erformance)i(of)h(the)g(algorithm,)2010 482 y(whic)n(h)42b(mak)n(es)f(the)i(aforesaid)e(hardw)n(are)f(coun)n(termea-)2010581 y(sures)27 b(the)h(practically)e(preferred)h(c)n(hoice.)20101006 y Fr(6)112 b(P)m(erformance)37 b(Estimation)20101314 y Fq(An)47 b(implemen)n(tation)f(of)h(the)g(AES)f(encryption)g(algo-)2010 1414 y(rithm)41 b(with)g(a)f(k)n(ey)g(length)h(of)g(128)e(bits)i(on)f(In\014neons)2010 1514 y(SLE66P)28 b(\(8051)g(based\))h(securit)n(y)g(con)n(troller)e(family)-7 b(,)31 b(cf.)20101613 y([Inf2],)22 b(com)n(bined)d(together)g(with)h(In\014neons)f(recen)n(tly)g(de-)2010 1713 y(v)n(elop)r(ed)41 b(mo)r(dular)h(arithmetic)f(copro)r(cessor)e(Spiridon,)2010 1813 y(cf.)21b([Inf1)q(])g(\(whic)n(h)g(has)g(no)f(AND)i(or)f Fi(RotWord)dFq(op)r(eration\),)2010 1912 y(is)j(appro)n(ximately)f(t)n(w)n(o)h(times)h(faster)f(than)h(an)f(optimized)2010 2012 y(8051)39b(based)h(implemen)n(tation,)j(and)e(requires)e(only)h(16)20102111 y(b)n(ytes)28 b(of)h(in)n(ternal)f(RAM)i(memory)-7b(.)40 b(Most)28 b(imp)r(ortan)n(tly)-7 b(,)2010 2211y(this)32 b(implemen)n(tation)f(greatly)f(b)r(ene\014ts)i(from)f(the)h(high)2010 2311 y(ph)n(ysical)c(attac)n(k)h(securit)n(y)f(o\013ered)h(b)n(y)f(the)i(Spiridon)f(co-)2010 2410 y(pro)r(cessor,)24b(whic)n(h)h(will)h(b)r(e)g(describ)r(ed)f(in)g(another)g(publi-)20102510 y(cation.)2010 2709 y(Ho)n(w)n(ev)n(er,)c(w)n(e)h(exp)r(ect)g(an)g(implemen)n(tation)g(using)f(an)h(op-)2010 2809 y(timal)36b(mo)r(dular)f(arithmetic)h(copro)r(cessor)e(with)i(all)g(the)20102908 y(op)r(erations)21 b(describ)r(ed)i(at)f(the)h(b)r(eginning)f(of)h(the)g(presen)n(t)2010 3008 y(pap)r(er)g(b)n(y)g(at)h(least)f(a)g(factor)g(of)g(four)g(faster)g(than)h(the)g(im-)20103108 y(plemen)n(tation)j(on)h(In\014neons)f(Spiridon.)20103532 y Fr(7)112 b(Ac)m(kno)m(wledgmen)m(ts)2010 3841y Fq(W)-7 b(e)26 b(w)n(ould)e(lik)n(e)h(to)g(thank)g(W.)h(Fisc)n(her)e(for)h(v)-5 b(aluable)24 b(dis-)2010 3941 y(cussions)33b(on)h(the)h(material)e(presen)n(ted)h(within)h(this)g(pa-)20104040 y(p)r(er.)2010 4465 y Fr(References)2010 4717 yFq([A])353 b(R.)65 b(Anderson,)73 b Fh(Se)l(curity)63b(Engine)l(ering)p Fq(,)2471 4816 y(John)27 b(Wiley)h(&)f(Sons,)h(New)f(Y)-7 b(ork,)27 b(2001.)2010 5001 y([ABFHS])132 b(C.)38b(Aum)r(\177)-44 b(uller,)40 b(B.)e(Bier,)h(W.)f(Fisc)n(her,)h(P)-7b(.)2471 5101 y(Hofreiter,)35 b(J.-P)-7 b(.)33 b(Seifert,)j(\\F)-7b(ault)34 b(attac)n(ks)2471 5201 y(on)22 b(RSA:)h(Concrete)e(results)h(and)g(practical)2471 5300 y(coun)n(termeasures",)28b Fa(Pro)r(c.)i(of)g(CHES)g('02)p Fq(,)2471 5400 y(Springer)d(LNCS,)h(pp.)g(261-276,)c(2002.)p eop%%Page: 9 99 8 bop 0 83 a Fq([A)n(G])290 b(M.)40 b(L.)g(Akk)-5 b(ar,)43b(C.)d(Giraud,)i(\\An)e(imple-)461 183 y(men)n(tation)51b(of)g(DES)g(and)g(AES,)g(secure)461 282 y(against)29b(some)h(attac)n(ks",)f Fa(Pro)r(c.)g(of)h(CHES)461 382y('01)p Fq(,)c(Springer)f(LNCS)i(v)n(ol.)e(2162,)g(pp.)i(315-)461482 y(324,)g(2001.)0 652 y([AK1])246 b(R.)34 b(Anderson,)h(M.)g(Kuhn,)g(\\T)-7 b(amp)r(er)33 b(Re-)461 751 y(sistance)27 b({)h(a)f(cautionary)f(note",)h Fa(Pro)r(c.)g(of)461 851 y(2nd)32 b(USENIX)h(W)-7b(orkshop)31 b(on)h(Electronic)461 951 y(Commerce)p Fq(,)27b(pp.)h(1-11,)e(1996.)0 1121 y([AK2])246 b(R.)31 b(Anderson,)g(M.)f(Kuhn,)h(\\Lo)n(w)f(cost)g(at-)461 1220 y(tac)n(ks)37b(attac)n(ks)f(on)h(tamp)r(er)h(resistan)n(t)e(de-)4611320 y(vices",)20 b Fa(Pro)r(c.)f(of)g(1997)e(Securit)n(y)i(Proto)r(cols)461 1420 y(W)-7 b(orkshop)p Fq(,)44 b(Springer)c(LNCS)i(v)n(ol.)f(1361,)461 1519 y(pp.)28 b(125-136,)d(1997.)0 1689 y([BDL])241b(D.)39 b(Boneh,)g(R.)f(A.)g(DeMillo,)j(R.)d(Lipton,)4611789 y(\\On)21 b(the)g(Imp)r(ortance)g(of)g(Eliminating)g(Er-)4611889 y(rors)36 b(in)i(Cryptographic)d(Computations")4611988 y Fa(Journal)k(of)h(Cryptology)46 b Fo(14)p Fq(\(2\):101-120,)4612088 y(2001.)0 2258 y([BDHJNT])66 b(F.)31 b(Bao,)e(R.)h(H.)h(Deng,)f(Y.)h(Han,)f(A.)h(Jeng,)461 2358 y(A.)h(D.)f(Narasim)n(balu,)f(T.)h(Ngair,)g(\\Break-)461 2457 y(ing)j(public)h(k)n(ey)f(cryptosystems)f(on)h(tam-)461 2557 y(p)r(er)39 b(resistan)n(t)g(div)n(es)f(in)i(the)g(presence)e(of)461 2656 y(transien)n(t)53 b(faults",)60b Fa(Pro)r(c.)53 b(of)g(1997)f(Se-)461 2756 y(curit)n(y)d(Proto)r(cols)f(W)-7 b(orkshop)p Fq(,)54 b(Springer)461 2856 y(LNCS)28b(v)n(ol.)f(1361,)f(pp.)i(115-124,)c(1997.)0 3026 y([BS97])226b(E.)57 b(Biham,)65 b(A.)57 b(Shamir,)65 b(\\Di\013eren)n(tial)4613125 y(fault)36 b(analysis)f(of)g(secret)g(k)n(ey)g(cryptosys-)4613225 y(tems",)23 b Fa(Pro)r(c.)e(of)h(CR)-7 b(YPTO)21b('97)p Fq(,)h(Springer)461 3325 y(LNCS)28 b(v)n(ol.)f(1294,)f(pp.)i(513-525,)c(1997.)0 3495 y([BS99])226 b(E.)40 b(Biham,)i(A.)e(Shamir,)j(\\P)n(o)n(w)n(er)36 b(analy-)461 3594 y(sis)k(of)g(the)h(k)n(ey)f(sc)n(heduling)f(of)h(the)h(AES)461 3694 y(candidates",)34b Fa(Pro)r(c.)f(of)h(the)g(second)f(AES)461 3794 y(conference)5b Fq(,)27 b(pp.)h(115-121,)c(1999.)0 3964 y([BS02])226b(J.)91 b(Bl\177)-42 b(omer,)105 b(J.-P)-7 b(.)90 b(Seifert,)106b(\\F)-7 b(ault)461 4063 y(based)77 b(cryptanalysis)e(of)h(the)i(AES",)461 4163 y(e-Prin)n(t)52 b(Arc)n(hiv)n(e)f(of)i(the)g(IA)n(CR,)g(2002,)461 4263 y Fi(http://www.iacr.o)o(rg)o(/)p Fq(.)0 4433y([BMM])204 b(I.)45 b(Biehl,)j(B.)c(Mey)n(er,)k(V.)d(M)r(\177)-44b(uller,)48 b(\\Dif-)461 4532 y(feren)n(tial)30 b(fault)g(attac)n(ks)f(on)h(elliptic)g(curv)n(e)461 4632 y(cryptosystems",)72b Fa(Pro)r(c.)64 b(of)h(CR)-7 b(YPTO)461 4732 y('00)pFq(,)26 b(Springer)f(LNCS)i(v)n(ol.)e(1880,)g(pp.)i(131-)4614831 y(146,)g(2000.)0 5001 y([CCD])232 b(C.)69 b(Cla)n(vier,)77b(J.-S.)68 b(Coron,)77 b(N.)69 b(Dab-)461 5101 y(b)r(ous,)44b(\\Di\013eren)n(tial)c(P)n(o)n(w)n(er)e(Analysis)i(in)4615201 y(the)24 b(presence)e(of)h(Hardw)n(are)e(Coun)n(termea-)4615300 y(sures",)48 b Fa(Pro)r(c.)c(of)h(CHES)g('00)p Fq(,)k(Springer)4615400 y(LNCS)28 b(v)n(ol.)f(1965,)f(pp.)i(252-263,)c(2000.)201083 y([CJRR])190 b(S.)43 b(Chari,)k(C.)c(Jutla,)j(J.)d(R.)g(Rao,)k(P)-7b(.)42 b(J.)2471 183 y(Rohatgi,)49 b(\\A)44 b(cautionary)g(note)g(regard-)2471 282 y(ing)f(ev)-5 b(aluation)42 b(of)h(AES)f(candidates)g(on)2471 382 y(smartcards",)30 b Fa(Pro)r(c.)g(of)g(the)i(second)e(AES)2471 482 y(conference)5 b Fq(,)27 b(pp.)h(135-150,)c(1999.)2010635 y([CKN])228 b(J.-S.)42 b(Coron,)i(P)-7 b(.)42 b(Ko)r(c)n(her)f(D.)h(Naccac)n(he,)2471 734 y(\\Statistics)30 b(and)g(Secret)g(Leak)-5b(age",)29 b Fa(Pro)r(c.)2471 834 y(of)52 b(Financial)g(Cryptograph)n(y)p Fq(,)k(Springer)2471 934 y(LNCS,)28 b(2000.)20101087 y([DR1])249 b(J.)53 b(Daemen,)59 b(V.)53 b(Rijmen,)60b(\\Resistance)2471 1186 y(against)67 b(implemen)n(tation)g(attac)n(ks:)115 b(a)2471 1286 y(comparativ)n(e)34 b(study",)jFa(Pro)r(c.)e(of)h(the)g(sec-)2471 1386 y(ond)68 b(AES)f(conference)5b Fq(,)77 b(pp.)68 b(122-132,)2471 1485 y(1999.)20101638 y([DR2])249 b(J.)50 b(Daemen,)55 b(V.)c(Rijmen,)56b Fh(The)51 b(Design)2471 1738 y(of)56 b(R)n(ijndael)pFq(,)63 b(Springer-V)-7 b(erlag,)58 b(Berlin,)2471 1838y(2002.)2010 1991 y([DPV])233 b(J.)40 b(Daemen,)j(M.)d(P)n(eeters,)h(G.)f(V)-7 b(an)40 b(Ass-)2471 2090 y(c)n(he,)28 b(\\Bitslice)f(ciphers)h(and)f(implemen)n(ta-)2471 2190 y(tion)41 b(attac)n(ks",)hFa(Pro)r(c.)e(of)h(F)-7 b(ast)40 b(Soft)n(w)n(are)24712290 y(Encryption)c(2000)p Fq(,)i(Springer)e(LNCS)h(v)n(ol.)24712389 y(1978,)26 b(pp.)i(134-149,)c(2001.)2010 2542 y([FIPS])228b(F)-7 b(ederal)42 b(Information)h(Pro)r(cessing)d(Stan-)24712642 y(dard,)25 b(\\Adv)-5 b(anced)25 b(Encryption)f(Standard)24712742 y(\(AES\)",)56 b(National)e(Institute)i(of)f(Stan-)24712841 y(dards)c(and)g(T)-7 b(ec)n(hnology)50 b(\(NIST\))i(2001,)24712941 y Fi(http://csrc.nist.)o(go)o(v/p)o(ub)o(li)o(cat)o(io)o(ns)24713040 y(/drafts/dfips-AES)o(.p)o(df)p Fq(.)2010 3194 y([Gu1])262b(P)-7 b(.)33 b(Gutmann,)h(\\Secure)e(deletion)h(of)g(data)24713293 y(from)49 b(magnetic)f(and)h(solid-state)f(mem-)24713393 y(ory",)e Fa(Pro)r(c.)d(of)g(6th)h(USENIX)g(Securit)n(y)24713492 y(Symp)r(osium)p Fq(,)28 b(pp.)g(77-89,)e(1997.)20103646 y([Gu2])262 b(P)-7 b(.)62 b(Gutmann,)70 b(\\Data)61b(Remanence)h(in)2471 3745 y(Semiconductor)35 b(Devices",)jFa(Pro)r(c.)c(of)i(7th)2471 3845 y(USENIX)28 b(Securit)n(y)f(Symp)r(osium)p Fq(,)h(1998.)2010 3998 y([Inf1])272 b(In\014neon)25b(T)-7 b(ec)n(hnologies)23 b(A)n(G,)i(\\Securit)n(y)e(&)24714098 y(Chip)51 b(Card)e(ICs,)56 b(Crypto2000,)d(Mo)r(du-)24714197 y(lar)c(Arithmetic)h(Copro)r(cessor,)j(Prelimi-)24714297 y(nary)40 b(Con\014den)n(tial)h(Arc)n(hitecture)f(Sp)r(eci-)24714396 y(\014cation",)27 b(v1.1,)g(Jan)n(uary)e(2001.)20104549 y([Inf2])272 b(In\014neon)25 b(T)-7 b(ec)n(hnologies)23b(A)n(G,)i(\\Securit)n(y)e(&)2471 4649 y(Chip)30 b(Card)f(ICs,)h(SLE)g(66Cxxx,)f(Securit)n(y)2471 4749 y(Con)n(troller)37 b(F)-7b(amily)g(,)41 b(Preliminary)c(Con\014-)2471 4848 y(den)n(tial)28b(Data)f(Bo)r(ok",)f(Septem)n(b)r(er)i(2001.)2010 5001y([JLQ])255 b(M.)91 b(Jo)n(y)n(e,)106 b(A.)91 b(K.)g(Lenstra,)106b(J.-J.)2471 5101 y(Quisquater,)94 b(\\Chinese)81 b(remaindering)24715201 y(based)56 b(cryptosystem)f(in)h(the)h(presence)24715300 y(of)77 b(faults",)89 b Fa(Journal)75 b(of)i(Cryptology)24715400 y Fo(12)p Fq(\(4\):241-245,)24 b(1999.)p eop%%Page: 10 1010 9 bop 0 83 a Fq([JPY])253 b(M.)44 b(Jo)n(y)n(e,)j(P)-7b(.)44 b(P)n(ailler,)i(S.-M.)e(Y)-7 b(en,)49 b(\\Se-)461183 y(cure)68 b(Ev)-5 b(aluation)68 b(of)h(Mo)r(dular)f(F)-7b(unc-)461 282 y(tions",)72 b Fa(Pro)r(c.)62 b(of)h(2001)e(In)n(ternational)461 382 y(W)-7 b(orkshop)25 b(on)h(Cryptology)e(and)h(Net)n(w)n(ork)461 482 y(Securit)n(y)p Fq(,)i(pp.)h(227-229,)d(2001.)0652 y([JQBD])185 b(M.)56 b(Jo)n(y)n(e,)61 b(J.-J.)55b(Quisquater,)61 b(F.)56 b(Bao,)461 751 y(R.)37 b(H.)g(Deng,)i(\\RSA-t)n(yp)r(e)e(signatures)e(in)461 851 y(the)23 b(presence)f(of)h(transien)n(t)f(faults",)h Fa(Cryp-)461 951 y(tograph)n(y)30 b(and)h(Co)r(ding)7b Fq(,)32 b(Springer)e(LNCS)461 1050 y(v)n(ol.)d(1335,)f(pp.)i(155-160,)c(1997.)0 1220 y([JQYY])183 b(M.)34 b(Jo)n(y)n(e,)f(J.-J.)g(Quisquater,)h(S.)g(M.)g(Y)-7 b(en,)461 1320 y(M.)48b(Y)-7 b(ung,)53 b(\\Observ)-5 b(abilit)n(y)46 b(analysis)g(|)4611420 y(detecting)58 b(when)g(impro)n(v)n(ed)e(cryptosys-)4611519 y(tems)40 b(fail",)j Fa(Pro)r(c.)c(of)h(CT-RSA)g(Confer-)4611619 y(ence)g(2002)7 b Fq(,)41 b(Springer)e(LNCS)h(v)n(ol.)f(2271,)4611718 y(pp.)28 b(17-29,)e(2002.)0 1889 y([KR])289 b(B.)34b(Kaliski,)g(M.)g(J.)f(B.)h(Robsha)n(w,)g(\\Com-)4611988 y(men)n(ts)40 b(on)g(some)f(new)h(attac)n(ks)e(on)i(cryp-)4612088 y(tographic)35 b(devices",)i Fa(RSA)g(Lab)r(oratories)4612187 y(Bulletin)28 b Fo(5)p Fq(,)g(July)f(1997.)0 2358y([KK])285 b(O.)80 b(K\177)-42 b(ommerling,)91 b(M.)81b(Kuhn,)92 b(\\De-)461 2457 y(sign)51 b(Principles)f(for)g(T)-7b(amp)r(er-Resistan)n(t)461 2557 y(Smartcard)48 b(Pro)r(cessors",)jFa(Pro)r(c.)d(of)h(the)461 2656 y(USENIX)84 b(W)-7 b(orkshop)82b(on)h(Smartcard)461 2756 y(T)-7 b(ec)n(hnologies)p Fq(,)26b(pp.)i(9-20,)e(1999.)0 2926 y([K)n(Q])287 b(F.)37 b(Ko)r(eune,)h(J.-J.)d(Quisquater,)j(\\A)e(tim-)461 3026 y(ing)k(attac)n(k)g(against)f(Rijndael",)44 b Fa(Univ)n(er-)461 3125 y(sit)n(\023)-39b(e)45 b(catholique)g(de)h(Louv)-5 b(ain)p Fq(,)49 b(TR)d(CG-)4613225 y(1999/1,)25 b(6)i(pages)g(,)g(1999.)0 3395 y([Ko)r(ca])227b(O.)64 b(Ko)r(car,)73 b(\\Hardw)n(aresic)n(herheit)61b(v)n(on)461 3495 y(Mikro)r(c)n(hips)66 b(in)i(Chipk)-5b(arten",)76 b Fa(Daten-)461 3594 y(sc)n(h)n(utz)30 b(und)h(Datensic)n(herheit)g Fo(20)p Fq(\(7\):421-)461 3694 y(424,)c(1996.)03864 y([Ko)r(c)n(h])225 b(P)-7 b(.)53 b(Ko)r(c)n(her,)59b(\\Timing)53 b(attac)n(ks)f(on)h(im-)461 3964 y(plemen)n(tations)117b(of)g(Di\016e-Hellmann,)461 4063 y(RSA,)38 b(DSS)g(and)g(other)e(systems",)j Fa(Pro)r(c.)461 4163 y(of)75 b(CYRPTO)g('97)pFq(,)87 b(Springer)74 b(LNCS)461 4263 y(v)n(ol.)27 b(1109,)f(pp.)i(104-113,)c(1997.)0 4433 y([KJJ])264 b(P)-7 b(.)59 b(Ko)r(c)n(her,)67b(J.)59 b(Ja\013e,)67 b(J.)59 b(Jun,)68 b(\\Dif-)4614532 y(feren)n(tial)100 b(P)n(o)n(w)n(er)e(Analysis",)118b Fa(Pro)r(c.)461 4632 y(of)75 b(CYRPTO)g('99)p Fq(,)87b(Springer)74 b(LNCS)461 4732 y(v)n(ol.)27 b(1666,)f(pp.)i(388-397,)c(1999.)0 4902 y([KWMK])124 b(R.)67 b(Karri,)75 b(K.)66b(W)-7 b(u,)77 b(P)-7 b(.)66 b(Mishra,)76 b(Y.)461 5001y(Kim,)52 b(\\Concurren)n(t)46 b(error)f(detection)i(of)4615101 y(fault-based)41 b(side-c)n(hannel)f(cryptanalysis)4615201 y(of)48 b(128-bit)e(symmetric)i(blo)r(c)n(k)f(ciphers",)4615300 y Fa(Pro)r(c.)64 b(of)h(IEEE)e(Design)i(Automation)4615400 y(Conference)p Fq(,)27 b(pp.)h(579-585,)d(2001.)201083 y([Li])340 b(H.)127 b(Lipmaa,)151 b(\\AES)126 b(candidates,)2471183 y(a)131 b(surv)n(ey)f(of)i(implemen)n(tations",)2471282 y Fi(http://www.tcs.hu)o(t.)o(fi/)o Fp(\030)p Fi(h)o(el)o(ger)2471382 y(/aes/rijndael.htm)o(l)p Fq(.)2010 552 y([Ma])297b(D.)61 b(P)-7 b(.)60 b(Maher,)67 b(\\F)-7 b(ault)60b(induction)h(at-)2471 652 y(tac)n(ks,)72 b(tamp)r(er)64b(resistance,)71 b(and)64 b(hos-)2471 751 y(tile)g(rev)n(erse)d(engineering)h(in)i(p)r(ersp)r(ec-)2471 851 y(tiv)n(e",)20b Fa(Pro)r(c.)e(of)g(Financial)g(Cryptograph)n(y)p Fq(,)2471951 y(Springer)27 b(LNCS)h(v)n(ol.)g(1318,)e(pp.)i(109-121,)24711050 y(1997.)2010 1220 y([Me])302 b(T.)45 b(Messerges,)j(\\Securing)43b(the)i(AES)g(\014-)2471 1320 y(nalists)21 b(against)f(p)r(o)n(w)n(er)h(analysis)f(attac)n(ks",)2471 1420 y Fa(Pro)r(c.)66 b(of)h(F)-7b(ast)67 b(Soft)n(w)n(are)f(Encryption)2471 1519 y(2000)pFq(,)52 b(Springer)47 b(LNCS)h(v)n(ol.)f(1978,)52 b(pp.)24711619 y(150-164,)25 b(2001.)2010 1789 y([MAK])212 b(S.)37b(W.)h(Mo)r(ore,)g(R.)f(J.)f(Anderson,)j(M.)e(G.)24711889 y(Kuhn,)29 b(\\Impro)n(ving)d(Smartcard)i(Securit)n(y)24711988 y(using)h(Self-Timed)h(Circuit)f(T)-7 b(ec)n(hnology",)24712088 y Fa(F)g(ourth)50 b(AciD-W)n(G)h(W)-7 b(orkshop)pFq(,)54 b(Greno-)2471 2187 y(ble,)28 b(ISBN)g(2-913329-44-6,)22b(2000.)2010 2358 y([MA)n(CMT])83 b(S.)29 b(W.)f(Mo)r(ore,)f(R.)i(J.)f(Anderson,)f(P)-7 b(.)28 b(Cun-)2471 2457 y(ningham,)35b(R.)f(Mullins,)h(G.)e(T)-7 b(a)n(ylor,)34 b(\\Im-)24712557 y(pro)n(ving)24 b(Smartcard)h(Securit)n(y)g(using)h(Self-)24712656 y(Timed)44 b(Circuit)f(T)-7 b(ec)n(hnology",)45b Fa(Pro)r(c.)d(of)2471 2756 y(Async)n(h)30 b(2002)pFq(,)e(IEEE)g(Computer)h(So)r(ciet)n(y)2471 2856 y(Press,)d(2002.)20103026 y([NR])292 b(D.)53 b(Naccac)n(he,)58 b(D.)53 b(M'Raihi,)60b(\\Crypto-)2471 3125 y(graphic)c(smart)g(cards",)63b Fa(IEEE)56 b(Micro)p Fq(,)2471 3225 y(pp.)28 b(14-24,)e(1996.)20103395 y([P)n(ai])295 b(P)-7 b(.)20 b(P)n(ailler,)f(\\Ev)-5b(aluating)18 b(di\013eren)n(tial)i(fault)2471 3495 y(analysis)46b(of)h(unkno)n(wn)g(cryptosystems",)2471 3594 y Fa(Gemplus)29b(Corp)r(orate)e(Pro)r(duct)h(R&D)h(Di-)2471 3694 y(vision)pFq(,)e(TR)h(AP05-1998,)c(8)j(pages,)g(1999.)2010 3864y([P)n(e])323 b(I.)40 b(P)n(etersen,)i(\\Chinks)e(in)g(digital)g(armor)2471 3964 y(|)46 b(Exploiting)e(faults)i(to)f(break)f(smart-)24714063 y(card)66 b(cryptosystems",)74 b Fa(Science)66 b(News)24714163 y Fo(151)p Fq(\(5\):78-79,)25 b(1997.)2010 4333y([Sa])327 b(J.)95 b(Sa)n(v)-5 b(ard,)110 b(\\The)94b(Adv)-5 b(anced)95 b(En-)2471 4433 y(cryption)165 b(Standard)h(\(Rijndael\)",)2471 4532 y Fi(http://home.ecn.a)o(b.)o(ca/)oFp(\030)p Fi(j)o(sa)o(var)o(d)2471 4632 y(/crypto/co040801.)o(ht)o(ml)pFq(.)2010 4802 y([SQ])304 b(D.)49 b(Sam)n(yde,)k(J.-J.)47b(Quisquater,)52 b(\\Elec-)2471 4902 y(troMagnetic)62b(Analysis)g(\(EMA\):)h(Mea-)2471 5001 y(sures)35 b(and)g(Coun)n(termeasures)e(for)h(Smart)2471 5101 y(Cards",)58 b Fa(Pro)r(c.)51b(of)i(In)n(t.)g(Conf.)g(on)f(Re-)2471 5201 y(searc)n(h)29b(in)i(Smart)f(Cards,)g(E-Smart)f(2001)p Fq(,)2471 5300y(Springer)e(LNCS)h(v)n(ol.)g(2140,)e(pp.)i(200-210,)24715400 y(2001.)p eop%%Page: 11 1111 10 bop 0 83 a Fq([SMTM])157 b(A.)41 b(Satoh,)i(S.)e(Moriok)-5b(a,)42 b(K.)e(T)-7 b(ak)i(ano,)43 b(S.)461 183 y(Munetoh,)38b(\\A)e(compact)f(Rijndael)h(hard-)461 282 y(w)n(are)62b(arc)n(hitecture)f(with)i(S-Bo)n(x)e(opti-)461 382 y(mization",)36b Fa(Pro)r(c.)d(of)i(ASIA)n(CR)-7 b(YPT)35 b('01)p Fq(,)461482 y(Springer)27 b(LNCS,)h(pp.)g(241-256,)c(2001.)0648 y([SA])307 b(S.)32 b(Sk)n(orob)r(ogato)n(v,)d(R.)j(Anderson,)g(\\Opti-)461 747 y(cal)f(F)-7 b(ault)32 b(Induction)f(A)n(ttac)n(ks",)gFa(Pro)r(c.)f(of)461 847 y(CHES)41 b('02)p Fq(,)i(Springer)c(LNCS,)i(pp.)g(2-12,)461 946 y(2002.)0 1112 y([W)-7 b(o])295b(J.)60 b(W)-7 b(olk)n(erstorfer,)66 b(\\An)60 b(ASIC)g(imple-)4611212 y(men)n(tation)d(of)g(the)g(AES)g(MixColumn-)4611312 y(op)r(eration",)46 b(Graz)c(Univ)n(ersit)n(y)g(of)i(T)-7b(ec)n(h-)461 1411 y(nology)g(,)34 b(Institute)h(for)e(Applied)h(Informa-)461 1511 y(tion)j(Pro)r(cessing)d(and)i(Comm)n(unications,)461 1611 y(Man)n(uscript,)27 b(4)g(pages,)g(2001.)0 1777y([W)n(OL])215 b(J.)32 b(W)-7 b(olk)n(erstorfer,)32 b(E.)g(Osw)n(ald,)g(M.)h(Lam-)461 1876 y(b)r(erger,)43 b(\\An)e(ASIC)g(implemen)n(tation)g(of)461 1976 y(the)71 b(AES)f(S-Bo)n(xes",)78 b Fa(Pro)r(c.)69b(of)h(CT-)461 2076 y(RSA)28 b(Conference)f(2002)7 bFq(,)25 b(Springer)h(LNCS)461 2175 y(v)n(ol.)h(2271,)f(2002.)02341 y([YJ])310 b(S.-M.)33 b(Y)-7 b(en,)33 b(M.)g(Jo)n(y)n(e,)f(\\Chec)n(king)e(b)r(efore)461 2441 y(output)57 b(ma)n(y)e(not)h(b)r(e)g(enough)f(against)461 2540 y(fault-based)118 b(cryptanalysis",)139b Fa(IEEE)461 2640 y(T)-7 b(rans.)87 b(on)g(Computers)kFo(49)p Fq(:967-970,)461 2740 y(2000.)0 2906 y([YKLM1])118b(S.-M.)40 b(Y)-7 b(en,)44 b(S.-J.)c(Kim,)j(S.-G.)d(Lim,)j(S.-)4613005 y(J.)28 b(Mo)r(on,)g(\\RSA)g(Sp)r(eedup)h(with)f(Residue)4613105 y(Num)n(b)r(er)45 b(System)f(imm)n(une)h(from)f(Hard-)4613205 y(w)n(are)28 b(fault)h(cryptanalysis",)f Fa(Pro)r(c.)g(of)h(the)461 3304 y(ICISC)f(2001)p Fq(,)e(Springer)g(LNCS,)i(2001.)03470 y([YKLM2])118 b(S.-M.)31 b(Y)-7 b(en,)31 b(S.-J.)f(Kim,)h(S.-G.)f(Lim,)h(S.-J.)461 3570 y(Mo)r(on,)e(\\A)f(coun)n(termeasure)f(against)g(one)461 3670 y(ph)n(ysical)i(cryptanalysis)e(ma)n(y)i(b)r(ene\014t)h(an-)461 3769 y(other)21 b(attac)n(k",)g Fa(Pro)r(c.)f(of)h(the)h(ICISC)f(2001)p Fq(,)461 3869 y(Springer)27 b(LNCS,)h(2001.)04035 y([YT])293 b(S.-M.)39 b(Y)-7 b(en,)42 b(S.)d(Y.)h(Tseng,)h(\\Di\013eren)n(tial)461 4134 y(p)r(o)n(w)n(er)34 b(cryptanalysis)g(of)h(a)g(Rijndael)g(im-)461 4234 y(plemen)n(tation",)26b(LCIS)h(T)-7 b(ec)n(hnical)25 b(Rep)r(ort)461 4334 y(TR-2K1-9,)h(Dept.)k(of)e(Computer)g(Science)461 4433 y(and)23 b(Information)g(Engineering,)g(National)461 4533 y(Cen)n(tral)k(Univ)n(ersit)n(y)-7b(,)27 b(T)-7 b(aiw)n(an,)26 b(2001.)0 4699 y([ZM])288b(Y.)44 b(Zheng,)k(T.)c(Matsumoto,)j(\\Breaking)461 4799y(real-w)n(orld)59 b(implemen)n(tations)j(of)f(cryp-)4614898 y(tosystems)39 b(b)n(y)g(manipulating)h(their)f(ran-)4614998 y(dom)30 b(n)n(um)n(b)r(er)f(generation",)g Fa(Pro)r(c.)f(of)i(the)461 5098 y(1997)20 b(Symp)r(osium)h(on)g(Cryptograph)n(y)e(and)4615197 y(Information)33 b(Securit)n(y)p Fq(,)i(Springer)e(LNCS,)4615297 y(1997.)p eop%%Trailerenduserdict /end-hook known{end-hook}if%%EOF
