#! /usr/bin/env python

# Stupid little tool to parse bibtex files and generate cardis proceedings HTML
# Authors: Davide Balzarotti (5-6-2013) 
# Authors: Aurelien Francillon (10-3-2015) 
# update for cardis



import glob
import sys
import os
import re 

months = {
 "january":1,
 "february":2,
 "march":3,
 "april":4,
 "may":5,
 "june":6,
 "july":7,
 "august":8,
 "september":9,
 "october":10,
 "november":11,
 "december":12
}

by_year          = {}
btex_directory   = ""
webroot_path     = ""
pdf_directory    = None
slides_directory = None
afilter          = None
firstyear        = None
years            = []
keywords         = []
output           = "none"
invert_match     = False
list_keywords    = False
all_keywords     = {}


def usage():
    sys.stderr.write("""Use: %s [options] [directory]
 Parse all the .bib files located inside the specified directory
 (or under /var/www/docs/btex if none is specified)
 
Options:
 -y year                 : group together publications older than year
 -a author/affiliation   : limit the output to the documents containing
                           a certain author or a certain affiliation
 -k keyword1,keyword2,.. : only list papers matching one of the keywords
 -K                      : lists all the keywords
 -o [html|txt]           : generate html or txt output
 -v                      : invert match
 -r webroot_path         : Path the the web root

Example:
 > bib_parse -a balzarotti -y 2009 -o html > pub.html
 Extract all publications of balzarotti, grouping together the ones
 older than 2009
"""%sys.argv[0])
    sys.exit(0)

class BibEntry:
    def __init__(self):
        self.authors      = []
        self.title        = ""
        self.venue        = ""
        self.location     = None
        self.year         = 0
        self.month        = 0
        self.series       = ""
        self.a_rate       = 0
        self.notes        = None
        self.url          = None
        self.extralink    = None
        self.extralink2    = None
        self.affiliations = None
        self.filename     = None
        self.keywords     = ""
        self.slides_path  = None
        self.doc_path     = None
        self.nr     = None

    def get_authors(self):
        if len(self.authors) == 1: return self.authors[0]
        return ', '.join (self.authors[:-1]) + ' and ' + self.authors[-1]

    def print_html(self):
        global pdf_directory, slides_directory, btex_directory
        
        print "<li>",
        print '     %s'%self.get_authors().decode('utf-8').encode('ascii', 'xmlcharrefreplace')

        print '     <br><b>%s</b>'%self.title.decode('utf-8').encode('ascii', 'xmlcharrefreplace')
    
        previous=False

        print "(",
        if self.doc_path:
            sys.stdout.softspace=False;
            print """<a href="%s" target=_blank>pdf</a>"""%self.doc_path,
            previous=True

        if self.slides_path:    
            sys.stdout.softspace=False;
            if previous: print ", ",
            print """<a href="%s" target=_blank>Slides</a>"""%self.slides_path,
            previous= True

        if self.url:    
            sys.stdout.softspace=False;
            if previous: print ", ",            
            print """<a href="%s" target=_blank>DOI</a>"""%self.url,
            previous=True
        if previous: print ", ",
        sys.stdout.softspace=False;
        print """<a href="%s%s.bib" target=_blank>Bibtex</a>"""%(btex_directory, self.filename),
        sys.stdout.softspace=False;      
        print ")"
        if self.extralink:
            name, url = self.extralink.split(":",1)
            name = name.strip()
            url  = url.strip()
            print '      <a href="%s">%s</a>'%(url, name)
        if self.extralink2:
            name, url = self.extralink2.split(":",1)
            name = name.strip()
            url  = url.strip()
            print '      <a href="%s">%s</a>'%(url, name)
        
        print "</li>"

    def print_txt(self):
        print self.filename
        print ", ".join(self.authors)
        print '"%s"'%self.title
        print self.venue        
        if self.notes:
            print self.notes
        if self.a_rate > 0:
            print '(Acceptance Rate: %.1f%%)'%self.a_rate
        print ""

def getvalue(line):
    try:
        s = line.find("=")
        v = line[s+1:].strip()
        if v[-1]==",":
            v = v[:-1].strip()
        if v[0]=="{" or v[0]=='"':
            v = v[1:-1].strip()
        if len(v) > 1 and (v[0]=="{" or v[0]=='"'):
            v = v[1:-1].strip()
        return v  
    except:
        print "Error in line", line
        sys.exit(1)

i = 1
while i < len(sys.argv):
    if sys.argv[i]=="-a":
        afilter = sys.argv[i+1].lower()
        i+= 1
    elif sys.argv[i]=="-r":
        webroot_path=sys.argv[i+1]
        i+=1
    elif sys.argv[i]=="-K":
        list_keywords = True
    elif sys.argv[i]=="-k":
        keywords = [x.lower() for x in sys.argv[i+1].split(",")]
        i+= 1
    elif sys.argv[i]=="-o":
        if sys.argv[i+1] in ["html","txt","none"]:
            output = sys.argv[i+1]
        else:
            usage()
        i += 1
    elif sys.argv[i]=="-v":
        invert_match = True
    elif sys.argv[i]=="-h":
        usage()
    elif sys.argv[i]=="-y":
        firstyear = int(sys.argv[i+1])
        i+= 1
    elif sys.argv[i][0] == "-":
        print "Unknown option ",sys.argv[i]
        usage()
        sys.exit(1)
    else:
        if btex_directory:
            usage()
        btex_directory=sys.argv[i]
    i += 1

if not btex_directory:
    if os.path.exists("/var/www/bibs"):
        btex_directory = "/var/www/bibs"
    else:
        usage()

if btex_directory[-1] != "/":
    btex_directory += "/"
pdf_directory = btex_directory + "pdf/"
slides_directory = btex_directory + "slides/"

btex_count = matched = 0
        
sys.stderr.write("File     (B)ibtex (D)ocument (S)lides \n         (k)eywords (a)ffiliations acceptance(r)ate (n)otes extra(l)ink\n\n")


if webroot_path:
    bibfiles= glob.glob('%s/%s*.bib'%(webroot_path, btex_directory))
else:
    bibfiles= glob.glob('%s*.bib'%btex_directory)

for example in bibfiles:
    data = open(example, 'r').readlines()
    entry = None
    try:
        for line in data:
            line = line.strip()
            lline = line.lower()
            if len(line)<1:
                continue
            if line[0] == "@":
                if entry:
                    y = entry.year
                    if y < 2009:
                        y = 2009
                    if y in by_year:
                        by_year[y].append(entry)
                    else:
                        by_year[y] = [entry,]
                entry = BibEntry()
                entry.filename = os.path.basename(example)[:-4]
                entry.nr=int(entry.filename.split("_")[-1].split('.')[0])
                continue
            elif lline.startswith("author"):
                # orig
                # entry.authors = [a.strip() for a in getvalue(line).split(" and ")]
                # swap firstname lastname if presented as lastname, firstname
                entry.authors =[a.strip() if ',' not in a else " ".join(a.split(",")[::-1]) for a in getvalue(line).split(" and ")]
                continue
            elif lline.startswith("keywords"):
                entry.keywords = getvalue(line).lower()
                continue
            elif lline.startswith("booktitle"):
                entry.venue = getvalue(line)
                continue
            elif lline.startswith("journal"):
                entry.venue = getvalue(line)
                continue
            elif lline.startswith("title"):
                entry.title = getvalue(line)
                continue
            elif lline.startswith("month"):
                entry.month  = months[getvalue(line).lower()]
                continue
            elif lline.startswith("affiliations"):
                entry.affiliations  = getvalue(line)
                continue
            elif lline.startswith("extralink2"):
                entry.extralink2  = getvalue(line)
                continue
            elif lline.startswith("extralink"):
                entry.extralink  = getvalue(line)
                continue
            elif lline.startswith("year"):
                entry.year  = int(getvalue(line))
                continue
            elif lline.startswith("notes"):
                entry.notes  = getvalue(line)
                continue
            elif lline.startswith("url"):
                entry.url  = getvalue(line)
                continue
            elif lline.startswith("arate"):
                tmp = getvalue(line)
                if len(tmp)<2:
                    continue
                if "/" in tmp:
                    submitted, tot = tmp.split("/")
                    entry.a_rate = int(submitted)*100.0/int(tot)
                else:
                    entry.a_rate = float(tmp[:-2])
                continue
            elif lline.startswith("location"):
                entry.location = getvalue(line)
                continue
            elif lline.startswith("address"):
                if entry.location == None:
                    entry.location = getvalue(line)
                continue
    except Exception,e:
        sys.stderr.write("Error parsing file: %s\n"%example)
        print e
        sys.exit(1)

    filter_out = False
    if entry:
        if entry.keywords:
            for k in entry.keywords.split(","):
                k = k.strip()
                if k in all_keywords:
                    all_keywords[k] += 1
                else:
                    all_keywords[k] = 1
                    
        if not entry.get_authors():
            sys.stderr.write("Error file: %s\nNo authors found\n"%entry.filename)
            sys.exit(1)
            
        btex_count += 1
        if afilter:
            if (afilter not in entry.get_authors().lower()) and (entry.affiliations and afilter not in entry.affiliations.lower()):
                sys.stderr.write("[skip]\n")
                filter_out = True
        elif len(keywords):
            for w in keywords:
                if w in entry.keywords:
                    break
            else:
                sys.stderr.write("[skip]\n")
                filter_out = True
    
        if not invert_match:
            if filter_out:
                continue
        else:
            if not filter_out:
                continue


        sys.stderr.write('%s %s '%(example, "."*(60-len(example))))
        matched += 1

        found = "B"

        fname = os.path.join(webroot_path, pdf_directory, "%s.pdf"%entry.filename)

        # this is the year at which springer did publish the post-prodeedings
        if entry.year==2015:
            # this is the actual year the even happened
            conf_year=2014
        else:
            conf_year=entry.year

            
        fname2 = os.path.join(webroot_path, pdf_directory, "CARDIS%s_%s.pdf"%(conf_year,entry.nr))

        if os.path.exists(fname):
            entry.doc_path=os.path.join(pdf_directory, "%s.pdf"%entry.filename)
            found += "D"
        elif os.path.exists(fname2):
            entry.doc_path=os.path.join(pdf_directory, "CARDIS%s_%s.pdf"%(conf_year,entry.nr))
            found += "D"
        else:
            found += "\033[31;1mx\033[32;1m"

        fname = os.path.join(webroot_path,slides_directory, "%s.slides.pdf"%entry.filename)
        fname2 = glob.glob('%s/%s/%02d*.pdf'%(webroot_path,slides_directory,entry.nr))
        fname3 = os.path.join(slides_directory, "CARDIS%s_%s.pdf"%(conf_year,entry.nr))
        #fname3 = os.path.('%s/%s/%s*.pdf'%(webroot_path,slides_directory, "CARDIS%s_%s.pdf"%(conf_year,entry.nr)))

        
        if os.path.exists(fname):
            entry.slides_path = "/slides/%s.slides.pdf"%entry.filename
            found += "S"
        elif fname2 and os.path.exists(fname2[0]):
            #todo: we only match the first pdf for the slides, ignore any other match
            entry.slides_path = fname2[0][len(webroot_path):]
            found += "S"
            
        elif os.path.exists(os.path.join(webroot_path,fname3)):
            #todo: we only match the first pdf for the slides, ignore any other match
            entry.slides_path = fname3
            found += "S"
            
        else:
            found += "_"

        

        sys.stderr.write("search for path %s \n"%fname)
        sys.stderr.write("search for path %s \n"%fname2)
        sys.stderr.write("search for path %s \n"%fname3)
        
        extra_flags = ""
        extra_flags += "k" if len(entry.keywords) else "_"
        extra_flags += "a" if entry.affiliations else "_"
        extra_flags += "r" if entry.a_rate > 0 else "_"
        extra_flags += "n" if entry.notes else "_"
        extra_flags += "l" if entry.extralink else "_"
        
        sys.stderr.write("[\033[32;1m%s\033[0m]  \033[32;1m[%s\033[0m]\n"%(found,extra_flags))
        y = entry.year
        if firstyear and y < firstyear:
            y = firstyear
        if y not in years:
            years.append(y)
        if y in by_year:
            by_year[y].append(entry)
        else:
            by_year[y] = [entry,]
            
        
sys.stderr.write('    %d/%d bibtex entries displayed\n'%(matched, btex_count))

years.sort(reverse=True)

print ""

if list_keywords:
    print "Keywords:"
    tmp = all_keywords.items()
    tmp.sort(key=lambda x:x[1], reverse=True)
    for k,v in tmp:
        print " %.2d - %s"%(v, k)

if output == "html":
    print "<ul>"

for y in years:
    tmp = by_year[y]

    # sort by filename (bibfiles ordered properly)
    convert = lambda text: int(text) if text.isdigit() else text.lower()
    alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key.filename) ]
    by_year[y] = sorted(by_year[y], key = alphanum_key)    
    for e in by_year[y]:
        if output=="html":
            e.print_html()
        elif output=="txt":
            e.print_txt()

if output == "html":
    print "</ul>"
